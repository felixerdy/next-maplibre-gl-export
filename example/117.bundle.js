(self.webpackChunk_watergis_maplibre_gl_export=self.webpackChunk_watergis_maplibre_gl_export||[]).push([[117],{9662:(t,e,r)=>{var i=r(614),n=r(6330);t.exports=function(t){if(i(t))return t;throw TypeError(n(t)+" is not a function")}},9483:(t,e,r)=>{var i=r(4411),n=r(6330);t.exports=function(t){if(i(t))return t;throw TypeError(n(t)+" is not a constructor")}},6077:(t,e,r)=>{var i=r(614);t.exports=function(t){if("object"==typeof t||i(t))return t;throw TypeError("Can't set "+String(t)+" as a prototype")}},1223:(t,e,r)=>{var i=r(5112),n=r(30),a=r(3070),s=i("unscopables"),o=Array.prototype;null==o[s]&&a.f(o,s,{configurable:!0,value:n(null)}),t.exports=function(t){o[s][t]=!0}},1530:(t,e,r)=>{"use strict";var i=r(8710).charAt;t.exports=function(t,e,r){return e+(r?i(t,e).length:1)}},5787:t=>{t.exports=function(t,e,r){if(t instanceof e)return t;throw TypeError("Incorrect "+(r?r+" ":"")+"invocation")}},9670:(t,e,r)=>{var i=r(111);t.exports=function(t){if(i(t))return t;throw TypeError(String(t)+" is not an object")}},1318:(t,e,r)=>{var i=r(5656),n=r(7466),a=r(1400),s=function(t){return function(e,r,s){var o,h=i(e),u=n(h.length),l=a(s,u);if(t&&r!=r){for(;u>l;)if((o=h[l++])!=o)return!0}else for(;u>l;l++)if((t||l in h)&&h[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},9341:(t,e,r)=>{"use strict";var i=r(7293);t.exports=function(t,e){var r=[][t];return!!r&&i((function(){r.call(null,e||function(){throw 1},1)}))}},3671:(t,e,r)=>{var i=r(9662),n=r(7908),a=r(8361),s=r(7466),o=function(t){return function(e,r,o,h){i(r);var u=n(e),l=a(u),c=s(u.length),g=t?c-1:0,f=t?-1:1;if(o<2)for(;;){if(g in l){h=l[g],g+=f;break}if(g+=f,t?g<0:c<=g)throw TypeError("Reduce of empty array with no initial value")}for(;t?g>=0:c>g;g+=f)g in l&&(h=r(h,l[g],g,u));return h}};t.exports={left:o(!1),right:o(!0)}},7072:(t,e,r)=>{var i=r(5112)("iterator"),n=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){n=!0}};s[i]=function(){return this},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!n)return!1;var r=!1;try{var a={};a[i]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,r)=>{var i=r(1694),n=r(614),a=r(4326),s=r(5112)("toStringTag"),o="Arguments"==a(function(){return arguments}());t.exports=i?a:function(t){var e,r,i;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),s))?r:o?a(e):"Object"==(i=a(e))&&n(e.callee)?"Arguments":i}},9920:(t,e,r)=>{var i=r(6656),n=r(3887),a=r(1236),s=r(3070);t.exports=function(t,e){for(var r=n(e),o=s.f,h=a.f,u=0;u<r.length;u++){var l=r[u];i(t,l)||o(t,l,h(e,l))}}},4964:(t,e,r)=>{var i=r(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[i]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,r)=>{var i=r(7293);t.exports=!i((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4994:(t,e,r)=>{"use strict";var i=r(3383).IteratorPrototype,n=r(30),a=r(9114),s=r(8003),o=r(7497),h=function(){return this};t.exports=function(t,e,r){var u=e+" Iterator";return t.prototype=n(i,{next:a(1,r)}),s(t,u,!1,!0),o[u]=h,t}},8880:(t,e,r)=>{var i=r(9781),n=r(3070),a=r(9114);t.exports=i?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},654:(t,e,r)=>{"use strict";var i=r(2109),n=r(1913),a=r(6530),s=r(614),o=r(4994),h=r(9518),u=r(7674),l=r(8003),c=r(8880),g=r(1320),f=r(5112),p=r(7497),d=r(3383),v=a.PROPER,y=a.CONFIGURABLE,m=d.IteratorPrototype,x=d.BUGGY_SAFARI_ITERATORS,b=f("iterator"),S="keys",w="values",T="entries",A=function(){return this};t.exports=function(t,e,r,a,f,d,O){o(r,e,a);var P,E,C,M=function(t){if(t===f&&k)return k;if(!x&&t in V)return V[t];switch(t){case S:case w:case T:return function(){return new r(this,t)}}return function(){return new r(this)}},N=e+" Iterator",_=!1,V=t.prototype,R=V[b]||V["@@iterator"]||f&&V[f],k=!x&&R||M(f),I="Array"==e&&V.entries||R;if(I&&(P=h(I.call(new t)))!==Object.prototype&&P.next&&(n||h(P)===m||(u?u(P,m):s(P[b])||g(P,b,A)),l(P,N,!0,!0),n&&(p[N]=A)),v&&f==w&&R&&R.name!==w&&(!n&&y?c(V,"name",w):(_=!0,k=function(){return R.call(this)})),f)if(E={values:M(w),keys:d?k:M(S),entries:M(T)},O)for(C in E)(x||_||!(C in V))&&g(V,C,E[C]);else i({target:e,proto:!0,forced:x||_},E);return n&&!O||V[b]===k||g(V,b,k,{name:f}),p[e]=k,E}},9781:(t,e,r)=>{var i=r(7293);t.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,r)=>{var i=r(7854),n=r(111),a=i.document,s=n(a)&&n(a.createElement);t.exports=function(t){return s?a.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(t,e,r)=>{var i=r(317)("span").classList,n=i&&i.constructor&&i.constructor.prototype;t.exports=n===Object.prototype?void 0:n},7871:t=>{t.exports="object"==typeof window},1528:(t,e,r)=>{var i=r(8113),n=r(7854);t.exports=/ipad|iphone|ipod/i.test(i)&&void 0!==n.Pebble},6833:(t,e,r)=>{var i=r(8113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(i)},5268:(t,e,r)=>{var i=r(4326),n=r(7854);t.exports="process"==i(n.process)},1036:(t,e,r)=>{var i=r(8113);t.exports=/web0s(?!.*chrome)/i.test(i)},8113:(t,e,r)=>{var i=r(5005);t.exports=i("navigator","userAgent")||""},7392:(t,e,r)=>{var i,n,a=r(7854),s=r(8113),o=a.process,h=a.Deno,u=o&&o.versions||h&&h.version,l=u&&u.v8;l?n=(i=l.split("."))[0]<4?1:i[0]+i[1]:s&&(!(i=s.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=s.match(/Chrome\/(\d+)/))&&(n=i[1]),t.exports=n&&+n},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,r)=>{var i=r(7854),n=r(1236).f,a=r(8880),s=r(1320),o=r(3505),h=r(9920),u=r(4705);t.exports=function(t,e){var r,l,c,g,f,p=t.target,d=t.global,v=t.stat;if(r=d?i:v?i[p]||o(p,{}):(i[p]||{}).prototype)for(l in e){if(g=e[l],c=t.noTargetGet?(f=n(r,l))&&f.value:r[l],!u(d?l:p+(v?".":"#")+l,t.forced)&&void 0!==c){if(typeof g==typeof c)continue;h(g,c)}(t.sham||c&&c.sham)&&a(g,"sham",!0),s(r,l,g,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,r)=>{"use strict";r(4916);var i=r(1320),n=r(2261),a=r(7293),s=r(5112),o=r(8880),h=s("species"),u=RegExp.prototype;t.exports=function(t,e,r,l){var c=s(t),g=!a((function(){var e={};return e[c]=function(){return 7},7!=""[t](e)})),f=g&&!a((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[h]=function(){return r},r.flags="",r[c]=/./[c]),r.exec=function(){return e=!0,null},r[c](""),!e}));if(!g||!f||r){var p=/./[c],d=e(c,""[t],(function(t,e,r,i,a){var s=e.exec;return s===n||s===u.exec?g&&!a?{done:!0,value:p.call(e,r,i)}:{done:!0,value:t.call(r,e,i)}:{done:!1}}));i(String.prototype,t,d[0]),i(u,c,d[1])}l&&o(u[c],"sham",!0)}},9974:(t,e,r)=>{var i=r(9662);t.exports=function(t,e,r){if(i(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,i){return t.call(e,r,i)};case 3:return function(r,i,n){return t.call(e,r,i,n)}}return function(){return t.apply(e,arguments)}}},6530:(t,e,r)=>{var i=r(9781),n=r(6656),a=Function.prototype,s=i&&Object.getOwnPropertyDescriptor,o=n(a,"name"),h=o&&"something"===function(){}.name,u=o&&(!i||i&&s(a,"name").configurable);t.exports={EXISTS:o,PROPER:h,CONFIGURABLE:u}},5005:(t,e,r)=>{var i=r(7854),n=r(614),a=function(t){return n(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?a(i[t]):i[t]&&i[t][e]}},1246:(t,e,r)=>{var i=r(648),n=r(8173),a=r(7497),s=r(5112)("iterator");t.exports=function(t){if(null!=t)return n(t,s)||n(t,"@@iterator")||a[i(t)]}},8554:(t,e,r)=>{var i=r(9662),n=r(9670),a=r(1246);t.exports=function(t,e){var r=arguments.length<2?a(t):e;if(i(r))return n(r.call(t));throw TypeError(String(t)+" is not iterable")}},8173:(t,e,r)=>{var i=r(9662);t.exports=function(t,e){var r=t[e];return null==r?void 0:i(r)}},647:(t,e,r)=>{var i=r(7908),n=Math.floor,a="".replace,s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,o=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,h,u,l){var c=r+t.length,g=h.length,f=o;return void 0!==u&&(u=i(u),f=s),a.call(l,f,(function(i,a){var s;switch(a.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(c);case"<":s=u[a.slice(1,-1)];break;default:var o=+a;if(0===o)return i;if(o>g){var l=n(o/10);return 0===l?i:l<=g?void 0===h[l-1]?a.charAt(1):h[l-1]+a.charAt(1):i}s=h[o-1]}return void 0===s?"":s}))}},7854:(t,e,r)=>{var i=function(t){return t&&t.Math==Math&&t};t.exports=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:(t,e,r)=>{var i=r(7908),n={}.hasOwnProperty;t.exports=Object.hasOwn||function(t,e){return n.call(i(t),e)}},3501:t=>{t.exports={}},842:(t,e,r)=>{var i=r(7854);t.exports=function(t,e){var r=i.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},490:(t,e,r)=>{var i=r(5005);t.exports=i("document","documentElement")},4664:(t,e,r)=>{var i=r(9781),n=r(7293),a=r(317);t.exports=!i&&!n((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},8361:(t,e,r)=>{var i=r(7293),n=r(4326),a="".split;t.exports=i((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==n(t)?a.call(t,""):Object(t)}:Object},2788:(t,e,r)=>{var i=r(614),n=r(5465),a=Function.toString;i(n.inspectSource)||(n.inspectSource=function(t){return a.call(t)}),t.exports=n.inspectSource},9909:(t,e,r)=>{var i,n,a,s=r(8536),o=r(7854),h=r(111),u=r(8880),l=r(6656),c=r(5465),g=r(6200),f=r(3501),p="Object already initialized",d=o.WeakMap;if(s||c.state){var v=c.state||(c.state=new d),y=v.get,m=v.has,x=v.set;i=function(t,e){if(m.call(v,t))throw new TypeError(p);return e.facade=t,x.call(v,t,e),e},n=function(t){return y.call(v,t)||{}},a=function(t){return m.call(v,t)}}else{var b=g("state");f[b]=!0,i=function(t,e){if(l(t,b))throw new TypeError(p);return e.facade=t,u(t,b,e),e},n=function(t){return l(t,b)?t[b]:{}},a=function(t){return l(t,b)}}t.exports={set:i,get:n,has:a,enforce:function(t){return a(t)?n(t):i(t,{})},getterFor:function(t){return function(e){var r;if(!h(e)||(r=n(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},7659:(t,e,r)=>{var i=r(5112),n=r(7497),a=i("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||s[a]===t)}},1349:(t,e,r)=>{var i=r(4326);t.exports=Array.isArray||function(t){return"Array"==i(t)}},614:t=>{t.exports=function(t){return"function"==typeof t}},4411:(t,e,r)=>{var i=r(7293),n=r(614),a=r(648),s=r(5005),o=r(2788),h=[],u=s("Reflect","construct"),l=/^\s*(?:class|function)\b/,c=l.exec,g=!l.exec((function(){})),f=function(t){if(!n(t))return!1;try{return u(Object,h,t),!0}catch(t){return!1}};t.exports=!u||i((function(){var t;return f(f.call)||!f(Object)||!f((function(){t=!0}))||t}))?function(t){if(!n(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return g||!!c.call(l,o(t))}:f},4705:(t,e,r)=>{var i=r(7293),n=r(614),a=/#|\.prototype\./,s=function(t,e){var r=h[o(t)];return r==l||r!=u&&(n(e)?i(e):!!e)},o=s.normalize=function(t){return String(t).replace(a,".").toLowerCase()},h=s.data={},u=s.NATIVE="N",l=s.POLYFILL="P";t.exports=s},111:(t,e,r)=>{var i=r(614);t.exports=function(t){return"object"==typeof t?null!==t:i(t)}},1913:t=>{t.exports=!1},7850:(t,e,r)=>{var i=r(111),n=r(4326),a=r(5112)("match");t.exports=function(t){var e;return i(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==n(t))}},2190:(t,e,r)=>{var i=r(614),n=r(5005),a=r(3307);t.exports=a?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return i(e)&&Object(t)instanceof e}},408:(t,e,r)=>{var i=r(9670),n=r(7659),a=r(7466),s=r(9974),o=r(8554),h=r(1246),u=r(9212),l=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,r){var c,g,f,p,d,v,y,m=r&&r.that,x=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),S=!(!r||!r.INTERRUPTED),w=s(e,m,1+x+S),T=function(t){return c&&u(c,"normal",t),new l(!0,t)},A=function(t){return x?(i(t),S?w(t[0],t[1],T):w(t[0],t[1])):S?w(t,T):w(t)};if(b)c=t;else{if(!(g=h(t)))throw TypeError(String(t)+" is not iterable");if(n(g)){for(f=0,p=a(t.length);p>f;f++)if((d=A(t[f]))&&d instanceof l)return d;return new l(!1)}c=o(t,g)}for(v=c.next;!(y=v.call(c)).done;){try{d=A(y.value)}catch(t){u(c,"throw",t)}if("object"==typeof d&&d&&d instanceof l)return d}return new l(!1)}},9212:(t,e,r)=>{var i=r(9670),n=r(8173);t.exports=function(t,e,r){var a,s;i(t);try{if(!(a=n(t,"return"))){if("throw"===e)throw r;return r}a=a.call(t)}catch(t){s=!0,a=t}if("throw"===e)throw r;if(s)throw a;return i(a),r}},3383:(t,e,r)=>{"use strict";var i,n,a,s=r(7293),o=r(614),h=r(30),u=r(9518),l=r(1320),c=r(5112),g=r(1913),f=c("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(n=u(u(a)))!==Object.prototype&&(i=n):p=!0),null==i||s((function(){var t={};return i[f].call(t)!==t}))?i={}:g&&(i=h(i)),o(i[f])||l(i,f,(function(){return this})),t.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:p}},7497:t=>{t.exports={}},5948:(t,e,r)=>{var i,n,a,s,o,h,u,l,c=r(7854),g=r(1236).f,f=r(261).set,p=r(6833),d=r(1528),v=r(1036),y=r(5268),m=c.MutationObserver||c.WebKitMutationObserver,x=c.document,b=c.process,S=c.Promise,w=g(c,"queueMicrotask"),T=w&&w.value;T||(i=function(){var t,e;for(y&&(t=b.domain)&&t.exit();n;){e=n.fn,n=n.next;try{e()}catch(t){throw n?s():a=void 0,t}}a=void 0,t&&t.enter()},p||y||v||!m||!x?!d&&S&&S.resolve?((u=S.resolve(void 0)).constructor=S,l=u.then,s=function(){l.call(u,i)}):s=y?function(){b.nextTick(i)}:function(){f.call(c,i)}:(o=!0,h=x.createTextNode(""),new m(i).observe(h,{characterData:!0}),s=function(){h.data=o=!o})),t.exports=T||function(t){var e={fn:t,next:void 0};a&&(a.next=e),n||(n=e,s()),a=e}},3366:(t,e,r)=>{var i=r(7854);t.exports=i.Promise},133:(t,e,r)=>{var i=r(7392),n=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},8536:(t,e,r)=>{var i=r(7854),n=r(614),a=r(2788),s=i.WeakMap;t.exports=n(s)&&/native code/.test(a(s))},8523:(t,e,r)=>{"use strict";var i=r(9662),n=function(t){var e,r;this.promise=new t((function(t,i){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=i})),this.resolve=i(e),this.reject=i(r)};t.exports.f=function(t){return new n(t)}},3929:(t,e,r)=>{var i=r(7850);t.exports=function(t){if(i(t))throw TypeError("The method doesn't accept regular expressions");return t}},30:(t,e,r)=>{var i,n=r(9670),a=r(6048),s=r(748),o=r(3501),h=r(490),u=r(317),l=r(6200)("IE_PROTO"),c=function(){},g=function(t){return"<script>"+t+"<\/script>"},f=function(t){t.write(g("")),t.close();var e=t.parentWindow.Object;return t=null,e},p=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,e;p="undefined"!=typeof document?document.domain&&i?f(i):((e=u("iframe")).style.display="none",h.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(g("document.F=Object")),t.close(),t.F):f(i);for(var r=s.length;r--;)delete p.prototype[s[r]];return p()};o[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(c.prototype=n(t),r=new c,c.prototype=null,r[l]=t):r=p(),void 0===e?r:a(r,e)}},6048:(t,e,r)=>{var i=r(9781),n=r(3070),a=r(9670),s=r(1956);t.exports=i?Object.defineProperties:function(t,e){a(t);for(var r,i=s(e),o=i.length,h=0;o>h;)n.f(t,r=i[h++],e[r]);return t}},3070:(t,e,r)=>{var i=r(9781),n=r(4664),a=r(9670),s=r(4948),o=Object.defineProperty;e.f=i?o:function(t,e,r){if(a(t),e=s(e),a(r),n)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},1236:(t,e,r)=>{var i=r(9781),n=r(5296),a=r(9114),s=r(5656),o=r(4948),h=r(6656),u=r(4664),l=Object.getOwnPropertyDescriptor;e.f=i?l:function(t,e){if(t=s(t),e=o(e),u)try{return l(t,e)}catch(t){}if(h(t,e))return a(!n.f.call(t,e),t[e])}},8006:(t,e,r)=>{var i=r(6324),n=r(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,n)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,r)=>{var i=r(6656),n=r(614),a=r(7908),s=r(6200),o=r(8544),h=s("IE_PROTO"),u=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){var e=a(t);if(i(e,h))return e[h];var r=e.constructor;return n(r)&&e instanceof r?r.prototype:e instanceof Object?u:null}},6324:(t,e,r)=>{var i=r(6656),n=r(5656),a=r(1318).indexOf,s=r(3501);t.exports=function(t,e){var r,o=n(t),h=0,u=[];for(r in o)!i(s,r)&&i(o,r)&&u.push(r);for(;e.length>h;)i(o,r=e[h++])&&(~a(u,r)||u.push(r));return u}},1956:(t,e,r)=>{var i=r(6324),n=r(748);t.exports=Object.keys||function(t){return i(t,n)}},5296:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,n=i&&!r.call({1:2},1);e.f=n?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},7674:(t,e,r)=>{var i=r(9670),n=r(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,a){return i(r),n(a),e?t.call(r,a):r.__proto__=a,r}}():void 0)},2140:(t,e,r)=>{var i=r(614),n=r(111);t.exports=function(t,e){var r,a;if("string"===e&&i(r=t.toString)&&!n(a=r.call(t)))return a;if(i(r=t.valueOf)&&!n(a=r.call(t)))return a;if("string"!==e&&i(r=t.toString)&&!n(a=r.call(t)))return a;throw TypeError("Can't convert object to primitive value")}},3887:(t,e,r)=>{var i=r(5005),n=r(8006),a=r(5181),s=r(9670);t.exports=i("Reflect","ownKeys")||function(t){var e=n.f(s(t)),r=a.f;return r?e.concat(r(t)):e}},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,r)=>{var i=r(9670),n=r(111),a=r(8523);t.exports=function(t,e){if(i(t),n(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},2248:(t,e,r)=>{var i=r(1320);t.exports=function(t,e,r){for(var n in e)i(t,n,e[n],r);return t}},1320:(t,e,r)=>{var i=r(7854),n=r(614),a=r(6656),s=r(8880),o=r(3505),h=r(2788),u=r(9909),l=r(6530).CONFIGURABLE,c=u.get,g=u.enforce,f=String(String).split("String");(t.exports=function(t,e,r,h){var u,c=!!h&&!!h.unsafe,p=!!h&&!!h.enumerable,d=!!h&&!!h.noTargetGet,v=h&&void 0!==h.name?h.name:e;n(r)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||l&&r.name!==v)&&s(r,"name",v),(u=g(r)).source||(u.source=f.join("string"==typeof v?v:""))),t!==i?(c?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=r:s(t,e,r)):p?t[e]=r:o(e,r)})(Function.prototype,"toString",(function(){return n(this)&&c(this).source||h(this)}))},7651:(t,e,r)=>{var i=r(9670),n=r(614),a=r(4326),s=r(2261);t.exports=function(t,e){var r=t.exec;if(n(r)){var o=r.call(t,e);return null!==o&&i(o),o}if("RegExp"===a(t))return s.call(t,e);throw TypeError("RegExp#exec called on incompatible receiver")}},2261:(t,e,r)=>{"use strict";var i,n,a=r(1340),s=r(7066),o=r(2999),h=r(2309),u=r(30),l=r(9909).get,c=r(9441),g=r(7168),f=RegExp.prototype.exec,p=h("native-string-replace",String.prototype.replace),d=f,v=(i=/a/,n=/b*/g,f.call(i,"a"),f.call(n,"a"),0!==i.lastIndex||0!==n.lastIndex),y=o.UNSUPPORTED_Y||o.BROKEN_CARET,m=void 0!==/()??/.exec("")[1];(v||m||y||c||g)&&(d=function(t){var e,r,i,n,o,h,c,g=this,x=l(g),b=a(t),S=x.raw;if(S)return S.lastIndex=g.lastIndex,e=d.call(S,b),g.lastIndex=S.lastIndex,e;var w=x.groups,T=y&&g.sticky,A=s.call(g),O=g.source,P=0,E=b;if(T&&(-1===(A=A.replace("y","")).indexOf("g")&&(A+="g"),E=b.slice(g.lastIndex),g.lastIndex>0&&(!g.multiline||g.multiline&&"\n"!==b.charAt(g.lastIndex-1))&&(O="(?: "+O+")",E=" "+E,P++),r=new RegExp("^(?:"+O+")",A)),m&&(r=new RegExp("^"+O+"$(?!\\s)",A)),v&&(i=g.lastIndex),n=f.call(T?r:g,E),T?n?(n.input=n.input.slice(P),n[0]=n[0].slice(P),n.index=g.lastIndex,g.lastIndex+=n[0].length):g.lastIndex=0:v&&n&&(g.lastIndex=g.global?n.index+n[0].length:i),m&&n&&n.length>1&&p.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n&&w)for(n.groups=h=u(null),o=0;o<w.length;o++)h[(c=w[o])[0]]=n[c[1]];return n}),t.exports=d},7066:(t,e,r)=>{"use strict";var i=r(9670);t.exports=function(){var t=i(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,r)=>{var i=r(7293),n=r(7854).RegExp;e.UNSUPPORTED_Y=i((function(){var t=n("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=i((function(){var t=n("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},9441:(t,e,r)=>{var i=r(7293),n=r(7854).RegExp;t.exports=i((function(){var t=n(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},7168:(t,e,r)=>{var i=r(7293),n=r(7854).RegExp;t.exports=i((function(){var t=n("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:(t,e,r)=>{var i=r(7854);t.exports=function(t,e){try{Object.defineProperty(i,t,{value:e,configurable:!0,writable:!0})}catch(r){i[t]=e}return e}},6340:(t,e,r)=>{"use strict";var i=r(5005),n=r(3070),a=r(5112),s=r(9781),o=a("species");t.exports=function(t){var e=i(t),r=n.f;s&&e&&!e[o]&&r(e,o,{configurable:!0,get:function(){return this}})}},8003:(t,e,r)=>{var i=r(3070).f,n=r(6656),a=r(5112)("toStringTag");t.exports=function(t,e,r){t&&!n(t=r?t:t.prototype,a)&&i(t,a,{configurable:!0,value:e})}},6200:(t,e,r)=>{var i=r(2309),n=r(9711),a=i("keys");t.exports=function(t){return a[t]||(a[t]=n(t))}},5465:(t,e,r)=>{var i=r(7854),n=r(3505),a="__core-js_shared__",s=i[a]||n(a,{});t.exports=s},2309:(t,e,r)=>{var i=r(1913),n=r(5465);(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.18.0",mode:i?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,r)=>{var i=r(9670),n=r(9483),a=r(5112)("species");t.exports=function(t,e){var r,s=i(t).constructor;return void 0===s||null==(r=i(s)[a])?e:n(r)}},8710:(t,e,r)=>{var i=r(9958),n=r(1340),a=r(4488),s=function(t){return function(e,r){var s,o,h=n(a(e)),u=i(r),l=h.length;return u<0||u>=l?t?"":void 0:(s=h.charCodeAt(u))<55296||s>56319||u+1===l||(o=h.charCodeAt(u+1))<56320||o>57343?t?h.charAt(u):s:t?h.slice(u,u+2):o-56320+(s-55296<<10)+65536}};t.exports={codeAt:s(!1),charAt:s(!0)}},6091:(t,e,r)=>{var i=r(6530).PROPER,n=r(7293),a=r(1361);t.exports=function(t){return n((function(){return!!a[t]()||"​᠎"!=="​᠎"[t]()||i&&a[t].name!==t}))}},3111:(t,e,r)=>{var i=r(4488),n=r(1340),a="["+r(1361)+"]",s=RegExp("^"+a+a+"*"),o=RegExp(a+a+"*$"),h=function(t){return function(e){var r=n(i(e));return 1&t&&(r=r.replace(s,"")),2&t&&(r=r.replace(o,"")),r}};t.exports={start:h(1),end:h(2),trim:h(3)}},261:(t,e,r)=>{var i,n,a,s,o=r(7854),h=r(614),u=r(7293),l=r(9974),c=r(490),g=r(317),f=r(6833),p=r(5268),d=o.setImmediate,v=o.clearImmediate,y=o.process,m=o.MessageChannel,x=o.Dispatch,b=0,S={};try{i=o.location}catch(t){}var w=function(t){if(S.hasOwnProperty(t)){var e=S[t];delete S[t],e()}},T=function(t){return function(){w(t)}},A=function(t){w(t.data)},O=function(t){o.postMessage(String(t),i.protocol+"//"+i.host)};d&&v||(d=function(t){for(var e=[],r=arguments.length,i=1;r>i;)e.push(arguments[i++]);return S[++b]=function(){(h(t)?t:Function(t)).apply(void 0,e)},n(b),b},v=function(t){delete S[t]},p?n=function(t){y.nextTick(T(t))}:x&&x.now?n=function(t){x.now(T(t))}:m&&!f?(s=(a=new m).port2,a.port1.onmessage=A,n=l(s.postMessage,s,1)):o.addEventListener&&h(o.postMessage)&&!o.importScripts&&i&&"file:"!==i.protocol&&!u(O)?(n=O,o.addEventListener("message",A,!1)):n="onreadystatechange"in g("script")?function(t){c.appendChild(g("script")).onreadystatechange=function(){c.removeChild(this),w(t)}}:function(t){setTimeout(T(t),0)}),t.exports={set:d,clear:v}},1400:(t,e,r)=>{var i=r(9958),n=Math.max,a=Math.min;t.exports=function(t,e){var r=i(t);return r<0?n(r+e,0):a(r,e)}},5656:(t,e,r)=>{var i=r(8361),n=r(4488);t.exports=function(t){return i(n(t))}},9958:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},7466:(t,e,r)=>{var i=r(9958),n=Math.min;t.exports=function(t){return t>0?n(i(t),9007199254740991):0}},7908:(t,e,r)=>{var i=r(4488);t.exports=function(t){return Object(i(t))}},7593:(t,e,r)=>{var i=r(111),n=r(2190),a=r(8173),s=r(2140),o=r(5112)("toPrimitive");t.exports=function(t,e){if(!i(t)||n(t))return t;var r,h=a(t,o);if(h){if(void 0===e&&(e="default"),r=h.call(t,e),!i(r)||n(r))return r;throw TypeError("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(t,e)}},4948:(t,e,r)=>{var i=r(7593),n=r(2190);t.exports=function(t){var e=i(t,"string");return n(e)?e:String(e)}},1694:(t,e,r)=>{var i={};i[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(i)},1340:(t,e,r)=>{var i=r(648);t.exports=function(t){if("Symbol"===i(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},6330:t=>{t.exports=function(t){try{return String(t)}catch(t){return"Object"}}},9711:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},3307:(t,e,r)=>{var i=r(133);t.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:(t,e,r)=>{var i=r(7854),n=r(2309),a=r(6656),s=r(9711),o=r(133),h=r(3307),u=n("wks"),l=i.Symbol,c=h?l:l&&l.withoutSetter||s;t.exports=function(t){return a(u,t)&&(o||"string"==typeof u[t])||(o&&a(l,t)?u[t]=l[t]:u[t]=c("Symbol."+t)),u[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2772:(t,e,r)=>{"use strict";var i=r(2109),n=r(1318).indexOf,a=r(9341),s=[].indexOf,o=!!s&&1/[1].indexOf(1,-0)<0,h=a("indexOf");i({target:"Array",proto:!0,forced:o||!h},{indexOf:function(t){return o?s.apply(this,arguments)||0:n(this,t,arguments.length>1?arguments[1]:void 0)}})},6992:(t,e,r)=>{"use strict";var i=r(5656),n=r(1223),a=r(7497),s=r(9909),o=r(654),h="Array Iterator",u=s.set,l=s.getterFor(h);t.exports=o(Array,"Array",(function(t,e){u(this,{type:h,target:i(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,r=t.kind,i=t.index++;return!e||i>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:i,done:!1}:"values"==r?{value:e[i],done:!1}:{value:[i,e[i]],done:!1}}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},5827:(t,e,r)=>{"use strict";var i=r(2109),n=r(3671).left,a=r(9341),s=r(7392),o=r(5268);i({target:"Array",proto:!0,forced:!a("reduce")||!o&&s>79&&s<83},{reduce:function(t){return n(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:(t,e,r)=>{"use strict";var i=r(2109),n=r(1349),a=[].reverse,s=[1,2];i({target:"Array",proto:!0,forced:String(s)===String(s.reverse())},{reverse:function(){return n(this)&&(this.length=this.length),a.call(this)}})},8674:(t,e,r)=>{"use strict";var i,n,a,s,o=r(2109),h=r(1913),u=r(7854),l=r(5005),c=r(3366),g=r(1320),f=r(2248),p=r(7674),d=r(8003),v=r(6340),y=r(9662),m=r(614),x=r(111),b=r(5787),S=r(2788),w=r(408),T=r(7072),A=r(6707),O=r(261).set,P=r(5948),E=r(9478),C=r(842),M=r(8523),N=r(2534),_=r(9909),V=r(4705),R=r(5112),k=r(7871),I=r(5268),L=r(7392),D=R("species"),B="Promise",j=_.get,z=_.set,F=_.getterFor(B),U=c&&c.prototype,H=c,X=U,Y=u.TypeError,q=u.document,W=u.process,G=M.f,Q=G,$=!!(q&&q.createEvent&&u.dispatchEvent),Z=m(u.PromiseRejectionEvent),K="unhandledrejection",J=!1,tt=V(B,(function(){var t=S(H),e=t!==String(H);if(!e&&66===L)return!0;if(h&&!X.finally)return!0;if(L>=51&&/native code/.test(t))return!1;var r=new H((function(t){t(1)})),i=function(t){t((function(){}),(function(){}))};return(r.constructor={})[D]=i,!(J=r.then((function(){}))instanceof i)||!e&&k&&!Z})),et=tt||!T((function(t){H.all(t).catch((function(){}))})),rt=function(t){var e;return!(!x(t)||!m(e=t.then))&&e},it=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;P((function(){for(var i=t.value,n=1==t.state,a=0;r.length>a;){var s,o,h,u=r[a++],l=n?u.ok:u.fail,c=u.resolve,g=u.reject,f=u.domain;try{l?(n||(2===t.rejection&&ot(t),t.rejection=1),!0===l?s=i:(f&&f.enter(),s=l(i),f&&(f.exit(),h=!0)),s===u.promise?g(Y("Promise-chain cycle")):(o=rt(s))?o.call(s,c,g):c(s)):g(i)}catch(t){f&&!h&&f.exit(),g(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&at(t)}))}},nt=function(t,e,r){var i,n;$?((i=q.createEvent("Event")).promise=e,i.reason=r,i.initEvent(t,!1,!0),u.dispatchEvent(i)):i={promise:e,reason:r},!Z&&(n=u["on"+t])?n(i):t===K&&C("Unhandled promise rejection",r)},at=function(t){O.call(u,(function(){var e,r=t.facade,i=t.value;if(st(t)&&(e=N((function(){I?W.emit("unhandledRejection",i,r):nt(K,r,i)})),t.rejection=I||st(t)?2:1,e.error))throw e.value}))},st=function(t){return 1!==t.rejection&&!t.parent},ot=function(t){O.call(u,(function(){var e=t.facade;I?W.emit("rejectionHandled",e):nt("rejectionhandled",e,t.value)}))},ht=function(t,e,r){return function(i){t(e,i,r)}},ut=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,it(t,!0))},lt=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var i=rt(e);i?P((function(){var r={done:!1};try{i.call(e,ht(lt,r,t),ht(ut,r,t))}catch(e){ut(r,e,t)}})):(t.value=e,t.state=1,it(t,!1))}catch(e){ut({done:!1},e,t)}}};if(tt&&(X=(H=function(t){b(this,H,B),y(t),i.call(this);var e=j(this);try{t(ht(lt,e),ht(ut,e))}catch(t){ut(e,t)}}).prototype,(i=function(t){z(this,{type:B,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=f(X,{then:function(t,e){var r=F(this),i=G(A(this,H));return i.ok=!m(t)||t,i.fail=m(e)&&e,i.domain=I?W.domain:void 0,r.parent=!0,r.reactions.push(i),0!=r.state&&it(r,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),n=function(){var t=new i,e=j(t);this.promise=t,this.resolve=ht(lt,e),this.reject=ht(ut,e)},M.f=G=function(t){return t===H||t===a?new n(t):Q(t)},!h&&m(c)&&U!==Object.prototype)){s=U.then,J||(g(U,"then",(function(t,e){var r=this;return new H((function(t,e){s.call(r,t,e)})).then(t,e)}),{unsafe:!0}),g(U,"catch",X.catch,{unsafe:!0}));try{delete U.constructor}catch(t){}p&&p(U,X)}o({global:!0,wrap:!0,forced:tt},{Promise:H}),d(H,B,!1,!0),v(B),a=l(B),o({target:B,stat:!0,forced:tt},{reject:function(t){var e=G(this);return e.reject.call(void 0,t),e.promise}}),o({target:B,stat:!0,forced:h||tt},{resolve:function(t){return E(h&&this===a?H:this,t)}}),o({target:B,stat:!0,forced:et},{all:function(t){var e=this,r=G(e),i=r.resolve,n=r.reject,a=N((function(){var r=y(e.resolve),a=[],s=0,o=1;w(t,(function(t){var h=s++,u=!1;a.push(void 0),o++,r.call(e,t).then((function(t){u||(u=!0,a[h]=t,--o||i(a))}),n)})),--o||i(a)}));return a.error&&n(a.value),r.promise},race:function(t){var e=this,r=G(e),i=r.reject,n=N((function(){var n=y(e.resolve);w(t,(function(t){n.call(e,t).then(r.resolve,i)}))}));return n.error&&i(n.value),r.promise}})},4916:(t,e,r)=>{"use strict";var i=r(2109),n=r(2261);i({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n})},9714:(t,e,r)=>{"use strict";var i=r(6530).PROPER,n=r(1320),a=r(9670),s=r(1340),o=r(7293),h=r(7066),u="toString",l=RegExp.prototype,c=l.toString,g=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),f=i&&c.name!=u;(g||f)&&n(RegExp.prototype,u,(function(){var t=a(this),e=s(t.source),r=t.flags;return"/"+e+"/"+s(void 0===r&&t instanceof RegExp&&!("flags"in l)?h.call(t):r)}),{unsafe:!0})},7852:(t,e,r)=>{"use strict";var i,n=r(2109),a=r(1236).f,s=r(7466),o=r(1340),h=r(3929),u=r(4488),l=r(4964),c=r(1913),g="".endsWith,f=Math.min,p=l("endsWith");n({target:"String",proto:!0,forced:!(!c&&!p&&(i=a(String.prototype,"endsWith"),i&&!i.writable)||p)},{endsWith:function(t){var e=o(u(this));h(t);var r=arguments.length>1?arguments[1]:void 0,i=s(e.length),n=void 0===r?i:f(s(r),i),a=o(t);return g?g.call(e,a,n):e.slice(n-a.length,n)===a}})},2023:(t,e,r)=>{"use strict";var i=r(2109),n=r(3929),a=r(4488),s=r(1340);i({target:"String",proto:!0,forced:!r(4964)("includes")},{includes:function(t){return!!~s(a(this)).indexOf(s(n(t)),arguments.length>1?arguments[1]:void 0)}})},4723:(t,e,r)=>{"use strict";var i=r(7007),n=r(9670),a=r(7466),s=r(1340),o=r(4488),h=r(8173),u=r(1530),l=r(7651);i("match",(function(t,e,r){return[function(e){var r=o(this),i=null==e?void 0:h(e,t);return i?i.call(e,r):new RegExp(e)[t](s(r))},function(t){var i=n(this),o=s(t),h=r(e,i,o);if(h.done)return h.value;if(!i.global)return l(i,o);var c=i.unicode;i.lastIndex=0;for(var g,f=[],p=0;null!==(g=l(i,o));){var d=s(g[0]);f[p]=d,""===d&&(i.lastIndex=u(o,a(i.lastIndex),c)),p++}return 0===p?null:f}]}))},5306:(t,e,r)=>{"use strict";var i=r(7007),n=r(7293),a=r(9670),s=r(614),o=r(9958),h=r(7466),u=r(1340),l=r(4488),c=r(1530),g=r(8173),f=r(647),p=r(7651),d=r(5112)("replace"),v=Math.max,y=Math.min,m="$0"==="a".replace(/./,"$0"),x=!!/./[d]&&""===/./[d]("a","$0");i("replace",(function(t,e,r){var i=x?"$":"$0";return[function(t,r){var i=l(this),n=null==t?void 0:g(t,d);return n?n.call(t,i,r):e.call(u(i),t,r)},function(t,n){var l=a(this),g=u(t);if("string"==typeof n&&-1===n.indexOf(i)&&-1===n.indexOf("$<")){var d=r(e,l,g,n);if(d.done)return d.value}var m=s(n);m||(n=u(n));var x=l.global;if(x){var b=l.unicode;l.lastIndex=0}for(var S=[];;){var w=p(l,g);if(null===w)break;if(S.push(w),!x)break;""===u(w[0])&&(l.lastIndex=c(g,h(l.lastIndex),b))}for(var T,A="",O=0,P=0;P<S.length;P++){w=S[P];for(var E=u(w[0]),C=v(y(o(w.index),g.length),0),M=[],N=1;N<w.length;N++)M.push(void 0===(T=w[N])?T:String(T));var _=w.groups;if(m){var V=[E].concat(M,C,g);void 0!==_&&V.push(_);var R=u(n.apply(void 0,V))}else R=f(E,g,C,M,_,n);C>=O&&(A+=g.slice(O,C)+R,O=C+E.length)}return A+g.slice(O)}]}),!!n((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!m||x)},3123:(t,e,r)=>{"use strict";var i=r(7007),n=r(7850),a=r(9670),s=r(4488),o=r(6707),h=r(1530),u=r(7466),l=r(1340),c=r(8173),g=r(7651),f=r(2261),p=r(2999),d=r(7293),v=p.UNSUPPORTED_Y,y=[].push,m=Math.min,x=4294967295;i("split",(function(t,e,r){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var i=l(s(this)),a=void 0===r?x:r>>>0;if(0===a)return[];if(void 0===t)return[i];if(!n(t))return e.call(i,t,a);for(var o,h,u,c=[],g=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,d=new RegExp(t.source,g+"g");(o=f.call(d,i))&&!((h=d.lastIndex)>p&&(c.push(i.slice(p,o.index)),o.length>1&&o.index<i.length&&y.apply(c,o.slice(1)),u=o[0].length,p=h,c.length>=a));)d.lastIndex===o.index&&d.lastIndex++;return p===i.length?!u&&d.test("")||c.push(""):c.push(i.slice(p)),c.length>a?c.slice(0,a):c}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,r){var n=s(this),a=null==e?void 0:c(e,t);return a?a.call(e,n,r):i.call(l(n),e,r)},function(t,n){var s=a(this),c=l(t),f=r(i,s,c,n,i!==e);if(f.done)return f.value;var p=o(s,RegExp),d=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(v?"g":"y"),b=new p(v?"^(?:"+s.source+")":s,y),S=void 0===n?x:n>>>0;if(0===S)return[];if(0===c.length)return null===g(b,c)?[c]:[];for(var w=0,T=0,A=[];T<c.length;){b.lastIndex=v?0:T;var O,P=g(b,v?c.slice(T):c);if(null===P||(O=m(u(b.lastIndex+(v?T:0)),c.length))===w)T=h(c,T,d);else{if(A.push(c.slice(w,T)),A.length===S)return A;for(var E=1;E<=P.length-1;E++)if(A.push(P[E]),A.length===S)return A;T=w=O}}return A.push(c.slice(w)),A}]}),!!d((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),v)},3157:(t,e,r)=>{"use strict";var i,n=r(2109),a=r(1236).f,s=r(7466),o=r(1340),h=r(3929),u=r(4488),l=r(4964),c=r(1913),g="".startsWith,f=Math.min,p=l("startsWith");n({target:"String",proto:!0,forced:!(!c&&!p&&(i=a(String.prototype,"startsWith"),i&&!i.writable)||p)},{startsWith:function(t){var e=o(u(this));h(t);var r=s(f(arguments.length>1?arguments[1]:void 0,e.length)),i=o(t);return g?g.call(e,i,r):e.slice(r,r+i.length)===i}})},3210:(t,e,r)=>{"use strict";var i=r(2109),n=r(3111).trim;i({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return n(this)}})},3948:(t,e,r)=>{var i=r(7854),n=r(8324),a=r(8509),s=r(6992),o=r(8880),h=r(5112),u=h("iterator"),l=h("toStringTag"),c=s.values,g=function(t,e){if(t){if(t[u]!==c)try{o(t,u,c)}catch(e){t[u]=c}if(t[l]||o(t,l,e),n[e])for(var r in s)if(t[r]!==s[r])try{o(t,r,s[r])}catch(e){t[r]=s[r]}}};for(var f in n)g(i[f]&&i[f].prototype,f);g(a,"DOMTokenList")},75:function(t){(function(){var e,r,i,n,a,s;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(t.exports=function(){return(e()-a)/1e6},r=process.hrtime,n=(e=function(){var t;return 1e9*(t=r())[0]+t[1]})(),s=1e9*process.uptime(),a=n-s):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)},4087:(t,e,r)=>{for(var i=r(75),n="undefined"==typeof window?r.g:window,a=["moz","webkit"],s="AnimationFrame",o=n["request"+s],h=n["cancel"+s]||n["cancelRequest"+s],u=0;!o&&u<a.length;u++)o=n[a[u]+"Request"+s],h=n[a[u]+"Cancel"+s]||n[a[u]+"CancelRequest"+s];if(!o||!h){var l=0,c=0,g=[];o=function(t){if(0===g.length){var e=i(),r=Math.max(0,16.666666666666668-(e-l));l=r+e,setTimeout((function(){var t=g.slice(0);g.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(l)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return g.push({handle:++c,callback:t,cancelled:!1}),c},h=function(t){for(var e=0;e<g.length;e++)g[e].handle===t&&(g[e].cancelled=!0)}}t.exports=function(t){return o.call(n,t)},t.exports.cancel=function(){h.apply(n,arguments)},t.exports.polyfill=function(t){t||(t=n),t.requestAnimationFrame=o,t.cancelAnimationFrame=h}},6131:t=>{t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],i=0;i<r.length;i++){var n=r[i].re,a=r[i].process,s=n.exec(t);if(s){var o=a(s);this.r=o[0],this.g=o[1],this.b=o[2],o.length>3&&(this.alpha=o[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,i=0;i<r.length;i++)for(var n=r[i].example,a=0;a<n.length;a++)t[t.length]=n[a];for(var s in e)t[t.length]=s;var o=document.createElement("ul");for(o.setAttribute("id","rgbcolor-examples"),i=0;i<t.length;i++)try{var h=document.createElement("li"),u=new RGBColor(t[i]),l=document.createElement("div");l.style.cssText="margin: 3px; border: 1px solid black; background:"+u.toHex()+"; color:"+u.toHex(),l.appendChild(document.createTextNode("test"));var c=document.createTextNode(" "+t[i]+" -> "+u.toRGB()+" -> "+u.toHex());h.appendChild(l),h.appendChild(c),o.appendChild(h)}catch(t){}return o}}},2117:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AElement:()=>le,AnimateColorElement:()=>ne,AnimateElement:()=>ie,AnimateTransformElement:()=>ae,BoundingBox:()=>kt,CB1:()=>it,CB2:()=>nt,CB3:()=>at,CB4:()=>st,Canvg:()=>Fe,CircleElement:()=>Xt,ClipPathElement:()=>Ee,DefsElement:()=>Zt,DescElement:()=>ke,Document:()=>Be,Element:()=>Ct,EllipseElement:()=>Yt,FeColorMatrixElement:()=>Ae,FeCompositeElement:()=>_e,FeDropShadowElement:()=>Me,FeGaussianBlurElement:()=>Ve,FeMorphologyElement:()=>Ne,FilterElement:()=>Ce,Font:()=>Rt,FontElement:()=>se,FontFaceElement:()=>oe,GElement:()=>Kt,GlyphElement:()=>Bt,GradientElement:()=>Jt,ImageElement:()=>de,LineElement:()=>qt,LinearGradientElement:()=>te,MarkerElement:()=>$t,MaskElement:()=>Oe,Matrix:()=>Tt,MissingGlyphElement:()=>he,Mouse:()=>ft,PSEUDO_ZERO:()=>J,Parser:()=>xt,PathElement:()=>Dt,PathParser:()=>It,PatternElement:()=>Qt,Point:()=>gt,PolygonElement:()=>Gt,PolylineElement:()=>Wt,Property:()=>lt,QB1:()=>ot,QB2:()=>ht,QB3:()=>ut,RadialGradientElement:()=>ee,RectElement:()=>Ht,RenderedElement:()=>Lt,Rotate:()=>St,SVGElement:()=>Ut,SVGFontLoader:()=>ye,Scale:()=>wt,Screen:()=>vt,Skew:()=>At,SkewX:()=>Ot,SkewY:()=>Pt,StopElement:()=>re,StyleElement:()=>me,SymbolElement:()=>ve,TRefElement:()=>ue,TSpanElement:()=>zt,TextElement:()=>jt,TextPathElement:()=>fe,TitleElement:()=>Re,Transform:()=>Et,Translate:()=>bt,UnknownElement:()=>Mt,UseElement:()=>xe,ViewPort:()=>ct,compressSpaces:()=>L,default:()=>Ue,getSelectorSpecificity:()=>K,normalizeAttributeName:()=>F,normalizeColor:()=>H,parseExternalUrl:()=>U,presets:()=>I,toNumbers:()=>j,trimLeft:()=>D,trimRight:()=>B,vectorMagnitude:()=>tt,vectorsAngle:()=>rt,vectorsRatio:()=>et}),r(8674);var i=r(2702);function n(t,e,r,n,a,s,o){try{var h=t[s](o),u=h.value}catch(t){return void r(t)}h.done?e(u):i.resolve(u).then(n,a)}function a(t){return function(){var e=this,r=arguments;return new i((function(i,a){var s=t.apply(e,r);function o(t){n(s,i,a,o,h,"next",t)}function h(t){n(s,i,a,o,h,"throw",t)}o(void 0)}))}}function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}r(4723),r(5306),r(3157),r(6992),r(3948),r(5827),r(7852),r(3123);var o=r(4087),h=(r(3210),r(6131)),u=(r(2023),r(2772),r(5069),function(t,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)});function l(t,e){function r(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function c(t,e){var r=t[0],i=t[1];return[r*Math.cos(e)-i*Math.sin(e),r*Math.sin(e)+i*Math.cos(e)]}function g(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var f=Math.PI;function p(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var i=t.rX,n=t.rY,a=t.x,s=t.y;i=Math.abs(t.rX),n=Math.abs(t.rY);var o=c([(e-a)/2,(r-s)/2],-t.xRot/180*f),h=o[0],u=o[1],l=Math.pow(h,2)/Math.pow(i,2)+Math.pow(u,2)/Math.pow(n,2);1<l&&(i*=Math.sqrt(l),n*=Math.sqrt(l)),t.rX=i,t.rY=n;var g=Math.pow(i,2)*Math.pow(u,2)+Math.pow(n,2)*Math.pow(h,2),p=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(i,2)*Math.pow(n,2)-g)/g)),d=i*u/n*p,v=-n*h/i*p,y=c([d,v],t.xRot/180*f);t.cX=y[0]+(e+a)/2,t.cY=y[1]+(r+s)/2,t.phi1=Math.atan2((u-v)/n,(h-d)/i),t.phi2=Math.atan2((-u-v)/n,(-h-d)/i),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*f),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*f),t.phi1*=180/f,t.phi2*=180/f}function d(t,e,r){g(t,e,r);var i=t*t+e*e-r*r;if(0>i)return[];if(0===i)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var n=Math.sqrt(i);return[[(t*r+e*n)/(t*t+e*e),(e*r-t*n)/(t*t+e*e)],[(t*r-e*n)/(t*t+e*e),(e*r+t*n)/(t*t+e*e)]]}var v,y=Math.PI/180;function m(t,e,r){return(1-r)*t+r*e}function x(t,e,r,i){return t+Math.cos(i/180*f)*e+Math.sin(i/180*f)*r}function b(t,e,r,i){var n=e-t,a=r-e,s=3*n+3*(i-r)-6*a,o=6*(a-n),h=3*n;return Math.abs(s)<1e-6?[-h/o]:function(t,e,r){void 0===r&&(r=1e-6);var i=t*t/4-e;if(i<-r)return[];if(i<=r)return[-t/2];var n=Math.sqrt(i);return[-t/2-n,-t/2+n]}(o/s,h/s,1e-6)}function S(t,e,r,i,n){var a=1-n;return t*(a*a*a)+e*(3*a*a*n)+r*(3*a*n*n)+i*(n*n*n)}!function(t){function e(){return n((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,i=NaN;return n((function(n,a,s){return n.type&E.SMOOTH_CURVE_TO&&(n.type=E.CURVE_TO,t=isNaN(t)?a:t,e=isNaN(e)?s:e,n.x1=n.relative?a-t:2*a-t,n.y1=n.relative?s-e:2*s-e),n.type&E.CURVE_TO?(t=n.relative?a+n.x2:n.x2,e=n.relative?s+n.y2:n.y2):(t=NaN,e=NaN),n.type&E.SMOOTH_QUAD_TO&&(n.type=E.QUAD_TO,r=isNaN(r)?a:r,i=isNaN(i)?s:i,n.x1=n.relative?a-r:2*a-r,n.y1=n.relative?s-i:2*s-i),n.type&E.QUAD_TO?(r=n.relative?a+n.x1:n.x1,i=n.relative?s+n.y1:n.y1):(r=NaN,i=NaN),n}))}function i(){var t=NaN,e=NaN;return n((function(r,i,n){if(r.type&E.SMOOTH_QUAD_TO&&(r.type=E.QUAD_TO,t=isNaN(t)?i:t,e=isNaN(e)?n:e,r.x1=r.relative?i-t:2*i-t,r.y1=r.relative?n-e:2*n-e),r.type&E.QUAD_TO){t=r.relative?i+r.x1:r.x1,e=r.relative?n+r.y1:r.y1;var a=r.x1,s=r.y1;r.type=E.CURVE_TO,r.x1=((r.relative?0:i)+2*a)/3,r.y1=((r.relative?0:n)+2*s)/3,r.x2=(r.x+2*a)/3,r.y2=(r.y+2*s)/3}else t=NaN,e=NaN;return r}))}function n(t){var e=0,r=0,i=NaN,n=NaN;return function(a){if(isNaN(i)&&!(a.type&E.MOVE_TO))throw new Error("path must start with moveto");var s=t(a,e,r,i,n);return a.type&E.CLOSE_PATH&&(e=i,r=n),void 0!==a.x&&(e=a.relative?e+a.x:a.x),void 0!==a.y&&(r=a.relative?r+a.y:a.y),a.type&E.MOVE_TO&&(i=e,n=r),s}}function a(t,e,r,i,a,s){return g(t,e,r,i,a,s),n((function(n,o,h,u){var l=n.x1,c=n.x2,g=n.relative&&!isNaN(u),f=void 0!==n.x?n.x:g?0:o,p=void 0!==n.y?n.y:g?0:h;function d(t){return t*t}n.type&E.HORIZ_LINE_TO&&0!==e&&(n.type=E.LINE_TO,n.y=n.relative?0:h),n.type&E.VERT_LINE_TO&&0!==r&&(n.type=E.LINE_TO,n.x=n.relative?0:o),void 0!==n.x&&(n.x=n.x*t+p*r+(g?0:a)),void 0!==n.y&&(n.y=f*e+n.y*i+(g?0:s)),void 0!==n.x1&&(n.x1=n.x1*t+n.y1*r+(g?0:a)),void 0!==n.y1&&(n.y1=l*e+n.y1*i+(g?0:s)),void 0!==n.x2&&(n.x2=n.x2*t+n.y2*r+(g?0:a)),void 0!==n.y2&&(n.y2=c*e+n.y2*i+(g?0:s));var v=t*i-e*r;if(void 0!==n.xRot&&(1!==t||0!==e||0!==r||1!==i))if(0===v)delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag,n.type=E.LINE_TO;else{var y=n.xRot*Math.PI/180,m=Math.sin(y),x=Math.cos(y),b=1/d(n.rX),S=1/d(n.rY),w=d(x)*b+d(m)*S,T=2*m*x*(b-S),A=d(m)*b+d(x)*S,O=w*i*i-T*e*i+A*e*e,P=T*(t*i+e*r)-2*(w*r*i+A*t*e),C=w*r*r-T*t*r+A*t*t,M=(Math.atan2(P,O-C)+Math.PI)%Math.PI/2,N=Math.sin(M),_=Math.cos(M);n.rX=Math.abs(v)/Math.sqrt(O*d(_)+P*N*_+C*d(N)),n.rY=Math.abs(v)/Math.sqrt(O*d(N)-P*N*_+C*d(_)),n.xRot=180*M/Math.PI}return void 0!==n.sweepFlag&&0>v&&(n.sweepFlag=+!n.sweepFlag),n}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),g(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return n((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),n((function(i,n,a,s,o){if(isNaN(s)&&!(i.type&E.MOVE_TO))throw new Error("path must start with moveto");return e&&i.type&E.HORIZ_LINE_TO&&(i.type=E.LINE_TO,i.y=i.relative?0:a),r&&i.type&E.VERT_LINE_TO&&(i.type=E.LINE_TO,i.x=i.relative?0:n),t&&i.type&E.CLOSE_PATH&&(i.type=E.LINE_TO,i.x=i.relative?s-n:s,i.y=i.relative?o-a:o),i.type&E.ARC&&(0===i.rX||0===i.rY)&&(i.type=E.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i}))},t.NORMALIZE_ST=r,t.QT_TO_C=i,t.INFO=n,t.SANITIZE=function(t){void 0===t&&(t=0),g(t);var e=NaN,r=NaN,i=NaN,a=NaN;return n((function(n,s,o,h,u){var l=Math.abs,c=!1,g=0,f=0;if(n.type&E.SMOOTH_CURVE_TO&&(g=isNaN(e)?0:s-e,f=isNaN(r)?0:o-r),n.type&(E.CURVE_TO|E.SMOOTH_CURVE_TO)?(e=n.relative?s+n.x2:n.x2,r=n.relative?o+n.y2:n.y2):(e=NaN,r=NaN),n.type&E.SMOOTH_QUAD_TO?(i=isNaN(i)?s:2*s-i,a=isNaN(a)?o:2*o-a):n.type&E.QUAD_TO?(i=n.relative?s+n.x1:n.x1,a=n.relative?o+n.y1:n.y2):(i=NaN,a=NaN),n.type&E.LINE_COMMANDS||n.type&E.ARC&&(0===n.rX||0===n.rY||!n.lArcFlag)||n.type&E.CURVE_TO||n.type&E.SMOOTH_CURVE_TO||n.type&E.QUAD_TO||n.type&E.SMOOTH_QUAD_TO){var p=void 0===n.x?0:n.relative?n.x:n.x-s,d=void 0===n.y?0:n.relative?n.y:n.y-o;g=isNaN(i)?void 0===n.x1?g:n.relative?n.x:n.x1-s:i-s,f=isNaN(a)?void 0===n.y1?f:n.relative?n.y:n.y1-o:a-o;var v=void 0===n.x2?0:n.relative?n.x:n.x2-s,y=void 0===n.y2?0:n.relative?n.y:n.y2-o;l(p)<=t&&l(d)<=t&&l(g)<=t&&l(f)<=t&&l(v)<=t&&l(y)<=t&&(c=!0)}return n.type&E.CLOSE_PATH&&l(s-h)<=t&&l(o-u)<=t&&(c=!0),c?[]:n}))},t.MATRIX=a,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),g(t,e,r);var i=Math.sin(t),n=Math.cos(t);return a(n,i,-i,n,e-e*n+r*i,r-e*i-r*n)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),g(t,e),a(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),g(t,e),a(t,0,0,e,0,0)},t.SKEW_X=function(t){return g(t),a(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return g(t),a(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),g(t),a(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),g(t),a(1,0,0,-1,0,t)},t.A_TO_C=function(){return n((function(t,e,r){return E.ARC===t.type?function(t,e,r){var i,n,a,s;t.cX||p(t,e,r);for(var o=Math.min(t.phi1,t.phi2),h=Math.max(t.phi1,t.phi2)-o,u=Math.ceil(h/90),l=new Array(u),g=e,f=r,d=0;d<u;d++){var v=m(t.phi1,t.phi2,d/u),x=m(t.phi1,t.phi2,(d+1)/u),b=x-v,S=4/3*Math.tan(b*y/4),w=[Math.cos(v*y)-S*Math.sin(v*y),Math.sin(v*y)+S*Math.cos(v*y)],T=w[0],A=w[1],O=[Math.cos(x*y),Math.sin(x*y)],P=O[0],C=O[1],M=[P+S*Math.sin(x*y),C-S*Math.cos(x*y)],N=M[0],_=M[1];l[d]={relative:t.relative,type:E.CURVE_TO};var V=function(e,r){var i=c([e*t.rX,r*t.rY],t.xRot),n=i[0],a=i[1];return[t.cX+n,t.cY+a]};i=V(T,A),l[d].x1=i[0],l[d].y1=i[1],n=V(N,_),l[d].x2=n[0],l[d].y2=n[1],a=V(P,C),l[d].x=a[0],l[d].y=a[1],t.relative&&(l[d].x1-=g,l[d].y1-=f,l[d].x2-=g,l[d].y2-=f,l[d].x-=g,l[d].y-=f),g=(s=[l[d].x,l[d].y])[0],f=s[1]}return l}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return n((function(t,e,r){return t.relative&&(e=0,r=0),E.ARC===t.type&&p(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),a=i(),s=r(),o=n((function(e,r,i){var n=s(a(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function h(t){t>o.maxX&&(o.maxX=t),t<o.minX&&(o.minX=t)}function u(t){t>o.maxY&&(o.maxY=t),t<o.minY&&(o.minY=t)}if(n.type&E.DRAWING_COMMANDS&&(h(r),u(i)),n.type&E.HORIZ_LINE_TO&&h(n.x),n.type&E.VERT_LINE_TO&&u(n.y),n.type&E.LINE_TO&&(h(n.x),u(n.y)),n.type&E.CURVE_TO){h(n.x),u(n.y);for(var l=0,c=b(r,n.x1,n.x2,n.x);l<c.length;l++)0<(R=c[l])&&1>R&&h(S(r,n.x1,n.x2,n.x,R));for(var g=0,f=b(i,n.y1,n.y2,n.y);g<f.length;g++)0<(R=f[g])&&1>R&&u(S(i,n.y1,n.y2,n.y,R))}if(n.type&E.ARC){h(n.x),u(n.y),p(n,r,i);for(var v=n.xRot/180*Math.PI,y=Math.cos(v)*n.rX,m=Math.sin(v)*n.rX,w=-Math.sin(v)*n.rY,T=Math.cos(v)*n.rY,A=n.phi1<n.phi2?[n.phi1,n.phi2]:-180>n.phi2?[n.phi2+360,n.phi1+360]:[n.phi2,n.phi1],O=A[0],P=A[1],C=function(t){var e=t[0],r=t[1],i=180*Math.atan2(r,e)/Math.PI;return i<O?i+360:i},M=0,N=d(w,-y,0).map(C);M<N.length;M++)(R=N[M])>O&&R<P&&h(x(n.cX,y,w,R));for(var _=0,V=d(T,-m,0).map(C);_<V.length;_++){var R;(R=V[_])>O&&R<P&&u(x(n.cY,m,T,R))}}return e}));return o.minX=1/0,o.maxX=-1/0,o.minY=1/0,o.maxY=-1/0,o}}(v||(v={}));var w,T=function(){function t(){}return t.prototype.round=function(t){return this.transform(v.ROUND(t))},t.prototype.toAbs=function(){return this.transform(v.TO_ABS())},t.prototype.toRel=function(){return this.transform(v.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(v.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(v.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(v.QT_TO_C())},t.prototype.aToC=function(){return this.transform(v.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(v.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(v.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(v.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(v.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,i,n,a){return this.transform(v.MATRIX(t,e,r,i,n,a))},t.prototype.skewX=function(t){return this.transform(v.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(v.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(v.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(v.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(v.ANNOTATE_ARCS())},t}(),A=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},O=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},P=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return l(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var i=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},n=0;n<t.length;n++){var a=t[n],s=!(this.curCommandType!==E.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),o=O(a)&&("0"===this.curNumber&&"0"===a||s);if(!O(a)||o)if("e"!==a&&"E"!==a)if("-"!==a&&"+"!==a||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==a||this.curNumberHasExp||this.curNumberHasDecimal||s){if(this.curNumber&&-1!==this.curCommandType){var h=Number(this.curNumber);if(isNaN(h))throw new SyntaxError("Invalid number ending at "+n);if(this.curCommandType===E.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>h)throw new SyntaxError('Expected positive number, got "'+h+'" at index "'+n+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+n+'"');this.curArgs.push(h),this.curArgs.length===C[this.curCommandType]&&(E.HORIZ_LINE_TO===this.curCommandType?i({type:E.HORIZ_LINE_TO,relative:this.curCommandRelative,x:h}):E.VERT_LINE_TO===this.curCommandType?i({type:E.VERT_LINE_TO,relative:this.curCommandRelative,y:h}):this.curCommandType===E.MOVE_TO||this.curCommandType===E.LINE_TO||this.curCommandType===E.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),E.MOVE_TO===this.curCommandType&&(this.curCommandType=E.LINE_TO)):this.curCommandType===E.CURVE_TO?i({type:E.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===E.SMOOTH_CURVE_TO?i({type:E.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===E.QUAD_TO?i({type:E.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===E.ARC&&i({type:E.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!A(a))if(","===a&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==a&&"-"!==a&&"."!==a)if(o)this.curNumber=a,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+n+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==a&&"Z"!==a)if("h"===a||"H"===a)this.curCommandType=E.HORIZ_LINE_TO,this.curCommandRelative="h"===a;else if("v"===a||"V"===a)this.curCommandType=E.VERT_LINE_TO,this.curCommandRelative="v"===a;else if("m"===a||"M"===a)this.curCommandType=E.MOVE_TO,this.curCommandRelative="m"===a;else if("l"===a||"L"===a)this.curCommandType=E.LINE_TO,this.curCommandRelative="l"===a;else if("c"===a||"C"===a)this.curCommandType=E.CURVE_TO,this.curCommandRelative="c"===a;else if("s"===a||"S"===a)this.curCommandType=E.SMOOTH_CURVE_TO,this.curCommandRelative="s"===a;else if("q"===a||"Q"===a)this.curCommandType=E.QUAD_TO,this.curCommandRelative="q"===a;else if("t"===a||"T"===a)this.curCommandType=E.SMOOTH_QUAD_TO,this.curCommandRelative="t"===a;else{if("a"!==a&&"A"!==a)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+".");this.curCommandType=E.ARC,this.curCommandRelative="a"===a}else e.push({type:E.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=a,this.curNumberHasDecimal="."===a}else this.curNumber+=a,this.curNumberHasDecimal=!0;else this.curNumber+=a;else this.curNumber+=a,this.curNumberHasExp=!0;else this.curNumber+=a,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var i=0,n=Object.getPrototypeOf(this).parse.call(this,e);i<n.length;i++){var a=n[i],s=t(a);Array.isArray(s)?r.push.apply(r,s):r.push(s)}return r}}})},e}(T),E=function(t){function e(r){var i=t.call(this)||this;return i.commands="string"==typeof r?e.parse(r):r,i}return l(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=v.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,i=this.commands;r<i.length;r++){var n=t(i[r]);Array.isArray(n)?e.push.apply(e,n):e.push(n)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var i=t[r];if(i.type===E.CLOSE_PATH)e+="z";else if(i.type===E.HORIZ_LINE_TO)e+=(i.relative?"h":"H")+i.x;else if(i.type===E.VERT_LINE_TO)e+=(i.relative?"v":"V")+i.y;else if(i.type===E.MOVE_TO)e+=(i.relative?"m":"M")+i.x+" "+i.y;else if(i.type===E.LINE_TO)e+=(i.relative?"l":"L")+i.x+" "+i.y;else if(i.type===E.CURVE_TO)e+=(i.relative?"c":"C")+i.x1+" "+i.y1+" "+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===E.SMOOTH_CURVE_TO)e+=(i.relative?"s":"S")+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===E.QUAD_TO)e+=(i.relative?"q":"Q")+i.x1+" "+i.y1+" "+i.x+" "+i.y;else if(i.type===E.SMOOTH_QUAD_TO)e+=(i.relative?"t":"T")+i.x+" "+i.y;else{if(i.type!==E.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+r+".");e+=(i.relative?"a":"A")+i.rX+" "+i.rY+" "+i.xRot+" "+ +i.lArcFlag+" "+ +i.sweepFlag+" "+i.x+" "+i.y}}return e}(t)},e.parse=function(t){var e=new P,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(T),C=((w={})[E.MOVE_TO]=2,w[E.LINE_TO]=2,w[E.HORIZ_LINE_TO]=1,w[E.VERT_LINE_TO]=1,w[E.CLOSE_PATH]=0,w[E.QUAD_TO]=4,w[E.SMOOTH_QUAD_TO]=2,w[E.CURVE_TO]=6,w[E.SMOOTH_CURVE_TO]=4,w[E.ARC]=7,w);function M(t){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},M(t)}r(9714);var N=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],_=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function V(t,e,r,i,n,a){if(!(isNaN(a)||a<1)){a|=0;var s=function(t,e,r,i,n){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==M(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var a=t.getContext("2d");try{return a.getImageData(e,r,i,n)}catch(t){throw new Error("unable to access image data: "+t)}}(t,e,r,i,n);s=function(t,e,r,i,n,a){for(var s,o=t.data,h=2*a+1,u=i-1,l=n-1,c=a+1,g=c*(c+1)/2,f=new R,p=f,d=1;d<h;d++)p=p.next=new R,d===c&&(s=p);p.next=f;for(var v=null,y=null,m=0,x=0,b=N[a],S=_[a],w=0;w<n;w++){p=f;for(var T=o[x],A=o[x+1],O=o[x+2],P=o[x+3],E=0;E<c;E++)p.r=T,p.g=A,p.b=O,p.a=P,p=p.next;for(var C=0,M=0,V=0,k=0,I=c*T,L=c*A,D=c*O,B=c*P,j=g*T,z=g*A,F=g*O,U=g*P,H=1;H<c;H++){var X=x+((u<H?u:H)<<2),Y=o[X],q=o[X+1],W=o[X+2],G=o[X+3],Q=c-H;j+=(p.r=Y)*Q,z+=(p.g=q)*Q,F+=(p.b=W)*Q,U+=(p.a=G)*Q,C+=Y,M+=q,V+=W,k+=G,p=p.next}v=f,y=s;for(var $=0;$<i;$++){var Z=U*b>>S;if(o[x+3]=Z,0!==Z){var K=255/Z;o[x]=(j*b>>S)*K,o[x+1]=(z*b>>S)*K,o[x+2]=(F*b>>S)*K}else o[x]=o[x+1]=o[x+2]=0;j-=I,z-=L,F-=D,U-=B,I-=v.r,L-=v.g,D-=v.b,B-=v.a;var J=$+a+1;J=m+(J<u?J:u)<<2,j+=C+=v.r=o[J],z+=M+=v.g=o[J+1],F+=V+=v.b=o[J+2],U+=k+=v.a=o[J+3],v=v.next;var tt=y,et=tt.r,rt=tt.g,it=tt.b,nt=tt.a;I+=et,L+=rt,D+=it,B+=nt,C-=et,M-=rt,V-=it,k-=nt,y=y.next,x+=4}m+=i}for(var at=0;at<i;at++){var st=o[x=at<<2],ot=o[x+1],ht=o[x+2],ut=o[x+3],lt=c*st,ct=c*ot,gt=c*ht,ft=c*ut,pt=g*st,dt=g*ot,vt=g*ht,yt=g*ut;p=f;for(var mt=0;mt<c;mt++)p.r=st,p.g=ot,p.b=ht,p.a=ut,p=p.next;for(var xt=i,bt=0,St=0,wt=0,Tt=0,At=1;At<=a;At++){x=xt+at<<2;var Ot=c-At;pt+=(p.r=st=o[x])*Ot,dt+=(p.g=ot=o[x+1])*Ot,vt+=(p.b=ht=o[x+2])*Ot,yt+=(p.a=ut=o[x+3])*Ot,Tt+=st,bt+=ot,St+=ht,wt+=ut,p=p.next,At<l&&(xt+=i)}x=at,v=f,y=s;for(var Pt=0;Pt<n;Pt++){var Et=x<<2;o[Et+3]=ut=yt*b>>S,ut>0?(ut=255/ut,o[Et]=(pt*b>>S)*ut,o[Et+1]=(dt*b>>S)*ut,o[Et+2]=(vt*b>>S)*ut):o[Et]=o[Et+1]=o[Et+2]=0,pt-=lt,dt-=ct,vt-=gt,yt-=ft,lt-=v.r,ct-=v.g,gt-=v.b,ft-=v.a,Et=at+((Et=Pt+c)<l?Et:l)*i<<2,pt+=Tt+=v.r=o[Et],dt+=bt+=v.g=o[Et+1],vt+=St+=v.b=o[Et+2],yt+=wt+=v.a=o[Et+3],v=v.next,lt+=st=y.r,ct+=ot=y.g,gt+=ht=y.b,ft+=ut=y.a,Tt-=st,bt-=ot,St-=ht,wt-=ut,y=y.next,x+=i}}return t}(s,0,0,i,n,a),t.getContext("2d").putImageData(s,e,r)}}var R=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null},k=r(2702),I=Object.freeze({__proto__:null,offscreen:function(){var{DOMParser:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:t,createCanvas:(t,e)=>new OffscreenCanvas(t,e),createImage:t=>a((function*(){var e=yield fetch(t),r=yield e.blob();return yield createImageBitmap(r)}))()};return"undefined"==typeof DOMParser&&void 0!==t||Reflect.deleteProperty(e,"DOMParser"),e},node:function(t){var{DOMParser:e,canvas:r,fetch:i}=t;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:i,createCanvas:r.createCanvas,createImage:r.loadImage}}});function L(t){return t.replace(/(?!\u3000)\s+/gm," ")}function D(t){return t.replace(/^[\n \t]+/,"")}function B(t){return t.replace(/[\n \t]+$/,"")}function j(t){return((t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var z=/^[A-Z-]+$/;function F(t){return z.test(t)?t.toLowerCase():t}function U(t){var e=/url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(t)||[];return e[2]||e[3]||e[4]}function H(t){if(!t.startsWith("rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,((t,r)=>e--&&r?String(Math.round(parseFloat(t))):t))}var X=/(\[[^\]]+\])/g,Y=/(#[^\s+>~.[:]+)/g,q=/(\.[^\s+>~.[:]+)/g,W=/(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi,G=/(:[\w-]+\([^)]*\))/gi,Q=/(:[^\s+>~.[:]+)/g,$=/([^\s+>~.[:]+)/g;function Z(t,e){var r=e.exec(t);return r?[t.replace(e," "),r.length]:[t,0]}function K(t){var e=[0,0,0],r=t.replace(/:not\(([^)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),i=0;return[r,i]=Z(r,X),e[1]+=i,[r,i]=Z(r,Y),e[0]+=i,[r,i]=Z(r,q),e[1]+=i,[r,i]=Z(r,W),e[2]+=i,[r,i]=Z(r,G),e[1]+=i,[r,i]=Z(r,Q),e[1]+=i,r=r.replace(/[*\s+>~]/g," ").replace(/[#.]/g," "),[r,i]=Z(r,$),e[2]+=i,e.join("")}var J=1e-8;function tt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function et(t,e){return(t[0]*e[0]+t[1]*e[1])/(tt(t)*tt(e))}function rt(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(et(t,e))}function it(t){return t*t*t}function nt(t){return 3*t*t*(1-t)}function at(t){return 3*t*(1-t)*(1-t)}function st(t){return(1-t)*(1-t)*(1-t)}function ot(t){return t*t}function ht(t){return 2*t*(1-t)}function ut(t){return(1-t)*(1-t)}class lt{constructor(t,e,r){this.document=t,this.name=e,this.value=r,this.isNormalizedColor=!1}static empty(t){return new lt(t,"EMPTY","")}split(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",{document:e,name:r}=this;return L(this.getString()).trim().split(t).map((t=>new lt(e,r,t)))}hasValue(t){var{value:e}=this;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}isString(t){var{value:e}=this,r="string"==typeof e;return r&&t?t.test(e):r}isUrlDefinition(){return this.isString(/^url\(/)}isPixels(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case t.endsWith("px"):case/^[0-9]+$/.test(t):return!0;default:return!1}}setValue(t){return this.value=t,this}getValue(t){return void 0===t||this.hasValue()?this.value:t}getNumber(t){if(!this.hasValue())return void 0===t?0:parseFloat(t);var{value:e}=this,r=parseFloat(e);return this.isString(/%$/)&&(r/=100),r}getString(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}getColor(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=H(e),this.value=e),e}getDpi(){return 96}getRem(){return this.document.rootEmSize}getEm(){return this.document.emSize}getUnits(){return this.getString().replace(/[0-9.-]/g,"")}getPixels(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var[r,i]="boolean"==typeof t?[void 0,t]:[t],{viewPort:n}=this.document.screen;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(n.computeSize("x"),n.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(n.computeSize("x"),n.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*n.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*n.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&i:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*n.computeSize(r);default:var a=this.getNumber();return e&&a<1?a*n.computeSize(r):a}}getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}getDefinition(){var t=this.getString(),e=/#([^)'"]+)/.exec(t);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}getFillStyleDefinition(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var i=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),i.hasValue()&&r.getAttribute("patternTransform",!0).setValue(i.value)}return r.createPattern(this.document.ctx,t,e)}return null}getTextBaseline(){return this.hasValue()?lt.textBaselineMapping[this.getString()]:null}addOpacity(t){for(var e=this.getColor(),r=e.length,i=0,n=0;n<r&&(","===e[n]&&i++,3!==i);n++);if(t.hasValue()&&this.isString()&&3!==i){var a=new h(e);a.ok&&(a.alpha=t.getNumber(),e=a.toRGBA())}return new lt(this.document,this.name,e)}}lt.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};class ct{constructor(){this.viewPorts=[]}clear(){this.viewPorts=[]}setCurrent(t,e){this.viewPorts.push({width:t,height:e})}removeCurrent(){this.viewPorts.pop()}getCurrent(){var{viewPorts:t}=this;return t[t.length-1]}get width(){return this.getCurrent().width}get height(){return this.getCurrent().height}computeSize(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}}class gt{constructor(t,e){this.x=t,this.y=e}static parse(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,[r=e,i=e]=j(t);return new gt(r,i)}static parseScale(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,[r=e,i=r]=j(t);return new gt(r,i)}static parsePath(t){for(var e=j(t),r=e.length,i=[],n=0;n<r;n+=2)i.push(new gt(e[n],e[n+1]));return i}angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}applyTransform(t){var{x:e,y:r}=this,i=e*t[0]+r*t[2]+t[4],n=e*t[1]+r*t[3]+t[5];this.x=i,this.y=n}}class ft{constructor(t){this.screen=t,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}isWorking(){return this.working}start(){if(!this.working){var{screen:t,onClick:e,onMouseMove:r}=this,i=t.ctx.canvas;i.onclick=e,i.onmousemove=r,this.working=!0}}stop(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}hasEvents(){return this.working&&this.events.length>0}runEvents(){if(this.working){var{screen:t,events:e,eventElements:r}=this,{style:i}=t.ctx.canvas;i&&(i.cursor=""),e.forEach(((t,e)=>{for(var{run:i}=t,n=r[e];n;)i(n),n=n.parent})),this.events=[],this.eventElements=[]}}checkPath(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach(((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInPath&&e.isPointInPath(a,s)&&(i[n]=t)}))}}checkBoundingBox(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach(((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInBox(a,s)&&(i[n]=t)}))}}mapXY(t,e){for(var{window:r,ctx:i}=this.screen,n=new gt(t,e),a=i.canvas;a;)n.x-=a.offsetLeft,n.y-=a.offsetTop,a=a.offsetParent;return r.scrollX&&(n.x+=r.scrollX),r.scrollY&&(n.y+=r.scrollY),n}onClick(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onclick",x:e,y:r,run(t){t.onClick&&t.onClick()}})}onMouseMove(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onmousemove",x:e,y:r,run(t){t.onMouseMove&&t.onMouseMove()}})}}var pt="undefined"!=typeof window?window:null,dt="undefined"!=typeof fetch?fetch.bind(void 0):null;class vt{constructor(t){var{fetch:e=dt,window:r=pt}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.ctx=t,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new ct,this.mouse=new ft(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=r,this.fetch=e}wait(t){this.waits.push(t)}ready(){return this.readyPromise?this.readyPromise:k.resolve()}isReady(){if(this.isReadyLock)return!0;var t=this.waits.every((t=>t()));return t&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=t,t}setDefaults(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}setViewBox(t){var{document:e,ctx:r,aspectRatio:i,width:n,desiredWidth:a,height:s,desiredHeight:o,minX:h=0,minY:u=0,refX:l,refY:c,clip:g=!1,clipX:f=0,clipY:p=0}=t,d=L(i).replace(/^defer\s/,""),[v,y]=d.split(" "),m=v||"xMidYMid",x=y||"meet",b=n/a,S=s/o,w=Math.min(b,S),T=Math.max(b,S),A=a,O=o;"meet"===x&&(A*=w,O*=w),"slice"===x&&(A*=T,O*=T);var P=new lt(e,"refX",l),E=new lt(e,"refY",c),C=P.hasValue()&&E.hasValue();if(C&&r.translate(-w*P.getPixels("x"),-w*E.getPixels("y")),g){var M=w*f,N=w*p;r.beginPath(),r.moveTo(M,N),r.lineTo(n,N),r.lineTo(n,s),r.lineTo(M,s),r.closePath(),r.clip()}if(!C){var _="meet"===x&&w===S,V="slice"===x&&T===S,R="meet"===x&&w===b,k="slice"===x&&T===b;m.startsWith("xMid")&&(_||V)&&r.translate(n/2-A/2,0),m.endsWith("YMid")&&(R||k)&&r.translate(0,s/2-O/2),m.startsWith("xMax")&&(_||V)&&r.translate(n-A,0),m.endsWith("YMax")&&(R||k)&&r.translate(0,s-O)}switch(!0){case"none"===m:r.scale(b,S);break;case"meet"===x:r.scale(w,w);break;case"slice"===x:r.scale(T,T)}r.translate(-h,-u)}start(t){var{enableRedraw:e=!1,ignoreMouse:r=!1,ignoreAnimation:i=!1,ignoreDimensions:n=!1,ignoreClear:a=!1,forceRedraw:s,scaleWidth:h,scaleHeight:u,offsetX:l,offsetY:c}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{FRAMERATE:g,mouse:f}=this,p=1e3/g;if(this.frameDuration=p,this.readyPromise=new k((t=>{this.resolveReady=t})),this.isReady()&&this.render(t,n,a,h,u,l,c),e){var d=Date.now(),v=d,y=0,m=()=>{d=Date.now(),(y=d-v)>=p&&(v=d-y%p,this.shouldUpdate(i,s)&&(this.render(t,n,a,h,u,l,c),f.runEvents())),this.intervalId=o(m)};r||f.start(),this.intervalId=o(m)}}stop(){this.intervalId&&(o.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}shouldUpdate(t,e){if(!t){var{frameDuration:r}=this;if(this.animations.reduce(((t,e)=>e.update(r)||t),!1))return!0}return!("function"!=typeof e||!e())||!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents()}render(t,e,r,i,n,a,s){var{CLIENT_WIDTH:o,CLIENT_HEIGHT:h,viewPort:u,ctx:l,isFirstRender:c}=this,g=l.canvas;u.clear(),g.width&&g.height?u.setCurrent(g.width,g.height):u.setCurrent(o,h);var f=t.getStyle("width"),p=t.getStyle("height");!e&&(c||"number"!=typeof i&&"number"!=typeof n)&&(f.hasValue()&&(g.width=f.getPixels("x"),g.style&&(g.style.width="".concat(g.width,"px"))),p.hasValue()&&(g.height=p.getPixels("y"),g.style&&(g.style.height="".concat(g.height,"px"))));var d=g.clientWidth||g.width,v=g.clientHeight||g.height;if(e&&f.hasValue()&&p.hasValue()&&(d=f.getPixels("x"),v=p.getPixels("y")),u.setCurrent(d,v),"number"==typeof a&&t.getAttribute("x",!0).setValue(a),"number"==typeof s&&t.getAttribute("y",!0).setValue(s),"number"==typeof i||"number"==typeof n){var y=j(t.getAttribute("viewBox").getString()),m=0,x=0;if("number"==typeof i){var b=t.getStyle("width");b.hasValue()?m=b.getPixels("x")/i:isNaN(y[2])||(m=y[2]/i)}if("number"==typeof n){var S=t.getStyle("height");S.hasValue()?x=S.getPixels("y")/n:isNaN(y[3])||(x=y[3]/n)}m||(m=x),x||(x=m),t.getAttribute("width",!0).setValue(i),t.getAttribute("height",!0).setValue(n);var w=t.getStyle("transform",!0,!0);w.setValue("".concat(w.getString()," scale(").concat(1/m,", ").concat(1/x,")"))}r||l.clearRect(0,0,d,v),t.render(l),c&&(this.isFirstRender=!1)}}vt.defaultWindow=pt,vt.defaultFetch=dt;var{defaultFetch:yt}=vt,mt="undefined"!=typeof DOMParser?DOMParser:null;class xt{constructor(){var{fetch:t=yt,DOMParser:e=mt}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.fetch=t,this.DOMParser=e}parse(t){var e=this;return a((function*(){return t.startsWith("<")?e.parseFromString(t):e.load(t)}))()}parseFromString(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}checkDocument(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}load(t){var e=this;return a((function*(){var r=yield e.fetch(t),i=yield r.text();return e.parseFromString(i)}))()}}class bt{constructor(t,e){this.type="translate",this.point=null,this.point=gt.parse(e)}apply(t){var{x:e,y:r}=this.point;t.translate(e||0,r||0)}unapply(t){var{x:e,y:r}=this.point;t.translate(-1*e||0,-1*r||0)}applyToPoint(t){var{x:e,y:r}=this.point;t.applyTransform([1,0,0,1,e||0,r||0])}}class St{constructor(t,e,r){this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=j(e);this.angle=new lt(t,"angle",i[0]),this.originX=r[0],this.originY=r[1],this.cx=i[1]||0,this.cy=i[2]||0}apply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(a.getRadians()),t.translate(-s,-o)}unapply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(-1*a.getRadians()),t.translate(-s,-o)}applyToPoint(t){var{cx:e,cy:r,angle:i}=this,n=i.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}class wt{constructor(t,e,r){this.type="scale",this.scale=null,this.originX=null,this.originY=null;var i=gt.parseScale(e);0!==i.x&&0!==i.y||(i.x=J,i.y=J),this.scale=i,this.originX=r[0],this.originY=r[1]}apply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(e,r||e),t.translate(-a,-s)}unapply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(1/e,1/r||e),t.translate(-a,-s)}applyToPoint(t){var{x:e,y:r}=this.scale;t.applyTransform([e||0,0,0,r||0,0,0])}}class Tt{constructor(t,e,r){this.type="matrix",this.matrix=[],this.originX=null,this.originY=null,this.matrix=j(e),this.originX=r[0],this.originY=r[1]}apply(t){var{originX:e,originY:r,matrix:i}=this,n=e.getPixels("x"),a=r.getPixels("y");t.translate(n,a),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),t.translate(-n,-a)}unapply(t){var{originX:e,originY:r,matrix:i}=this,n=i[0],a=i[2],s=i[4],o=i[1],h=i[3],u=i[5],l=1/(n*(1*h-0*u)-a*(1*o-0*u)+s*(0*o-0*h)),c=e.getPixels("x"),g=r.getPixels("y");t.translate(c,g),t.transform(l*(1*h-0*u),l*(0*u-1*o),l*(0*s-1*a),l*(1*n-0*s),l*(a*u-s*h),l*(s*o-n*u)),t.translate(-c,-g)}applyToPoint(t){t.applyTransform(this.matrix)}}class At extends Tt{constructor(t,e,r){super(t,e,r),this.type="skew",this.angle=null,this.angle=new lt(t,"angle",e)}}class Ot extends At{constructor(t,e,r){super(t,e,r),this.type="skewX",this.matrix=[1,0,Math.tan(this.angle.getRadians()),1,0,0]}}class Pt extends At{constructor(t,e,r){super(t,e,r),this.type="skewY",this.matrix=[1,Math.tan(this.angle.getRadians()),0,1,0,0]}}class Et{constructor(t,e,r){this.document=t,this.transforms=[];var i=function(t){return L(t).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(e);i.forEach((t=>{if("none"!==t){var[e,i]=function(t){var[e,r]=t.split("(");return[e.trim(),r.trim().replace(")","")]}(t),n=Et.transformTypes[e];void 0!==n&&this.transforms.push(new n(this.document,i,r))}}))}static fromElement(t,e){var r=e.getStyle("transform",!1,!0),[i,n=i]=e.getStyle("transform-origin",!1,!0).split(),a=[i,n];return r.hasValue()?new Et(t,r.getString(),a):null}apply(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].apply(t)}unapply(t){for(var{transforms:e}=this,r=e.length-1;r>=0;r--)e[r].unapply(t)}applyToPoint(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].applyToPoint(t)}}Et.transformTypes={translate:bt,rotate:St,scale:wt,matrix:Tt,skewX:Ot,skewY:Pt};class Ct{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.document=t,this.node=e,this.captureTextNodes=r,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],e&&1===e.nodeType){if(Array.from(e.attributes).forEach((e=>{var r=F(e.nodeName);this.attributes[r]=new lt(t,r,e.value)})),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue()){var i=this.getAttribute("style").getString().split(";").map((t=>t.trim()));i.forEach((e=>{if(e){var[r,i]=e.split(":").map((t=>t.trim()));this.styles[r]=new lt(t,r,i)}}))}var{definitions:n}=t,a=this.getAttribute("id");a.hasValue()&&(n[a.getString()]||(n[a.getString()]=this)),Array.from(e.childNodes).forEach((e=>{if(1===e.nodeType)this.addChild(e);else if(r&&(3===e.nodeType||4===e.nodeType)){var i=t.createTextNode(e);i.getText().length>0&&this.addChild(i)}}))}}getAttribute(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var i=new lt(this.document,t,"");return this.attributes[t]=i,i}return r||lt.empty(this.document)}getHrefAttribute(){for(var t in this.attributes)if("href"===t||t.endsWith(":href"))return this.attributes[t];return lt.empty(this.document)}getStyle(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.styles[t];if(i)return i;var n=this.getAttribute(t);if(null!=n&&n.hasValue())return this.styles[t]=n,n;if(!r){var{parent:a}=this;if(a){var s=a.getStyle(t);if(null!=s&&s.hasValue())return s}}if(e){var o=new lt(this.document,t,"");return this.styles[t]=o,o}return i||lt.empty(this.document)}render(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}setContext(t){}applyEffects(t){var e=Et.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var i=r.getDefinition();i&&i.apply(t)}}clearContext(t){}renderChildren(t){this.children.forEach((e=>{e.render(t)}))}addChild(t){var e=t instanceof Ct?t:this.document.createElement(t);e.parent=this,Ct.ignoreChildTypes.includes(e.type)||this.children.push(e)}matchesSelector(t){var{node:e}=this;if("function"==typeof e.matches)return e.matches(t);var r=e.getAttribute("class");return!(!r||""===r)&&r.split(" ").some((e=>".".concat(e)===t))}addStylesFromStyleDefinition(){var{styles:t,stylesSpecificity:e}=this.document;for(var r in t)if(!r.startsWith("@")&&this.matchesSelector(r)){var i=t[r],n=e[r];if(i)for(var a in i){var s=this.stylesSpecificity[a];void 0===s&&(s="000"),n>=s&&(this.styles[a]=i[a],this.stylesSpecificity[a]=n)}}}removeStyles(t,e){return e.reduce(((e,r)=>{var i=t.getStyle(r);if(!i.hasValue())return e;var n=i.getString();return i.setValue(""),[...e,[r,n]]}),[])}restoreStyles(t,e){e.forEach((e=>{var[r,i]=e;t.getStyle(r,!0).setValue(i)}))}}Ct.ignoreChildTypes=["title"];class Mt extends Ct{constructor(t,e,r){super(t,e,r)}}function Nt(t){var e=t.trim();return/^('|")/.test(e)?e:'"'.concat(e,'"')}function _t(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function Vt(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}class Rt{constructor(t,e,r,i,n,a){var s=a?"string"==typeof a?Rt.parse(a):a:{};this.fontFamily=n||s.fontFamily,this.fontSize=i||s.fontSize,this.fontStyle=t||s.fontStyle,this.fontWeight=r||s.fontWeight,this.fontVariant=e||s.fontVariant}static parse(){var t=arguments.length>1?arguments[1]:void 0,e="",r="",i="",n="",a="",s=L(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().split(" "),o={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return s.forEach((t=>{switch(!0){case!o.fontStyle&&Rt.styles.includes(t):"inherit"!==t&&(e=t),o.fontStyle=!0;break;case!o.fontVariant&&Rt.variants.includes(t):"inherit"!==t&&(r=t),o.fontStyle=!0,o.fontVariant=!0;break;case!o.fontWeight&&Rt.weights.includes(t):"inherit"!==t&&(i=t),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0;break;case!o.fontSize:"inherit"!==t&&([n]=t.split("/")),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0,o.fontSize=!0;break;default:"inherit"!==t&&(a+=t)}})),new Rt(e,r,i,n,a,t)}toString(){return[_t(this.fontStyle),this.fontVariant,Vt(this.fontWeight),this.fontSize,(t=this.fontFamily,"undefined"==typeof process?t:t.trim().split(",").map(Nt).join(","))].join(" ").trim();var t}}Rt.styles="normal|italic|oblique|inherit",Rt.variants="normal|small-caps|inherit",Rt.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";class kt{constructor(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.addPoint(t,e),this.addPoint(r,i)}get x(){return this.x1}get y(){return this.y1}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}addPoint(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}addX(t){this.addPoint(t,null)}addY(t){this.addPoint(null,t)}addBoundingBox(t){if(t){var{x1:e,y1:r,x2:i,y2:n}=t;this.addPoint(e,r),this.addPoint(i,n)}}sumCubic(t,e,r,i,n){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*i+Math.pow(t,3)*n}bezierCurveAdd(t,e,r,i,n){var a=6*e-12*r+6*i,s=-3*e+9*r-9*i+3*n,o=3*r-3*e;if(0!==s){var h=Math.pow(a,2)-4*o*s;if(!(h<0)){var u=(-a+Math.sqrt(h))/(2*s);0<u&&u<1&&(t?this.addX(this.sumCubic(u,e,r,i,n)):this.addY(this.sumCubic(u,e,r,i,n)));var l=(-a-Math.sqrt(h))/(2*s);0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,i,n)):this.addY(this.sumCubic(l,e,r,i,n)))}}else{if(0===a)return;var c=-o/a;0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,i,n)):this.addY(this.sumCubic(c,e,r,i,n)))}}addBezierCurve(t,e,r,i,n,a,s,o){this.addPoint(t,e),this.addPoint(s,o),this.bezierCurveAdd(!0,t,r,n,s),this.bezierCurveAdd(!1,e,i,a,o)}addQuadraticCurve(t,e,r,i,n,a){var s=t+2/3*(r-t),o=e+2/3*(i-e),h=s+1/3*(n-t),u=o+1/3*(a-e);this.addBezierCurve(t,e,s,h,o,u,n,a)}isPointInBox(t,e){var{x1:r,y1:i,x2:n,y2:a}=this;return r<=t&&t<=n&&i<=e&&e<=a}}class It extends E{constructor(t){super(t.replace(/([+\-.])\s+/gm,"$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,"")),this.control=null,this.start=null,this.current=null,this.command=null,this.commands=this.commands,this.i=-1,this.previousCommand=null,this.points=[],this.angles=[]}reset(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new gt(0,0),this.control=new gt(0,0),this.current=new gt(0,0),this.points=[],this.angles=[]}isEnd(){var{i:t,commands:e}=this;return t>=e.length-1}next(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}getPoint(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new gt(this.command[t],this.command[e]);return this.makeAbsolute(r)}getAsControlPoint(t,e){var r=this.getPoint(t,e);return this.control=r,r}getAsCurrentPoint(t,e){var r=this.getPoint(t,e);return this.current=r,r}getReflectedControlPoint(){var t=this.previousCommand.type;if(t!==E.CURVE_TO&&t!==E.SMOOTH_CURVE_TO&&t!==E.QUAD_TO&&t!==E.SMOOTH_QUAD_TO)return this.current;var{current:{x:e,y:r},control:{x:i,y:n}}=this;return new gt(2*e-i,2*r-n)}makeAbsolute(t){if(this.command.relative){var{x:e,y:r}=this.current;t.x+=e,t.y+=r}return t}addMarker(t,e,r){var{points:i,angles:n}=this;r&&n.length>0&&!n[n.length-1]&&(n[n.length-1]=i[i.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}addMarkerAngle(t,e){this.points.push(t),this.angles.push(e)}getMarkerPoints(){return this.points}getMarkerAngles(){for(var{angles:t}=this,e=t.length,r=0;r<e;r++)if(!t[r])for(var i=r+1;i<e;i++)if(t[i]){t[r]=t[i];break}return t}}class Lt extends Ct{constructor(){super(...arguments),this.modifiedEmSizeStack=!1}calculateOpacity(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),i=this.getStyle("fill-opacity"),n=this.getStyle("stroke"),a=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var s=r.getFillStyleDefinition(this,i);s&&(t.fillStyle=s)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var o=r.getColor();"inherit"!==o&&(t.fillStyle="none"===o?"rgba(0,0,0,0)":o)}if(i.hasValue()){var h=new lt(this.document,"fill",t.fillStyle).addOpacity(i).getColor();t.fillStyle=h}if(n.isUrlDefinition()){var u=n.getFillStyleDefinition(this,a);u&&(t.strokeStyle=u)}else if(n.hasValue()){"currentColor"===n.getString()&&n.setValue(this.getStyle("color").getColor());var l=n.getString();"inherit"!==l&&(t.strokeStyle="none"===l?"rgba(0,0,0,0)":l)}if(a.hasValue()){var c=new lt(this.document,"stroke",t.strokeStyle).addOpacity(a).getString();t.strokeStyle=c}var g=this.getStyle("stroke-width");if(g.hasValue()){var f=g.getPixels();t.lineWidth=f||J}var p=this.getStyle("stroke-linecap"),d=this.getStyle("stroke-linejoin"),v=this.getStyle("stroke-miterlimit"),y=this.getStyle("stroke-dasharray"),m=this.getStyle("stroke-dashoffset");if(p.hasValue()&&(t.lineCap=p.getString()),d.hasValue()&&(t.lineJoin=d.getString()),v.hasValue()&&(t.miterLimit=v.getNumber()),y.hasValue()&&"none"!==y.getString()){var x=j(y.getString());void 0!==t.setLineDash?t.setLineDash(x):void 0!==t.webkitLineDash?t.webkitLineDash=x:void 0===t.mozDash||1===x.length&&0===x[0]||(t.mozDash=x);var b=m.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=b:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=b:void 0!==t.mozDashOffset&&(t.mozDashOffset=b)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var S=this.getStyle("font"),w=this.getStyle("font-style"),T=this.getStyle("font-variant"),A=this.getStyle("font-weight"),O=this.getStyle("font-size"),P=this.getStyle("font-family"),E=new Rt(w.getString(),T.getString(),A.getString(),O.hasValue()?"".concat(O.getPixels(!0),"px"):"",P.getString(),Rt.parse(S.getString(),t.font));w.setValue(E.fontStyle),T.setValue(E.fontVariant),A.setValue(E.fontWeight),O.setValue(E.fontSize),P.setValue(E.fontFamily),t.font=E.toString(),O.isPixels()&&(this.document.emSize=O.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}clearContext(t){super.clearContext(t),this.modifiedEmSizeStack&&this.document.popEmSize()}}class Dt extends Lt{constructor(t,e,r){super(t,e,r),this.type="path",this.pathParser=null,this.pathParser=new It(this.getAttribute("d").getString())}path(t){var{pathParser:e}=this,r=new kt;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case It.MOVE_TO:this.pathM(t,r);break;case It.LINE_TO:this.pathL(t,r);break;case It.HORIZ_LINE_TO:this.pathH(t,r);break;case It.VERT_LINE_TO:this.pathV(t,r);break;case It.CURVE_TO:this.pathC(t,r);break;case It.SMOOTH_CURVE_TO:this.pathS(t,r);break;case It.QUAD_TO:this.pathQ(t,r);break;case It.SMOOTH_QUAD_TO:this.pathT(t,r);break;case It.ARC:this.pathA(t,r);break;case It.CLOSE_PATH:this.pathZ(t,r)}return r}getBoundingBox(t){return this.path()}getMarkers(){var{pathParser:t}=this,e=t.getMarkerPoints(),r=t.getMarkerAngles(),i=e.map(((t,e)=>[t,r[e]]));return i}renderChildren(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?t.fill(e.getString()):t.fill()),""!==t.strokeStyle&&("non-scaling-stroke"===this.getAttribute("vector-effect").getString()?(t.save(),t.setTransform(1,0,0,1,0,0),t.stroke(),t.restore()):t.stroke());var r=this.getMarkers();if(r){var i=r.length-1,n=this.getStyle("marker-start"),a=this.getStyle("marker-mid"),s=this.getStyle("marker-end");if(n.isUrlDefinition()){var o=n.getDefinition(),[h,u]=r[0];o.render(t,h,u)}if(a.isUrlDefinition())for(var l=a.getDefinition(),c=1;c<i;c++){var[g,f]=r[c];l.render(t,g,f)}if(s.isUrlDefinition()){var p=s.getDefinition(),[d,v]=r[i];p.render(t,d,v)}}}static pathM(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}pathM(t,e){var{pathParser:r}=this,{point:i}=Dt.pathM(r),{x:n,y:a}=i;r.addMarker(i),e.addPoint(n,a),t&&t.moveTo(n,a)}static pathL(t){var{current:e}=t;return{current:e,point:t.getAsCurrentPoint()}}pathL(t,e){var{pathParser:r}=this,{current:i,point:n}=Dt.pathL(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathH(t){var{current:e,command:r}=t,i=new gt((r.relative?e.x:0)+r.x,e.y);return t.current=i,{current:e,point:i}}pathH(t,e){var{pathParser:r}=this,{current:i,point:n}=Dt.pathH(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathV(t){var{current:e,command:r}=t,i=new gt(e.x,(r.relative?e.y:0)+r.y);return t.current=i,{current:e,point:i}}pathV(t,e){var{pathParser:r}=this,{current:i,point:n}=Dt.pathV(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathC(t){var{current:e}=t;return{current:e,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathC(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=Dt.pathC(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathS(t){var{current:e}=t;return{current:e,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathS(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=Dt.pathS(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathQ(t){var{current:e}=t;return{current:e,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}pathQ(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=Dt.pathQ(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathT(t){var{current:e}=t,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}pathT(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=Dt.pathT(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathA(t){var{current:e,command:r}=t,{rX:i,rY:n,xRot:a,lArcFlag:s,sweepFlag:o}=r,h=a*(Math.PI/180),u=t.getAsCurrentPoint(),l=new gt(Math.cos(h)*(e.x-u.x)/2+Math.sin(h)*(e.y-u.y)/2,-Math.sin(h)*(e.x-u.x)/2+Math.cos(h)*(e.y-u.y)/2),c=Math.pow(l.x,2)/Math.pow(i,2)+Math.pow(l.y,2)/Math.pow(n,2);c>1&&(i*=Math.sqrt(c),n*=Math.sqrt(c));var g=(s===o?-1:1)*Math.sqrt((Math.pow(i,2)*Math.pow(n,2)-Math.pow(i,2)*Math.pow(l.y,2)-Math.pow(n,2)*Math.pow(l.x,2))/(Math.pow(i,2)*Math.pow(l.y,2)+Math.pow(n,2)*Math.pow(l.x,2)));isNaN(g)&&(g=0);var f=new gt(g*i*l.y/n,g*-n*l.x/i),p=new gt((e.x+u.x)/2+Math.cos(h)*f.x-Math.sin(h)*f.y,(e.y+u.y)/2+Math.sin(h)*f.x+Math.cos(h)*f.y),d=rt([1,0],[(l.x-f.x)/i,(l.y-f.y)/n]),v=[(l.x-f.x)/i,(l.y-f.y)/n],y=[(-l.x-f.x)/i,(-l.y-f.y)/n],m=rt(v,y);return et(v,y)<=-1&&(m=Math.PI),et(v,y)>=1&&(m=0),{currentPoint:u,rX:i,rY:n,sweepFlag:o,xAxisRotation:h,centp:p,a1:d,ad:m}}pathA(t,e){var{pathParser:r}=this,{currentPoint:i,rX:n,rY:a,sweepFlag:s,xAxisRotation:o,centp:h,a1:u,ad:l}=Dt.pathA(r),c=1-s?1:-1,g=u+c*(l/2),f=new gt(h.x+n*Math.cos(g),h.y+a*Math.sin(g));if(r.addMarkerAngle(f,g-c*Math.PI/2),r.addMarkerAngle(i,g-c*Math.PI),e.addPoint(i.x,i.y),t&&!isNaN(u)&&!isNaN(l)){var p=n>a?n:a,d=n>a?1:n/a,v=n>a?a/n:1;t.translate(h.x,h.y),t.rotate(o),t.scale(d,v),t.arc(0,0,p,u,u+l,Boolean(1-s)),t.scale(1/d,1/v),t.rotate(-o),t.translate(-h.x,-h.y)}}static pathZ(t){t.current=t.start}pathZ(t,e){Dt.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}class Bt extends Dt{constructor(t,e,r){super(t,e,r),this.type="glyph",this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber(),this.unicode=this.getAttribute("unicode").getString(),this.arabicForm=this.getAttribute("arabic-form").getString()}}class jt extends Lt{constructor(t,e,r){super(t,e,new.target===jt||r),this.type="text",this.x=0,this.y=0,this.measureCache=-1}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.setContext(t,e);var r=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();r&&(t.textBaseline=r)}initializeCoordinates(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}getBoundingBox(t){if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var e=null;return this.children.forEach(((r,i)=>{var n=this.getChildBoundingBox(t,this,this,i);e?e.addBoundingBox(n):e=n})),e}getFontSize(){var{document:t,parent:e}=this,r=Rt.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}getTElementBoundingBox(t){var e=this.getFontSize();return new kt(this.x,this.y-e,this.x+this.measureText(t),this.y)}getGlyph(t,e,r){var i=e[r],n=null;if(t.isArabic){var a=e.length,s=e[r-1],o=e[r+1],h="isolated";if((0===r||" "===s)&&r<a-2&&" "!==o&&(h="terminal"),r>0&&" "!==s&&r<a-2&&" "!==o&&(h="medial"),r>0&&" "!==s&&(r===a-1||" "===o)&&(h="initial"),void 0!==t.glyphs[i]){var u=t.glyphs[i];n=u instanceof Bt?u:u[h]}}else n=t.glyphs[i];return n||(n=t.missingGlyph),n}getText(){return""}getTextFromNode(t){var e=t||this.node,r=Array.from(e.parentNode.childNodes),i=r.indexOf(e),n=r.length-1,a=L(e.textContent||"");return 0===i&&(a=D(a)),i===n&&(a=B(a)),a}renderChildren(t){if("text"===this.type){this.initializeCoordinates(t),this.children.forEach(((e,r)=>{this.renderChild(t,this,this,r)}));var{mouse:e}=this.document.screen;e.isWorking()&&e.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}renderTElementChildren(t){var{document:e,parent:r}=this,i=this.getText(),n=r.getStyle("font-family").getDefinition();if(n)for(var{unitsPerEm:a}=n.fontFace,s=Rt.parse(e.ctx.font),o=r.getStyle("font-size").getNumber(s.fontSize),h=r.getStyle("font-style").getString(s.fontStyle),u=o/a,l=n.isRTL?i.split("").reverse().join(""):i,c=j(r.getAttribute("dx").getString()),g=l.length,f=0;f<g;f++){var p=this.getGlyph(n,l,f);t.translate(this.x,this.y),t.scale(u,-u);var d=t.lineWidth;t.lineWidth=t.lineWidth*a/o,"italic"===h&&t.transform(1,0,.4,1,0,0),p.render(t),"italic"===h&&t.transform(1,0,-.4,1,0,0),t.lineWidth=d,t.scale(1/u,-1/u),t.translate(-this.x,-this.y),this.x+=o*(p.horizAdvX||n.horizAdvX)/a,void 0===c[f]||isNaN(c[f])||(this.x+=c[f])}else{var{x:v,y}=this;t.fillStyle&&t.fillText(i,v,y),t.strokeStyle&&t.strokeText(i,v,y)}}getAnchorDelta(t,e,r){var i=this.getStyle("text-anchor").getString("start");if("start"!==i){for(var{children:n}=e,a=n.length,s=null,o=0,h=r;h<a&&(s=n[h],!(h>r&&s.getAttribute("x").hasValue()||s.getAttribute("text-anchor").hasValue()));h++)o+=s.measureTextRecursive(t);return-1*("end"===i?o:o/2)}return 0}adjustChildCoordinates(t,e,r,i){var n=r.children[i];if("function"!=typeof n.measureText)return n;t.save(),n.setContext(t,!0);var a=n.getAttribute("x"),s=n.getAttribute("y"),o=n.getAttribute("dx"),h=n.getAttribute("dy"),u=n.getAttribute("text-anchor").getString("start");if(0===i&&"textNode"!==n.type&&(a.hasValue()||a.setValue(e.getAttribute("x").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("y").getValue("0")),o.hasValue()||o.setValue(e.getAttribute("dx").getValue("0")),h.hasValue()||h.setValue(e.getAttribute("dy").getValue("0"))),a.hasValue()){if(n.x=a.getPixels("x")+e.getAnchorDelta(t,r,i),"start"!==u){var l=n.measureTextRecursive(t);n.x+=-1*("end"===u?l:l/2)}o.hasValue()&&(n.x+=o.getPixels("x"))}else{if("start"!==u){var c=n.measureTextRecursive(t);e.x+=-1*("end"===u?c:c/2)}o.hasValue()&&(e.x+=o.getPixels("x")),n.x=e.x}return e.x=n.x+n.measureText(t),s.hasValue()?(n.y=s.getPixels("y"),h.hasValue()&&(n.y+=h.getPixels("y"))):(h.hasValue()&&(e.y+=h.getPixels("y")),n.y=e.y),e.y=n.y,n.clearContext(t),t.restore(),n}getChildBoundingBox(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);if("function"!=typeof n.getBoundingBox)return null;var a=n.getBoundingBox(t);return a?(n.children.forEach(((r,i)=>{var s=e.getChildBoundingBox(t,e,n,i);a.addBoundingBox(s)})),a):null}renderChild(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);n.render(t),n.children.forEach(((r,i)=>{e.renderChild(t,e,n,i)}))}measureTextRecursive(t){return this.children.reduce(((e,r)=>e+r.measureTextRecursive(t)),this.measureText(t))}measureText(t){var{measureCache:e}=this;if(~e)return e;var r=this.getText(),i=this.measureTargetText(t,r);return this.measureCache=i,i}measureTargetText(t,e){if(!e.length)return 0;var{parent:r}=this,i=r.getStyle("font-family").getDefinition();if(i){for(var n=this.getFontSize(),a=i.isRTL?e.split("").reverse().join(""):e,s=j(r.getAttribute("dx").getString()),o=a.length,h=0,u=0;u<o;u++)h+=(this.getGlyph(i,a,u).horizAdvX||i.horizAdvX)*n/i.fontFace.unitsPerEm,void 0===s[u]||isNaN(s[u])||(h+=s[u]);return h}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var{width:l}=t.measureText(e);return this.clearContext(t),t.restore(),l}}class zt extends jt{constructor(t,e,r){super(t,e,new.target===zt||r),this.type="tspan",this.text=this.children.length>0?"":this.getTextFromNode()}getText(){return this.text}}class Ft extends zt{constructor(){super(...arguments),this.type="textNode"}}class Ut extends Lt{constructor(){super(...arguments),this.type="svg",this.root=!1}setContext(t){var e,{document:r}=this,{screen:i,window:n}=r,a=t.canvas;if(i.setDefaults(t),a.style&&void 0!==t.font&&n&&void 0!==n.getComputedStyle){t.font=n.getComputedStyle(a).getPropertyValue("font");var s=new lt(r,"fontSize",Rt.parse(t.font).fontSize);s.hasValue()&&(r.rootEmSize=s.getPixels("y"),r.emSize=r.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var{width:o,height:h}=i.viewPort;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var u=this.getAttribute("refX"),l=this.getAttribute("refY"),c=this.getAttribute("viewBox"),g=c.hasValue()?j(c.getString()):null,f=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),p=0,d=0,v=0,y=0;g&&(p=g[0],d=g[1]),this.root||(o=this.getStyle("width").getPixels("x"),h=this.getStyle("height").getPixels("y"),"marker"===this.type&&(v=p,y=d,p=0,d=0)),i.viewPort.setCurrent(o,h),!this.node||this.parent&&"foreignObject"!==(null===(e=this.node.parentNode)||void 0===e?void 0:e.nodeName)||!this.getStyle("transform",!1,!0).hasValue()||this.getStyle("transform-origin",!1,!0).hasValue()||this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),super.setContext(t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),g&&(o=g[2],h=g[3]),r.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:i.viewPort.width,desiredWidth:o,height:i.viewPort.height,desiredHeight:h,minX:p,minY:d,refX:u.getValue(),refY:l.getValue(),clip:f,clipX:v,clipY:y}),g&&(i.viewPort.removeCurrent(),i.viewPort.setCurrent(o,h))}clearContext(t){super.clearContext(t),this.document.screen.viewPort.removeCurrent()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),n=this.getAttribute("height",!0),a=this.getAttribute("viewBox"),s=this.getAttribute("style"),o=i.getNumber(0),h=n.getNumber(0);if(r)if("string"==typeof r)this.getAttribute("preserveAspectRatio",!0).setValue(r);else{var u=this.getAttribute("preserveAspectRatio");u.hasValue()&&u.setValue(u.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(i.setValue(t),n.setValue(e),a.hasValue()||a.setValue("0 0 ".concat(o||t," ").concat(h||e)),s.hasValue()){var l=this.getStyle("width"),c=this.getStyle("height");l.hasValue()&&l.setValue("".concat(t,"px")),c.hasValue()&&c.setValue("".concat(e,"px"))}}}class Ht extends Dt{constructor(){super(...arguments),this.type="rect"}path(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),i=this.getStyle("width",!1,!0).getPixels("x"),n=this.getStyle("height",!1,!0).getPixels("y"),a=this.getAttribute("rx"),s=this.getAttribute("ry"),o=a.getPixels("x"),h=s.getPixels("y");if(a.hasValue()&&!s.hasValue()&&(h=o),s.hasValue()&&!a.hasValue()&&(o=h),o=Math.min(o,i/2),h=Math.min(h,n/2),t){var u=(Math.sqrt(2)-1)/3*4;t.beginPath(),n>0&&i>0&&(t.moveTo(e+o,r),t.lineTo(e+i-o,r),t.bezierCurveTo(e+i-o+u*o,r,e+i,r+h-u*h,e+i,r+h),t.lineTo(e+i,r+n-h),t.bezierCurveTo(e+i,r+n-h+u*h,e+i-o+u*o,r+n,e+i-o,r+n),t.lineTo(e+o,r+n),t.bezierCurveTo(e+o-u*o,r+n,e,r+n-h+u*h,e,r+n-h),t.lineTo(e,r+h),t.bezierCurveTo(e,r+h-u*h,e+o-u*o,r,e+o,r),t.closePath())}return new kt(e,r,e+i,r+n)}getMarkers(){return null}}class Xt extends Dt{constructor(){super(...arguments),this.type="circle"}path(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),i=this.getAttribute("r").getPixels();return t&&i>0&&(t.beginPath(),t.arc(e,r,i,0,2*Math.PI,!1),t.closePath()),new kt(e-i,r-i,e+i,r+i)}getMarkers(){return null}}class Yt extends Dt{constructor(){super(...arguments),this.type="ellipse"}path(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),i=this.getAttribute("ry").getPixels("y"),n=this.getAttribute("cx").getPixels("x"),a=this.getAttribute("cy").getPixels("y");return t&&r>0&&i>0&&(t.beginPath(),t.moveTo(n+r,a),t.bezierCurveTo(n+r,a+e*i,n+e*r,a+i,n,a+i),t.bezierCurveTo(n-e*r,a+i,n-r,a+e*i,n-r,a),t.bezierCurveTo(n-r,a-e*i,n-e*r,a-i,n,a-i),t.bezierCurveTo(n+e*r,a-i,n+r,a-e*i,n+r,a),t.closePath()),new kt(n-r,a-i,n+r,a+i)}getMarkers(){return null}}class qt extends Dt{constructor(){super(...arguments),this.type="line"}getPoints(){return[new gt(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new gt(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}path(t){var[{x:e,y:r},{x:i,y:n}]=this.getPoints();return t&&(t.beginPath(),t.moveTo(e,r),t.lineTo(i,n)),new kt(e,r,i,n)}getMarkers(){var[t,e]=this.getPoints(),r=t.angleTo(e);return[[t,r],[e,r]]}}class Wt extends Dt{constructor(t,e,r){super(t,e,r),this.type="polyline",this.points=[],this.points=gt.parsePath(this.getAttribute("points").getString())}path(t){var{points:e}=this,[{x:r,y:i}]=e,n=new kt(r,i);return t&&(t.beginPath(),t.moveTo(r,i)),e.forEach((e=>{var{x:r,y:i}=e;n.addPoint(r,i),t&&t.lineTo(r,i)})),n}getMarkers(){var{points:t}=this,e=t.length-1,r=[];return t.forEach(((i,n)=>{n!==e&&r.push([i,i.angleTo(t[n+1])])})),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}class Gt extends Wt{constructor(){super(...arguments),this.type="polygon"}path(t){var e=super.path(t),[{x:r,y:i}]=this.points;return t&&(t.lineTo(r,i),t.closePath()),e}}class Qt extends Ct{constructor(){super(...arguments),this.type="pattern"}createPattern(t,e,r){var i=this.getStyle("width").getPixels("x",!0),n=this.getStyle("height").getPixels("y",!0),a=new Ut(this.document,null);a.attributes.viewBox=new lt(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.width=new lt(this.document,"width","".concat(i,"px")),a.attributes.height=new lt(this.document,"height","".concat(n,"px")),a.attributes.transform=new lt(this.document,"transform",this.getAttribute("patternTransform").getValue()),a.children=this.children;var s=this.document.createCanvas(i,n),o=s.getContext("2d"),h=this.getAttribute("x"),u=this.getAttribute("y");h.hasValue()&&u.hasValue()&&o.translate(h.getPixels("x",!0),u.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:Reflect.deleteProperty(this.styles,"fill-opacity");for(var l=-1;l<=1;l++)for(var c=-1;c<=1;c++)o.save(),a.attributes.x=new lt(this.document,"x",l*s.width),a.attributes.y=new lt(this.document,"y",c*s.height),a.render(o),o.restore();return t.createPattern(s,"repeat")}}class $t extends Ct{constructor(){super(...arguments),this.type="marker"}render(t,e,r){if(e){var{x:i,y:n}=e,a=this.getAttribute("orient").getString("auto"),s=this.getAttribute("markerUnits").getString("strokeWidth");t.translate(i,n),"auto"===a&&t.rotate(r),"strokeWidth"===s&&t.scale(t.lineWidth,t.lineWidth),t.save();var o=new Ut(this.document,null);o.type=this.type,o.attributes.viewBox=new lt(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.refX=new lt(this.document,"refX",this.getAttribute("refX").getValue()),o.attributes.refY=new lt(this.document,"refY",this.getAttribute("refY").getValue()),o.attributes.width=new lt(this.document,"width",this.getAttribute("markerWidth").getValue()),o.attributes.height=new lt(this.document,"height",this.getAttribute("markerHeight").getValue()),o.attributes.overflow=new lt(this.document,"overflow",this.getAttribute("overflow").getValue()),o.attributes.fill=new lt(this.document,"fill",this.getAttribute("fill").getColor("black")),o.attributes.stroke=new lt(this.document,"stroke",this.getAttribute("stroke").getValue("none")),o.children=this.children,o.render(t),t.restore(),"strokeWidth"===s&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===a&&t.rotate(-r),t.translate(-i,-n)}}}class Zt extends Ct{constructor(){super(...arguments),this.type="defs"}render(){}}class Kt extends Lt{constructor(){super(...arguments),this.type="g"}getBoundingBox(t){var e=new kt;return this.children.forEach((r=>{e.addBoundingBox(r.getBoundingBox(t))})),e}}class Jt extends Ct{constructor(t,e,r){super(t,e,r),this.attributesToInherit=["gradientUnits"],this.stops=[];var{stops:i,children:n}=this;n.forEach((t=>{"stop"===t.type&&i.push(t)}))}getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}createGradient(t,e,r){var i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var{stops:n}=i,a=this.getGradient(t,e);if(!a)return this.addParentOpacity(r,n[n.length-1].color);if(n.forEach((t=>{a.addColorStop(t.offset,this.addParentOpacity(r,t.color))})),this.getAttribute("gradientTransform").hasValue()){var{document:s}=this,{MAX_VIRTUAL_PIXELS:o,viewPort:h}=s.screen,[u]=h.viewPorts,l=new Ht(s,null);l.attributes.x=new lt(s,"x",-o/3),l.attributes.y=new lt(s,"y",-o/3),l.attributes.width=new lt(s,"width",o),l.attributes.height=new lt(s,"height",o);var c=new Kt(s,null);c.attributes.transform=new lt(s,"transform",this.getAttribute("gradientTransform").getValue()),c.children=[l];var g=new Ut(s,null);g.attributes.x=new lt(s,"x",0),g.attributes.y=new lt(s,"y",0),g.attributes.width=new lt(s,"width",u.width),g.attributes.height=new lt(s,"height",u.height),g.children=[c];var f=s.createCanvas(u.width,u.height),p=f.getContext("2d");return p.fillStyle=a,g.render(p),p.createPattern(f,"no-repeat")}return a}inheritStopContainer(t){this.attributesToInherit.forEach((e=>{!this.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&this.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())}))}addParentOpacity(t,e){return t.hasValue()?new lt(this.document,"color",e).addOpacity(t).getColor():e}}class te extends Jt{constructor(t,e,r){super(t,e,r),this.type="linearGradient",this.attributesToInherit.push("x1","y1","x2","y2")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=r?e.getBoundingBox(t):null;if(r&&!i)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var n=r?i.x+i.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),a=r?i.y+i.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),s=r?i.x+i.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),o=r?i.y+i.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return n===s&&a===o?null:t.createLinearGradient(n,a,s,o)}}class ee extends Jt{constructor(t,e,r){super(t,e,r),this.type="radialGradient",this.attributesToInherit.push("cx","cy","r","fx","fy","fr")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=e.getBoundingBox(t);if(r&&!i)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var n=r?i.x+i.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),a=r?i.y+i.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),s=n,o=a;this.getAttribute("fx").hasValue()&&(s=r?i.x+i.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(o=r?i.y+i.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var h=r?(i.width+i.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),u=this.getAttribute("fr").getPixels();return t.createRadialGradient(s,o,u,n,a,h)}}class re extends Ct{constructor(t,e,r){super(t,e,r),this.type="stop";var i=Math.max(0,Math.min(1,this.getAttribute("offset").getNumber())),n=this.getStyle("stop-opacity"),a=this.getStyle("stop-color",!0);""===a.getString()&&a.setValue("#000"),n.hasValue()&&(a=a.addOpacity(n)),this.offset=i,this.color=a.getColor()}}class ie extends Ct{constructor(t,e,r){super(t,e,r),this.type="animate",this.duration=0,this.initialValue=null,this.initialUnits="",this.removed=!1,this.frozen=!1,t.screen.animations.push(this),this.begin=this.getAttribute("begin").getMilliseconds(),this.maxDuration=this.begin+this.getAttribute("dur").getMilliseconds(),this.from=this.getAttribute("from"),this.to=this.getAttribute("to"),this.values=new lt(t,"values",null);var i=this.getAttribute("values");i.hasValue()&&this.values.setValue(i.getString().split(";"))}getProperty(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}calcValue(){var{initialUnits:t}=this,{progress:e,from:r,to:i}=this.getProgress(),n=r.getNumber()+(i.getNumber()-r.getNumber())*e;return"%"===t&&(n*=100),"".concat(n).concat(t)}update(t){var{parent:e}=this,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var i=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==i||this.frozen){if("remove"===i&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var n=!1;if(this.begin<this.duration){var a=this.calcValue(),s=this.getAttribute("type");if(s.hasValue()){var o=s.getString();a="".concat(o,"(").concat(a,")")}r.setValue(a),n=!0}return n}getProgress(){var{document:t,values:e}=this,r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var i=r.progress*(e.getValue().length-1),n=Math.floor(i),a=Math.ceil(i);r.from=new lt(t,"from",parseFloat(e.getValue()[n])),r.to=new lt(t,"to",parseFloat(e.getValue()[a])),r.progress=(i-n)/(a-n)}else r.from=this.from,r.to=this.to;return r}}class ne extends ie{constructor(){super(...arguments),this.type="animateColor"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=new h(e.getColor()),n=new h(r.getColor());if(i.ok&&n.ok){var a=i.r+(n.r-i.r)*t,s=i.g+(n.g-i.g)*t,o=i.b+(n.b-i.b)*t;return"rgb(".concat(Math.floor(a),", ").concat(Math.floor(s),", ").concat(Math.floor(o),")")}return this.getAttribute("from").getColor()}}class ae extends ie{constructor(){super(...arguments),this.type="animateTransform"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=j(e.getString()),n=j(r.getString()),a=i.map(((e,r)=>e+(n[r]-e)*t)).join(" ");return a}}class se extends Ct{constructor(t,e,r){super(t,e,r),this.type="font",this.glyphs={},this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber();var{definitions:i}=t,{children:n}=this;for(var a of n)switch(a.type){case"font-face":this.fontFace=a;var s=a.getStyle("font-family");s.hasValue()&&(i[s.getString()]=this);break;case"missing-glyph":this.missingGlyph=a;break;case"glyph":var o=a;o.arabicForm?(this.isRTL=!0,this.isArabic=!0,void 0===this.glyphs[o.unicode]&&(this.glyphs[o.unicode]={}),this.glyphs[o.unicode][o.arabicForm]=o):this.glyphs[o.unicode]=o}}render(){}}class oe extends Ct{constructor(t,e,r){super(t,e,r),this.type="font-face",this.ascent=this.getAttribute("ascent").getNumber(),this.descent=this.getAttribute("descent").getNumber(),this.unitsPerEm=this.getAttribute("units-per-em").getNumber()}}class he extends Dt{constructor(){super(...arguments),this.type="missing-glyph",this.horizAdvX=0}}class ue extends jt{constructor(){super(...arguments),this.type="tref"}getText(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}class le extends jt{constructor(t,e,r){super(t,e,r),this.type="a";var{childNodes:i}=e,n=i[0],a=i.length>0&&Array.from(i).every((t=>3===t.nodeType));this.hasText=a,this.text=a?this.getTextFromNode(n):""}getText(){return this.text}renderChildren(t){if(this.hasText){super.renderChildren(t);var{document:e,x:r,y:i}=this,{mouse:n}=e.screen,a=new lt(e,"fontSize",Rt.parse(e.ctx.font).fontSize);n.isWorking()&&n.checkBoundingBox(this,new kt(r,i-a.getPixels("y"),r+this.measureText(t),i))}else if(this.children.length>0){var s=new Kt(this.document,null);s.children=this.children,s.parent=this,s.render(t)}}onClick(){var{window:t}=this.document;t&&t.open(this.getHrefAttribute().getString())}onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}function ce(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function ge(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ce(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ce(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}class fe extends jt{constructor(t,e,r){super(t,e,r),this.type="textPath",this.textWidth=0,this.textHeight=0,this.pathLength=-1,this.glyphInfo=null,this.letterSpacingCache=[],this.measuresCache=new Map([["",0]]);var i=this.getHrefAttribute().getDefinition();this.text=this.getTextFromNode(),this.dataArray=this.parsePathData(i)}getText(){return this.text}path(t){var{dataArray:e}=this;t&&t.beginPath(),e.forEach((e=>{var{type:r,points:i}=e;switch(r){case It.LINE_TO:t&&t.lineTo(i[0],i[1]);break;case It.MOVE_TO:t&&t.moveTo(i[0],i[1]);break;case It.CURVE_TO:t&&t.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case It.QUAD_TO:t&&t.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case It.ARC:var[n,a,s,o,h,u,l,c]=i,g=s>o?s:o,f=s>o?1:s/o,p=s>o?o/s:1;t&&(t.translate(n,a),t.rotate(l),t.scale(f,p),t.arc(0,0,g,h,h+u,Boolean(1-c)),t.scale(1/f,1/p),t.rotate(-l),t.translate(-n,-a));break;case It.CLOSE_PATH:t&&t.closePath()}}))}renderChildren(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),{glyphInfo:i}=this,n=t.fillStyle;"underline"===e&&t.beginPath(),i.forEach(((i,n)=>{var{p0:a,p1:s,rotation:o,text:h}=i;t.save(),t.translate(a.x,a.y),t.rotate(o),t.fillStyle&&t.fillText(h,0,0),t.strokeStyle&&t.strokeText(h,0,0),t.restore(),"underline"===e&&(0===n&&t.moveTo(a.x,a.y+r/8),t.lineTo(s.x,s.y+r/5))})),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=n,t.stroke(),t.closePath()),t.restore()}getLetterSpacingAt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}findSegmentToFitChar(t,e,r,i,n,a,s,o,h){var u=a,l=this.measureText(t,o);" "===o&&"justify"===e&&r<i&&(l+=(i-r)/n),h>-1&&(u+=this.getLetterSpacingAt(h));var c=this.textHeight/20,g=this.getEquidistantPointOnPath(u,c,0),f=this.getEquidistantPointOnPath(u+l,c,0),p={p0:g,p1:f},d=g&&f?Math.atan2(f.y-g.y,f.x-g.x):0;if(s){var v=Math.cos(Math.PI/2+d)*s,y=Math.cos(-d)*s;p.p0=ge(ge({},g),{},{x:g.x+v,y:g.y+y}),p.p1=ge(ge({},f),{},{x:f.x+v,y:f.y+y})}return{offset:u+=l,segment:p,rotation:d}}measureText(t,e){var{measuresCache:r}=this,i=e||this.getText();if(r.has(i))return r.get(i);var n=this.measureTargetText(t,i);return r.set(i,n),n}setTextData(t){if(!this.glyphInfo){var e=this.getText(),r=e.split(""),i=e.split(" ").length-1,n=this.parent.getAttribute("dx").split().map((t=>t.getPixels("x"))),a=this.parent.getAttribute("dy").getPixels("y"),s=this.parent.getStyle("text-anchor").getString("start"),o=this.getStyle("letter-spacing"),h=this.parent.getStyle("letter-spacing"),u=0;o.hasValue()&&"inherit"!==o.getValue()?o.hasValue()&&"initial"!==o.getValue()&&"unset"!==o.getValue()&&(u=o.getPixels()):u=h.getPixels();var l=[],c=e.length;this.letterSpacingCache=l;for(var g=0;g<c;g++)l.push(void 0!==n[g]?n[g]:u);var f=l.reduce(((t,e,r)=>0===r?0:t+e||0),0),p=this.measureText(t),d=Math.max(p+f,0);this.textWidth=p,this.textHeight=this.getFontSize(),this.glyphInfo=[];var v=this.getPathLength(),y=this.getStyle("startOffset").getNumber(0)*v,m=0;"middle"!==s&&"center"!==s||(m=-d/2),"end"!==s&&"right"!==s||(m=-d),m+=y,r.forEach(((e,n)=>{var{offset:o,segment:h,rotation:u}=this.findSegmentToFitChar(t,s,d,v,i,m,a,e,n);m=o,h.p0&&h.p1&&this.glyphInfo.push({text:r[n],p0:h.p0,p1:h.p1,rotation:u})}))}}parsePathData(t){if(this.pathLength=-1,!t)return[];var e=[],{pathParser:r}=t;for(r.reset();!r.isEnd();){var{current:i}=r,n=i?i.x:0,a=i?i.y:0,s=r.next(),o=s.type,h=[];switch(s.type){case It.MOVE_TO:this.pathM(r,h);break;case It.LINE_TO:o=this.pathL(r,h);break;case It.HORIZ_LINE_TO:o=this.pathH(r,h);break;case It.VERT_LINE_TO:o=this.pathV(r,h);break;case It.CURVE_TO:this.pathC(r,h);break;case It.SMOOTH_CURVE_TO:o=this.pathS(r,h);break;case It.QUAD_TO:this.pathQ(r,h);break;case It.SMOOTH_QUAD_TO:o=this.pathT(r,h);break;case It.ARC:h=this.pathA(r);break;case It.CLOSE_PATH:Dt.pathZ(r)}s.type!==It.CLOSE_PATH?e.push({type:o,points:h,start:{x:n,y:a},pathLength:this.calcLength(n,a,o,h)}):e.push({type:It.CLOSE_PATH,points:[],pathLength:0})}return e}pathM(t,e){var{x:r,y:i}=Dt.pathM(t).point;e.push(r,i)}pathL(t,e){var{x:r,y:i}=Dt.pathL(t).point;return e.push(r,i),It.LINE_TO}pathH(t,e){var{x:r,y:i}=Dt.pathH(t).point;return e.push(r,i),It.LINE_TO}pathV(t,e){var{x:r,y:i}=Dt.pathV(t).point;return e.push(r,i),It.LINE_TO}pathC(t,e){var{point:r,controlPoint:i,currentPoint:n}=Dt.pathC(t);e.push(r.x,r.y,i.x,i.y,n.x,n.y)}pathS(t,e){var{point:r,controlPoint:i,currentPoint:n}=Dt.pathS(t);return e.push(r.x,r.y,i.x,i.y,n.x,n.y),It.CURVE_TO}pathQ(t,e){var{controlPoint:r,currentPoint:i}=Dt.pathQ(t);e.push(r.x,r.y,i.x,i.y)}pathT(t,e){var{controlPoint:r,currentPoint:i}=Dt.pathT(t);return e.push(r.x,r.y,i.x,i.y),It.QUAD_TO}pathA(t){var{rX:e,rY:r,sweepFlag:i,xAxisRotation:n,centp:a,a1:s,ad:o}=Dt.pathA(t);return 0===i&&o>0&&(o-=2*Math.PI),1===i&&o<0&&(o+=2*Math.PI),[a.x,a.y,e,r,s,o,n,i]}calcLength(t,e,r,i){var n=0,a=null,s=null,o=0;switch(r){case It.LINE_TO:return this.getLineLength(t,e,i[0],i[1]);case It.CURVE_TO:for(n=0,a=this.getPointOnCubicBezier(0,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),o=.01;o<=1;o+=.01)s=this.getPointOnCubicBezier(o,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case It.QUAD_TO:for(n=0,a=this.getPointOnQuadraticBezier(0,t,e,i[0],i[1],i[2],i[3]),o=.01;o<=1;o+=.01)s=this.getPointOnQuadraticBezier(o,t,e,i[0],i[1],i[2],i[3]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case It.ARC:n=0;var h=i[4],u=i[5],l=i[4]+u,c=Math.PI/180;if(Math.abs(h-l)<c&&(c=Math.abs(h-l)),a=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],h,0),u<0)for(o=h-c;o>l;o-=c)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(o=h+c;o<l;o+=c)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],l,0),n+this.getLineLength(a.x,a.y,s.x,s.y)}return 0}getPointOnLine(t,e,r,i,n){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,o=(n-r)/(i-e+J),h=Math.sqrt(t*t/(1+o*o));i<e&&(h*=-1);var u=o*h,l=null;if(i===e)l={x:a,y:s+u};else if((s-r)/(a-e+J)===o)l={x:a+h,y:s+u};else{var c,g,f=this.getLineLength(e,r,i,n);if(f<J)return null;var p=(a-e)*(i-e)+(s-r)*(n-r);c=e+(p/=f*f)*(i-e),g=r+p*(n-r);var d=this.getLineLength(a,s,c,g),v=Math.sqrt(t*t-d*d);h=Math.sqrt(v*v/(1+o*o)),i<e&&(h*=-1),l={x:c+h,y:g+(u=o*h)}}return l}getPointOnPath(t){var e=this.getPathLength(),r=0,i=null;if(t<-5e-5||t-5e-5>e)return null;var{dataArray:n}=this;for(var a of n){if(!a||!(a.pathLength<5e-5||r+a.pathLength+5e-5<t)){var s=t-r,o=0;switch(a.type){case It.LINE_TO:i=this.getPointOnLine(s,a.start.x,a.start.y,a.points[0],a.points[1],a.start.x,a.start.y);break;case It.ARC:var h=a.points[4],u=a.points[5],l=a.points[4]+u;if(o=h+s/a.pathLength*u,u<0&&o<l||u>=0&&o>l)break;i=this.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case It.CURVE_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case It.QUAD_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}if(i)return i;break}r+=a.pathLength}return null}getLineLength(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))}getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce(((t,e)=>e.pathLength>0?t+e.pathLength:t),0)),this.pathLength}getPointOnCubicBezier(t,e,r,i,n,a,s,o,h){return{x:o*it(t)+a*nt(t)+i*at(t)+e*st(t),y:h*it(t)+s*nt(t)+n*at(t)+r*st(t)}}getPointOnQuadraticBezier(t,e,r,i,n,a,s){return{x:a*ot(t)+i*ht(t)+e*ut(t),y:s*ot(t)+n*ht(t)+r*ut(t)}}getPointOnEllipticalArc(t,e,r,i,n,a){var s=Math.cos(a),o=Math.sin(a),h=r*Math.cos(n),u=i*Math.sin(n);return{x:t+(h*s-u*o),y:e+(h*o+u*s)}}buildEquidistantCache(t,e){var r=this.getPathLength(),i=e||.25,n=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==n||this.equidistantCache.precision!==i){this.equidistantCache={step:n,precision:i,points:[]};for(var a=0,s=0;s<=r;s+=i){var o=this.getPointOnPath(s),h=this.getPointOnPath(s+i);o&&h&&(a+=this.getLineLength(o.x,o.y,h.x,h.y))>=n&&(this.equidistantCache.points.push({x:o.x,y:o.y,distance:s}),a-=n)}}}getEquidistantPointOnPath(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var i=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[i]||null}}var pe=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;class de extends Lt{constructor(t,e,r){super(t,e,r),this.type="image",this.loaded=!1;var i=this.getHrefAttribute().getString();if(i){var n=i.endsWith(".svg")||/^\s*data:image\/svg\+xml/i.test(i);t.images.push(this),n?this.loadSvg(i):this.loadImage(i),this.isSvg=n}}loadImage(t){var e=this;return a((function*(){try{var r=yield e.document.createImage(t);e.image=r}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}loadSvg(t){var e=this;return a((function*(){var r=pe.exec(t);if(r){var i=r[5];"base64"===r[4]?e.image=atob(i):e.image=decodeURIComponent(i)}else try{var n=yield e.document.fetch(t),a=yield n.text();e.image=a}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}renderChildren(t){var{document:e,image:r,loaded:i}=this,n=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),s=this.getStyle("width").getPixels("x"),o=this.getStyle("height").getPixels("y");if(i&&r&&s&&o){if(t.save(),t.translate(n,a),this.isSvg){var h=e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:0,offsetY:0,scaleWidth:s,scaleHeight:o});h.document.documentElement.parent=this,h.render()}else{var u=this.image;e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:s,desiredWidth:u.width,height:o,desiredHeight:u.height}),this.loaded&&(void 0===u.complete||u.complete)&&t.drawImage(u,0,0)}t.restore()}}getBoundingBox(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),i=this.getStyle("height").getPixels("y");return new kt(t,e,t+r,e+i)}}class ve extends Lt{constructor(){super(...arguments),this.type="symbol"}render(t){}}class ye{constructor(t){this.document=t,this.loaded=!1,t.fonts.push(this)}load(t,e){var r=this;return a((function*(){try{var{document:i}=r,n=(yield i.canvg.parser.load(e)).getElementsByTagName("font");Array.from(n).forEach((e=>{var r=i.createElement(e);i.definitions[t]=r}))}catch(t){console.error('Error while loading font "'.concat(e,'":'),t)}r.loaded=!0}))()}}class me extends Ct{constructor(t,e,r){super(t,e,r),this.type="style";var i=L(Array.from(e.childNodes).map((t=>t.textContent)).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,""));i.split("}").forEach((e=>{var r=e.trim();if(r){var i=r.split("{"),n=i[0].split(","),a=i[1].split(";");n.forEach((e=>{var r=e.trim();if(r){var i=t.styles[r]||{};if(a.forEach((e=>{var r=e.indexOf(":"),n=e.substr(0,r).trim(),a=e.substr(r+1,e.length-r).trim();n&&a&&(i[n]=new lt(t,n,a))})),t.styles[r]=i,t.stylesSpecificity[r]=K(r),"@font-face"===r){var n=i["font-family"].getString().replace(/"|'/g,"");i.src.getString().split(",").forEach((e=>{if(e.indexOf('format("svg")')>0){var r=U(e);r&&new ye(t).load(n,r)}}))}}}))}}))}}me.parseExternalUrl=U;class xe extends Lt{constructor(){super(...arguments),this.type="use"}setContext(t){super.setContext(t);var e=this.getAttribute("x"),r=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),r.hasValue()&&t.translate(0,r.getPixels("y"))}path(t){var{element:e}=this;e&&e.path(t)}renderChildren(t){var{document:e,element:r}=this;if(r){var i=r;if("symbol"===r.type&&((i=new Ut(e,null)).attributes.viewBox=new lt(e,"viewBox",r.getAttribute("viewBox").getString()),i.attributes.preserveAspectRatio=new lt(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),i.attributes.overflow=new lt(e,"overflow",r.getAttribute("overflow").getString()),i.children=r.children,r.styles.opacity=new lt(e,"opacity",this.calculateOpacity())),"svg"===i.type){var n=this.getStyle("width",!1,!0),a=this.getStyle("height",!1,!0);n.hasValue()&&(i.attributes.width=new lt(e,"width",n.getString())),a.hasValue()&&(i.attributes.height=new lt(e,"height",a.getString()))}var s=i.parent;i.parent=this,i.render(t),i.parent=s}}getBoundingBox(t){var{element:e}=this;return e?e.getBoundingBox(t):null}elementTransform(){var{document:t,element:e}=this;return Et.fromElement(t,e)}get element(){return this.cachedElement||(this.cachedElement=this.getHrefAttribute().getDefinition()),this.cachedElement}}function be(t,e,r,i,n,a){return t[r*i*4+4*e+a]}function Se(t,e,r,i,n,a,s){t[r*i*4+4*e+a]=s}function we(t,e,r){return t[e]*r}function Te(t,e,r,i){return e+Math.cos(t)*r+Math.sin(t)*i}class Ae extends Ct{constructor(t,e,r){super(t,e,r),this.type="feColorMatrix";var i=j(this.getAttribute("values").getString());switch(this.getAttribute("type").getString("matrix")){case"saturate":var n=i[0];i=[.213+.787*n,.715-.715*n,.072-.072*n,0,0,.213-.213*n,.715+.285*n,.072-.072*n,0,0,.213-.213*n,.715-.715*n,.072+.928*n,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var a=i[0]*Math.PI/180;i=[Te(a,.213,.787,-.213),Te(a,.715,-.715,-.715),Te(a,.072,-.072,.928),0,0,Te(a,.213,-.213,.143),Te(a,.715,.285,.14),Te(a,.072,-.072,-.283),0,0,Te(a,.213,-.213,-.787),Te(a,.715,-.715,.715),Te(a,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}this.matrix=i,this.includeOpacity=this.getAttribute("includeOpacity").hasValue()}apply(t,e,r,i,n){for(var{includeOpacity:a,matrix:s}=this,o=t.getImageData(0,0,i,n),h=0;h<n;h++)for(var u=0;u<i;u++){var l=be(o.data,u,h,i,0,0),c=be(o.data,u,h,i,0,1),g=be(o.data,u,h,i,0,2),f=be(o.data,u,h,i,0,3),p=we(s,0,l)+we(s,1,c)+we(s,2,g)+we(s,3,f)+we(s,4,1),d=we(s,5,l)+we(s,6,c)+we(s,7,g)+we(s,8,f)+we(s,9,1),v=we(s,10,l)+we(s,11,c)+we(s,12,g)+we(s,13,f)+we(s,14,1),y=we(s,15,l)+we(s,16,c)+we(s,17,g)+we(s,18,f)+we(s,19,1);a&&(p=0,d=0,v=0,y*=f/255),Se(o.data,u,h,i,0,0,p),Se(o.data,u,h,i,0,1,d),Se(o.data,u,h,i,0,2,v),Se(o.data,u,h,i,0,3,y)}t.clearRect(0,0,i,n),t.putImageData(o,0,0)}}class Oe extends Ct{constructor(){super(...arguments),this.type="mask"}apply(t,e){var{document:r}=this,i=this.getAttribute("x").getPixels("x"),n=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(!a&&!s){var o=new kt;this.children.forEach((e=>{o.addBoundingBox(e.getBoundingBox(t))})),i=Math.floor(o.x1),n=Math.floor(o.y1),a=Math.floor(o.width),s=Math.floor(o.height)}var h=this.removeStyles(e,Oe.ignoreStyles),u=r.createCanvas(i+a,n+s),l=u.getContext("2d");r.screen.setDefaults(l),this.renderChildren(l),new Ae(r,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(l,0,0,i+a,n+s);var c=r.createCanvas(i+a,n+s),g=c.getContext("2d");r.screen.setDefaults(g),e.render(g),g.globalCompositeOperation="destination-in",g.fillStyle=l.createPattern(u,"no-repeat"),g.fillRect(0,0,i+a,n+s),t.fillStyle=g.createPattern(c,"no-repeat"),t.fillRect(0,0,i+a,n+s),this.restoreStyles(e,h)}render(t){}}Oe.ignoreStyles=["mask","transform","clip-path"];var Pe=()=>{};class Ee extends Ct{constructor(){super(...arguments),this.type="clipPath"}apply(t){var{document:e}=this,r=Reflect.getPrototypeOf(t),{beginPath:i,closePath:n}=t;r&&(r.beginPath=Pe,r.closePath=Pe),Reflect.apply(i,t,[]),this.children.forEach((i=>{if(void 0!==i.path){var a=void 0!==i.elementTransform?i.elementTransform():null;a||(a=Et.fromElement(e,i)),a&&a.apply(t),i.path(t),r&&(r.closePath=n),a&&a.unapply(t)}})),Reflect.apply(n,t,[]),t.clip(),r&&(r.beginPath=i,r.closePath=n)}render(t){}}class Ce extends Ct{constructor(){super(...arguments),this.type="filter"}apply(t,e){var{document:r,children:i}=this,n=e.getBoundingBox(t);if(n){var a=0,s=0;i.forEach((t=>{var e=t.extraFilterDistance||0;a=Math.max(a,e),s=Math.max(s,e)}));var o=Math.floor(n.width),h=Math.floor(n.height),u=o+2*a,l=h+2*s;if(!(u<1||l<1)){var c=Math.floor(n.x),g=Math.floor(n.y),f=this.removeStyles(e,Ce.ignoreStyles),p=r.createCanvas(u,l),d=p.getContext("2d");r.screen.setDefaults(d),d.translate(-c+a,-g+s),e.render(d),i.forEach((t=>{"function"==typeof t.apply&&t.apply(d,0,0,u,l)})),t.drawImage(p,0,0,u,l,c-a,g-s,u,l),this.restoreStyles(e,f)}}}render(t){}}Ce.ignoreStyles=["filter","transform","clip-path"];class Me extends Ct{constructor(t,e,r){super(t,e,r),this.type="feDropShadow",this.addStylesFromStyleDefinition()}apply(t,e,r,i,n){}}class Ne extends Ct{constructor(){super(...arguments),this.type="feMorphology"}apply(t,e,r,i,n){}}class _e extends Ct{constructor(){super(...arguments),this.type="feComposite"}apply(t,e,r,i,n){}}class Ve extends Ct{constructor(t,e,r){super(t,e,r),this.type="feGaussianBlur",this.blurRadius=Math.floor(this.getAttribute("stdDeviation").getNumber()),this.extraFilterDistance=this.blurRadius}apply(t,e,r,i,n){var{document:a,blurRadius:s}=this,o=a.window?a.window.document.body:null,h=t.canvas;h.id=a.getUniqueId(),o&&(h.style.display="none",o.appendChild(h)),V(h,e,r,i,n,s),o&&o.removeChild(h)}}class Re extends Ct{constructor(){super(...arguments),this.type="title"}}class ke extends Ct{constructor(){super(...arguments),this.type="desc"}}var Ie={svg:Ut,rect:Ht,circle:Xt,ellipse:Yt,line:qt,polyline:Wt,polygon:Gt,path:Dt,pattern:Qt,marker:$t,defs:Zt,linearGradient:te,radialGradient:ee,stop:re,animate:ie,animateColor:ne,animateTransform:ae,font:se,"font-face":oe,"missing-glyph":he,glyph:Bt,text:jt,tspan:zt,tref:ue,a:le,textPath:fe,image:de,g:Kt,symbol:ve,style:me,use:xe,mask:Oe,clipPath:Ee,filter:Ce,feDropShadow:Me,feMorphology:Ne,feComposite:_e,feColorMatrix:Ae,feGaussianBlur:Ve,title:Re,desc:ke};function Le(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function De(){return De=a((function*(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=document.createElement("img");return e&&(r.crossOrigin="Anonymous"),new k(((e,i)=>{r.onload=()=>{e(r)},r.onerror=(t,e,r,n,a)=>{i(a)},r.src=t}))})),De.apply(this,arguments)}class Be{constructor(t){var{rootEmSize:e=12,emSize:r=12,createCanvas:i=Be.createCanvas,createImage:n=Be.createImage,anonymousCrossOrigin:a}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.canvg=t,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=t.screen,this.rootEmSize=e,this.emSize=r,this.createCanvas=i,this.createImage=this.bindCreateImage(n,a),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}bindCreateImage(t,e){return"boolean"==typeof e?(r,i)=>t(r,"boolean"==typeof i?i:e):t}get window(){return this.screen.window}get fetch(){return this.screen.fetch}get ctx(){return this.screen.ctx}get emSize(){var{emSizeStack:t}=this;return t[t.length-1]}set emSize(t){var{emSizeStack:e}=this;e.push(t)}popEmSize(){var{emSizeStack:t}=this;t.pop()}getUniqueId(){return"canvg".concat(++this.uniqueId)}isImagesLoaded(){return this.images.every((t=>t.loaded))}isFontsLoaded(){return this.fonts.every((t=>t.loaded))}createDocumentElement(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}createElement(t){var e=t.nodeName.replace(/^[^:]+:/,""),r=Be.elementTypes[e];return void 0!==r?new r(this,t):new Mt(this,t)}createTextNode(t){return new Ft(this,t)}setViewBox(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Le(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Le(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({document:this},t))}}function je(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function ze(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?je(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):je(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}Be.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},Be.createImage=function(t){return De.apply(this,arguments)},Be.elementTypes=Ie;class Fe{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.parser=new xt(r),this.screen=new vt(t,r),this.options=r;var i=new Be(this,r),n=i.createDocumentElement(e);this.document=i,this.documentElement=n}static from(t,e){var r=arguments;return a((function*(){var i=r.length>2&&void 0!==r[2]?r[2]:{},n=new xt(i),a=yield n.parse(e);return new Fe(t,a,i)}))()}static fromString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new xt(r).parseFromString(e);return new Fe(t,i,r)}fork(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Fe.from(t,e,ze(ze({},this.options),r))}forkString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Fe.fromString(t,e,ze(ze({},this.options),r))}ready(){return this.screen.ready()}isReady(){return this.screen.isReady()}render(){var t=arguments,e=this;return a((function*(){var r=t.length>0&&void 0!==t[0]?t[0]:{};e.start(ze({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},r)),yield e.ready(),e.stop()}))()}start(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{documentElement:e,screen:r,options:i}=this;r.start(e,ze(ze({enableRedraw:!0},i),t))}stop(){this.screen.stop()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}const Ue=Fe}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxLQUNsd0NDLEVBQVcsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUE0RnZnQyxTQUFTQyxFQUFrQkMsRUFBUUMsRUFBTUMsRUFBTUMsRUFBT0MsRUFBUUMsR0FDNUQsS0FBSTNlLE1BQU0yZSxJQUFXQSxFQUFTLEdBQTlCLENBSUFBLEdBQVUsRUFDVixJQUFJQyxFQWxDTixTQUFnQ04sRUFBUUMsRUFBTUMsRUFBTUMsRUFBT0MsR0FLekQsR0FKc0IsaUJBQVhKLElBQ1RBLEVBQVNqMUIsU0FBU3cxQixl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RUFBZSxPQUNmL29CLEVBQ0FwOEIsUUFBU2dyRCxHQUNQdHpELEtBQ0owa0MsRUFBT2xyQixNQUFNaTBDLEVBQWlCc0YsR0FBY0EsR0FBYyxDQUN4RDNtQixjQUFjLEdBQ2JrbkIsR0FBY2hyRCxJQU9uQnlILE9BQ0UvUCxLQUFLMGtDLE9BQU8zMEIsT0FVZG94QyxPQUFPOW1CLEdBQ0wsSUFBSUMsRUFBU3o1QixVQUFVbkQsT0FBUyxRQUFzQlQsSUFBakI0RCxVQUFVLEdBQW1CQSxVQUFVLEdBQUt3NUIsRUFDN0UrbUIsRUFBc0J2Z0QsVUFBVW5ELE9BQVMsUUFBc0JULElBQWpCNEQsVUFBVSxJQUFtQkEsVUFBVSxHQUN6RmIsS0FBS3l0RCxnQkFBZ0J0TSxPQUFPOW1CLEVBQU9DLEVBQVE4bUIsSUFLL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3QtYS1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL3JhZi9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL3JnYmNvbG9yL2luZGV4LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwbGlicmUtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvc3ZnLXBhdGhkYXRhL2xpYi9TVkdQYXRoRGF0YS5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGxpYnJlLWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9zdGFja2JsdXItY2FudmFzL2Rpc3Qvc3RhY2tibHVyLWVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBsaWJyZS1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY2FudmcvbGliL2luZGV4LmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwidmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbi8vIGBBc3NlcnQ6IElzQ29uc3RydWN0b3IoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyB8fCBpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmIChpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoO0lTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiAgbGVmdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4gIHJpZ2h0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSwgbm8tdGhyb3ctbGl0ZXJhbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgdmFyIHJlZ2V4cCA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiBmYWxzZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgcmVkZWZpbmUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCc7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9pcGFkfGlwaG9uZXxpcG9kL2kudGVzdCh1c2VyQWdlbnQpICYmIGdsb2JhbC5QZWJibGUgIT09IHVuZGVmaW5lZDtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBhZHxpcGhvbmV8aXBvZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGVubyA9IGdsb2JhbC5EZW5vO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSA8IDQgPyAxIDogbWF0Y2hbMF0gKyBtYXRjaFsxXTtcbn0gZWxzZSBpZiAodXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uICYmICt2ZXJzaW9uO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIG1ldGhvZHNbMF0pO1xuICAgIHJlZGVmaW5lKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhQ2FsbGFibGUoZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhcyhGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoYXJndW1lbnQpID8gYXJndW1lbnQgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pIDogZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGdldE1ldGhvZChpdCwgSVRFUkFUT1IpXG4gICAgfHwgZ2V0TWV0aG9kKGl0LCAnQEBpdGVyYXRvcicpXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChpdGVyYXRvck1ldGhvZC5jYWxsKGFyZ3VtZW50KSk7XG4gIHRocm93IFR5cGVFcnJvcihTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbn07XG4iLCJ2YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcblxuLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoViwgUCkge1xuICB2YXIgZnVuYyA9IFZbUF07XG4gIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7XG59O1xuIiwidmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHJlcGxhY2UgPSAnJy5yZXBsYWNlO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBgR2V0U3Vic3RpdHV0aW9uYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQIHx8IHNoYXJlZC5zdGF0ZSkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKHdtaGFzLmNhbGwoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChvYmplY3RIYXMoaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGBpc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSBjb25zdHJ1Y3RvclJlZ0V4cC5leGVjO1xudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAuZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KE9iamVjdCwgZW1wdHksIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXRcbiAgfSByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMuY2FsbChjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xufTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGVkO1xuICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfSlcbiAgICB8fCBjYWxsZWQ7XG59KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IGlzQ2FsbGFibGUoZGV0ZWN0aW9uKSA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQsIDEgKyBBU19FTlRSSUVTICsgSU5URVJSVVBURUQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSwgaXRlckZuKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBpbm5lclJlc3VsdC5jYWxsKGl0ZXJhdG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbm5lckVycm9yID0gdHJ1ZTtcbiAgICBpbm5lclJlc3VsdCA9IGVycm9yO1xuICB9XG4gIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICBhbk9iamVjdChpbm5lclJlc3VsdCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbmVsc2UgaWYgKElTX1BVUkUpIEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtQEBpdGVyYXRvclxuaWYgKCFpc0NhbGxhYmxlKEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgcmVkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfSU9TX1BFQkJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZScpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmICghSVNfSU9TX1BFQkJMRSAmJiBQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIC8vIHdvcmthcm91bmQgb2YgV2ViS2l0IH4gaU9TIFNhZmFyaSAxMC4xIGJ1Z1xuICAgIHByb21pc2UuY29uc3RydWN0b3IgPSBQcm9taXNlO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFDYWxsYWJsZShyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhQ2FsbGFibGUocmVqZWN0KTtcbn07XG5cbi8vIGBOZXdQcm9taXNlQ2FwYWJpbGl0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5DT05GSUdVUkFCTEU7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zICYmIG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uYW1lIDoga2V5O1xuICB2YXIgc3RhdGU7XG4gIGlmIChpc0NhbGxhYmxlKHZhbHVlKSkge1xuICAgIGlmIChTdHJpbmcobmFtZSkuc2xpY2UoMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgICAgbmFtZSA9ICdbJyArIFN0cmluZyhuYW1lKS5yZXBsYWNlKC9eU3ltYm9sXFwoKFteKV0qKVxcKS8sICckMScpICsgJ10nO1xuICAgIH1cbiAgICBpZiAoIWhhcyh2YWx1ZSwgJ25hbWUnKSB8fCAoQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgJiYgdmFsdWUubmFtZSAhPT0gbmFtZSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBuYW1lKTtcbiAgICB9XG4gICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFzdGF0ZS5zb3VyY2UpIHtcbiAgICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUodGhpcykgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSBhbk9iamVjdChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgPT09ICdSZWdFeHAnKSByZXR1cm4gcmVnZXhwRXhlYy5jYWxsKFIsIFMpO1xuICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1kgfHwgc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBwYXRjaGVkRXhlYy5jYWxsKHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IHJlZ2V4cEZsYWdzLmNhbGwocmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKCd5JywgJycpO1xuICAgICAgaWYgKGZsYWdzLmluZGV4T2YoJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHIuY2hhckF0KHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5leHBvcnRzLlVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuZXhwb3J0cy5CUk9LRU5fQ0FSRVQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJy4nLCAncycpIC0+IC8uL3MgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnLicsICdzJyk7XG4gIHJldHVybiAhKHJlLmRvdEFsbCAmJiByZS5leGVjKCdcXG4nKSAmJiByZS5mbGFncyA9PT0gJ3MnKTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJyg/PGE+YiknLCAnZycpIC0+IC8oPzxhPmIpL2cgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnKD88YT5iKScsICdnJyk7XG4gIHJldHVybiByZS5leGVjKCdiJykuZ3JvdXBzLmEgIT09ICdiJyB8fFxuICAgICdiJy5yZXBsYWNlKHJlLCAnJDxhPmMnKSAhPT0gJ2JjJztcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjE4LjAnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjEgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKVxuICAgICAgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9PSBub25cbiAgICAgIHx8IChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUUpO1xuICB9KTtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGxvY2F0aW9uLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudHJ5IHtcbiAgLy8gRGVubyB0aHJvd3MgYSBSZWZlcmVuY2VFcnJvciBvbiBgbG9jYXRpb25gIGFjY2VzcyB3aXRob3V0IGAtLWxvY2F0aW9uYCBmbGFnXG4gIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNwZWMgcmVxdWlyZW1lbnRcbiAgICAgIChpc0NhbGxhYmxlKGZuKSA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltKSB7XG4gICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGNsYXNzb2YoYXJndW1lbnQpID09PSAnU3ltYm9sJykgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuICByZXR1cm4gU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxudmFyIG5hdGl2ZVJldmVyc2UgPSBbXS5yZXZlcnNlO1xudmFyIHRlc3QgPSBbMSwgMl07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4vLyBmaXggZm9yIFNhZmFyaSAxMi4wIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4ODc5NFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU3RyaW5nKHRlc3QpID09PSBTdHJpbmcodGVzdC5yZXZlcnNlKCkpIH0sIHtcbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ24gLS0gZGlydHkgaGFja1xuICAgIGlmIChpc0FycmF5KHRoaXMpKSB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHJldHVybiBuYXRpdmVSZXZlcnNlLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlICYmIE5hdGl2ZVByb21pc2UucHJvdG90eXBlO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgTkFUSVZFX1JFSkVDVElPTl9FVkVOVCA9IGlzQ2FsbGFibGUoZ2xvYmFsLlByb21pc2VSZWplY3Rpb25FdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgU1VCQ0xBU1NJTkcgPSBmYWxzZTtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFKSkgcmV0dXJuIGZhbHNlO1xuICAvLyBEZXRlY3QgY29ycmVjdG5lc3Mgb2Ygc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSgxKTsgfSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgU1VCQ0xBU1NJTkcgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICBpZiAoIVNVQkNMQVNTSU5HKSByZXR1cm4gdHJ1ZTtcbiAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICByZXR1cm4gIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgSVNfQlJPV1NFUiAmJiAhTkFUSVZFX1JFSkVDVElPTl9FVkVOVDtcbn0pO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIGlzQ2FsbGFibGUodGhlbiA9IGl0LnRoZW4pID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4oc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChzdGF0ZS5mYWNhZGUgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhQ2FsbGFibGUoZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3Qoc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIFByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gaXNDYWxsYWJsZShvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgaXNDYWxsYWJsZShOYXRpdmVQcm9taXNlKSAmJiBOYXRpdmVQcm9taXNlUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2VQcm90b3R5cGUudGhlbjtcblxuICAgIGlmICghU1VCQ0xBU1NJTkcpIHtcbiAgICAgIC8vIG1ha2UgYFByb21pc2UjdGhlbmAgcmV0dXJuIGEgcG9seWZpbGxlZCBgUHJvbWlzZWAgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlWydjYXRjaCddLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGAuY29uc3RydWN0b3IgPT09IFByb21pc2VgIHdvcmsgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIE5hdGl2ZVByb21pc2VQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgLy8gbWFrZSBgaW5zdGFuY2VvZiBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICBzZXRQcm90b3R5cGVPZihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCBQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUpO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbmF0aXZlVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgbmF0aXZlVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgcCA9ICR0b1N0cmluZyhSLnNvdXJjZSk7XG4gICAgdmFyIHJmID0gUi5mbGFncztcbiAgICB2YXIgZiA9ICR0b1N0cmluZyhyZiA9PT0gdW5kZWZpbmVkICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBmbGFncy5jYWxsKFIpIDogcmYpO1xuICAgIHJldHVybiAnLycgKyBwICsgJy8nICsgZjtcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLWVuZHN3aXRoIC0tIHNhZmVcbnZhciAkZW5kc1dpdGggPSAnJy5lbmRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBtaW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSB0b1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfnRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpXG4gICAgICAuaW5kZXhPZih0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBNQVRDSCk7XG4gICAgICByZXR1cm4gbWF0Y2hlciA/IG1hdGNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXSh0b1N0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJ4LCBTKTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuXG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBuYXRpdmVSZXBsYWNlLmNhbGwodG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgcmVwbGFjZVZhbHVlLmluZGV4T2YoVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSAmJlxuICAgICAgICByZXBsYWNlVmFsdWUuaW5kZXhPZignJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xudmFyIGFycmF5UHVzaCA9IFtdLnB1c2g7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXJyYXlQdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gb3V0cHV0LnNsaWNlKDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBuYXRpdmVTcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZXBhcmF0b3IsIFNQTElUKTtcbiAgICAgIHJldHVybiBzcGxpdHRlclxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwodG9TdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIGxpbWl0KSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcngsIFMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBTLnNsaWNlKHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMsIFVOU1VQUE9SVEVEX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciAkc3RhcnRzV2l0aCA9ICcnLnN0YXJ0c1dpdGg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSkge1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUsICdET01Ub2tlbkxpc3QnKTtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsInZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxuICAsIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvd1xuICAsIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxuICAsIHN1ZmZpeCA9ICdBbmltYXRpb25GcmFtZSdcbiAgLCByYWYgPSByb290WydyZXF1ZXN0JyArIHN1ZmZpeF1cbiAgLCBjYWYgPSByb290WydjYW5jZWwnICsgc3VmZml4XSB8fCByb290WydjYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cblxuZm9yKHZhciBpID0gMDsgIXJhZiAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICByYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdCcgKyBzdWZmaXhdXG4gIGNhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWwnICsgc3VmZml4XVxuICAgICAgfHwgcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxufVxuXG4vLyBTb21lIHZlcnNpb25zIG9mIEZGIGhhdmUgckFGIGJ1dCBub3QgY0FGXG5pZighcmFmIHx8ICFjYWYpIHtcbiAgdmFyIGxhc3QgPSAwXG4gICAgLCBpZCA9IDBcbiAgICAsIHF1ZXVlID0gW11cbiAgICAsIGZyYW1lRHVyYXRpb24gPSAxMDAwIC8gNjBcblxuICByYWYgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIF9ub3cgPSBub3coKVxuICAgICAgICAsIG5leHQgPSBNYXRoLm1heCgwLCBmcmFtZUR1cmF0aW9uIC0gKF9ub3cgLSBsYXN0KSlcbiAgICAgIGxhc3QgPSBuZXh0ICsgX25vd1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNwID0gcXVldWUuc2xpY2UoMClcbiAgICAgICAgLy8gQ2xlYXIgcXVldWUgaGVyZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGNhbGxiYWNrcyBmcm9tIGFwcGVuZGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgZnJhbWUncyBxdWV1ZVxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKCFjcFtpXS5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgY3BbaV0uY2FsbGJhY2sobGFzdClcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBlIH0sIDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBNYXRoLnJvdW5kKG5leHQpKVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKHtcbiAgICAgIGhhbmRsZTogKytpZCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNhbmNlbGxlZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgY2FmID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihxdWV1ZVtpXS5oYW5kbGUgPT09IGhhbmRsZSkge1xuICAgICAgICBxdWV1ZVtpXS5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gV3JhcCBpbiBhIG5ldyBmdW5jdGlvbiB0byBwcmV2ZW50XG4gIC8vIGBjYW5jZWxgIHBvdGVudGlhbGx5IGJlaW5nIGFzc2lnbmVkXG4gIC8vIHRvIHRoZSBuYXRpdmUgckFGIGZ1bmN0aW9uXG4gIHJldHVybiByYWYuY2FsbChyb290LCBmbilcbn1cbm1vZHVsZS5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICBjYWYuYXBwbHkocm9vdCwgYXJndW1lbnRzKVxufVxubW9kdWxlLmV4cG9ydHMucG9seWZpbGwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICBvYmplY3QgPSByb290O1xuICB9XG4gIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByYWZcbiAgb2JqZWN0LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iLCIvKlxuXHRCYXNlZCBvbiByZ2Jjb2xvci5qcyBieSBTdG95YW4gU3RlZmFub3YgPHNzdG9vQGdtYWlsLmNvbT5cblx0aHR0cDovL3d3dy5waHBpZWQuY29tL3JnYi1jb2xvci1wYXJzZXItaW4tamF2YXNjcmlwdC9cbiovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29sb3Jfc3RyaW5nKSB7XG4gICAgdGhpcy5vayA9IGZhbHNlO1xuICAgIHRoaXMuYWxwaGEgPSAxLjA7XG5cbiAgICAvLyBzdHJpcCBhbnkgbGVhZGluZyAjXG4gICAgaWYgKGNvbG9yX3N0cmluZy5jaGFyQXQoMCkgPT0gJyMnKSB7IC8vIHJlbW92ZSAjIGlmIGFueVxuICAgICAgICBjb2xvcl9zdHJpbmcgPSBjb2xvcl9zdHJpbmcuc3Vic3RyKDEsNik7XG4gICAgfVxuXG4gICAgY29sb3Jfc3RyaW5nID0gY29sb3Jfc3RyaW5nLnJlcGxhY2UoLyAvZywnJyk7XG4gICAgY29sb3Jfc3RyaW5nID0gY29sb3Jfc3RyaW5nLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBiZWZvcmUgZ2V0dGluZyBpbnRvIHJlZ2V4cHMsIHRyeSBzaW1wbGUgbWF0Y2hlc1xuICAgIC8vIGFuZCBvdmVyd3JpdGUgdGhlIGlucHV0XG4gICAgdmFyIHNpbXBsZV9jb2xvcnMgPSB7XG4gICAgICAgIGFsaWNlYmx1ZTogJ2YwZjhmZicsXG4gICAgICAgIGFudGlxdWV3aGl0ZTogJ2ZhZWJkNycsXG4gICAgICAgIGFxdWE6ICcwMGZmZmYnLFxuICAgICAgICBhcXVhbWFyaW5lOiAnN2ZmZmQ0JyxcbiAgICAgICAgYXp1cmU6ICdmMGZmZmYnLFxuICAgICAgICBiZWlnZTogJ2Y1ZjVkYycsXG4gICAgICAgIGJpc3F1ZTogJ2ZmZTRjNCcsXG4gICAgICAgIGJsYWNrOiAnMDAwMDAwJyxcbiAgICAgICAgYmxhbmNoZWRhbG1vbmQ6ICdmZmViY2QnLFxuICAgICAgICBibHVlOiAnMDAwMGZmJyxcbiAgICAgICAgYmx1ZXZpb2xldDogJzhhMmJlMicsXG4gICAgICAgIGJyb3duOiAnYTUyYTJhJyxcbiAgICAgICAgYnVybHl3b29kOiAnZGViODg3JyxcbiAgICAgICAgY2FkZXRibHVlOiAnNWY5ZWEwJyxcbiAgICAgICAgY2hhcnRyZXVzZTogJzdmZmYwMCcsXG4gICAgICAgIGNob2NvbGF0ZTogJ2QyNjkxZScsXG4gICAgICAgIGNvcmFsOiAnZmY3ZjUwJyxcbiAgICAgICAgY29ybmZsb3dlcmJsdWU6ICc2NDk1ZWQnLFxuICAgICAgICBjb3Juc2lsazogJ2ZmZjhkYycsXG4gICAgICAgIGNyaW1zb246ICdkYzE0M2MnLFxuICAgICAgICBjeWFuOiAnMDBmZmZmJyxcbiAgICAgICAgZGFya2JsdWU6ICcwMDAwOGInLFxuICAgICAgICBkYXJrY3lhbjogJzAwOGI4YicsXG4gICAgICAgIGRhcmtnb2xkZW5yb2Q6ICdiODg2MGInLFxuICAgICAgICBkYXJrZ3JheTogJ2E5YTlhOScsXG4gICAgICAgIGRhcmtncmVlbjogJzAwNjQwMCcsXG4gICAgICAgIGRhcmtraGFraTogJ2JkYjc2YicsXG4gICAgICAgIGRhcmttYWdlbnRhOiAnOGIwMDhiJyxcbiAgICAgICAgZGFya29saXZlZ3JlZW46ICc1NTZiMmYnLFxuICAgICAgICBkYXJrb3JhbmdlOiAnZmY4YzAwJyxcbiAgICAgICAgZGFya29yY2hpZDogJzk5MzJjYycsXG4gICAgICAgIGRhcmtyZWQ6ICc4YjAwMDAnLFxuICAgICAgICBkYXJrc2FsbW9uOiAnZTk5NjdhJyxcbiAgICAgICAgZGFya3NlYWdyZWVuOiAnOGZiYzhmJyxcbiAgICAgICAgZGFya3NsYXRlYmx1ZTogJzQ4M2Q4YicsXG4gICAgICAgIGRhcmtzbGF0ZWdyYXk6ICcyZjRmNGYnLFxuICAgICAgICBkYXJrdHVycXVvaXNlOiAnMDBjZWQxJyxcbiAgICAgICAgZGFya3Zpb2xldDogJzk0MDBkMycsXG4gICAgICAgIGRlZXBwaW5rOiAnZmYxNDkzJyxcbiAgICAgICAgZGVlcHNreWJsdWU6ICcwMGJmZmYnLFxuICAgICAgICBkaW1ncmF5OiAnNjk2OTY5JyxcbiAgICAgICAgZG9kZ2VyYmx1ZTogJzFlOTBmZicsXG4gICAgICAgIGZlbGRzcGFyOiAnZDE5Mjc1JyxcbiAgICAgICAgZmlyZWJyaWNrOiAnYjIyMjIyJyxcbiAgICAgICAgZmxvcmFsd2hpdGU6ICdmZmZhZjAnLFxuICAgICAgICBmb3Jlc3RncmVlbjogJzIyOGIyMicsXG4gICAgICAgIGZ1Y2hzaWE6ICdmZjAwZmYnLFxuICAgICAgICBnYWluc2Jvcm86ICdkY2RjZGMnLFxuICAgICAgICBnaG9zdHdoaXRlOiAnZjhmOGZmJyxcbiAgICAgICAgZ29sZDogJ2ZmZDcwMCcsXG4gICAgICAgIGdvbGRlbnJvZDogJ2RhYTUyMCcsXG4gICAgICAgIGdyYXk6ICc4MDgwODAnLFxuICAgICAgICBncmVlbjogJzAwODAwMCcsXG4gICAgICAgIGdyZWVueWVsbG93OiAnYWRmZjJmJyxcbiAgICAgICAgaG9uZXlkZXc6ICdmMGZmZjAnLFxuICAgICAgICBob3RwaW5rOiAnZmY2OWI0JyxcbiAgICAgICAgaW5kaWFucmVkIDogJ2NkNWM1YycsXG4gICAgICAgIGluZGlnbyA6ICc0YjAwODInLFxuICAgICAgICBpdm9yeTogJ2ZmZmZmMCcsXG4gICAgICAgIGtoYWtpOiAnZjBlNjhjJyxcbiAgICAgICAgbGF2ZW5kZXI6ICdlNmU2ZmEnLFxuICAgICAgICBsYXZlbmRlcmJsdXNoOiAnZmZmMGY1JyxcbiAgICAgICAgbGF3bmdyZWVuOiAnN2NmYzAwJyxcbiAgICAgICAgbGVtb25jaGlmZm9uOiAnZmZmYWNkJyxcbiAgICAgICAgbGlnaHRibHVlOiAnYWRkOGU2JyxcbiAgICAgICAgbGlnaHRjb3JhbDogJ2YwODA4MCcsXG4gICAgICAgIGxpZ2h0Y3lhbjogJ2UwZmZmZicsXG4gICAgICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAnZmFmYWQyJyxcbiAgICAgICAgbGlnaHRncmV5OiAnZDNkM2QzJyxcbiAgICAgICAgbGlnaHRncmVlbjogJzkwZWU5MCcsXG4gICAgICAgIGxpZ2h0cGluazogJ2ZmYjZjMScsXG4gICAgICAgIGxpZ2h0c2FsbW9uOiAnZmZhMDdhJyxcbiAgICAgICAgbGlnaHRzZWFncmVlbjogJzIwYjJhYScsXG4gICAgICAgIGxpZ2h0c2t5Ymx1ZTogJzg3Y2VmYScsXG4gICAgICAgIGxpZ2h0c2xhdGVibHVlOiAnODQ3MGZmJyxcbiAgICAgICAgbGlnaHRzbGF0ZWdyYXk6ICc3Nzg4OTknLFxuICAgICAgICBsaWdodHN0ZWVsYmx1ZTogJ2IwYzRkZScsXG4gICAgICAgIGxpZ2h0eWVsbG93OiAnZmZmZmUwJyxcbiAgICAgICAgbGltZTogJzAwZmYwMCcsXG4gICAgICAgIGxpbWVncmVlbjogJzMyY2QzMicsXG4gICAgICAgIGxpbmVuOiAnZmFmMGU2JyxcbiAgICAgICAgbWFnZW50YTogJ2ZmMDBmZicsXG4gICAgICAgIG1hcm9vbjogJzgwMDAwMCcsXG4gICAgICAgIG1lZGl1bWFxdWFtYXJpbmU6ICc2NmNkYWEnLFxuICAgICAgICBtZWRpdW1ibHVlOiAnMDAwMGNkJyxcbiAgICAgICAgbWVkaXVtb3JjaGlkOiAnYmE1NWQzJyxcbiAgICAgICAgbWVkaXVtcHVycGxlOiAnOTM3MGQ4JyxcbiAgICAgICAgbWVkaXVtc2VhZ3JlZW46ICczY2IzNzEnLFxuICAgICAgICBtZWRpdW1zbGF0ZWJsdWU6ICc3YjY4ZWUnLFxuICAgICAgICBtZWRpdW1zcHJpbmdncmVlbjogJzAwZmE5YScsXG4gICAgICAgIG1lZGl1bXR1cnF1b2lzZTogJzQ4ZDFjYycsXG4gICAgICAgIG1lZGl1bXZpb2xldHJlZDogJ2M3MTU4NScsXG4gICAgICAgIG1pZG5pZ2h0Ymx1ZTogJzE5MTk3MCcsXG4gICAgICAgIG1pbnRjcmVhbTogJ2Y1ZmZmYScsXG4gICAgICAgIG1pc3R5cm9zZTogJ2ZmZTRlMScsXG4gICAgICAgIG1vY2Nhc2luOiAnZmZlNGI1JyxcbiAgICAgICAgbmF2YWpvd2hpdGU6ICdmZmRlYWQnLFxuICAgICAgICBuYXZ5OiAnMDAwMDgwJyxcbiAgICAgICAgb2xkbGFjZTogJ2ZkZjVlNicsXG4gICAgICAgIG9saXZlOiAnODA4MDAwJyxcbiAgICAgICAgb2xpdmVkcmFiOiAnNmI4ZTIzJyxcbiAgICAgICAgb3JhbmdlOiAnZmZhNTAwJyxcbiAgICAgICAgb3JhbmdlcmVkOiAnZmY0NTAwJyxcbiAgICAgICAgb3JjaGlkOiAnZGE3MGQ2JyxcbiAgICAgICAgcGFsZWdvbGRlbnJvZDogJ2VlZThhYScsXG4gICAgICAgIHBhbGVncmVlbjogJzk4ZmI5OCcsXG4gICAgICAgIHBhbGV0dXJxdW9pc2U6ICdhZmVlZWUnLFxuICAgICAgICBwYWxldmlvbGV0cmVkOiAnZDg3MDkzJyxcbiAgICAgICAgcGFwYXlhd2hpcDogJ2ZmZWZkNScsXG4gICAgICAgIHBlYWNocHVmZjogJ2ZmZGFiOScsXG4gICAgICAgIHBlcnU6ICdjZDg1M2YnLFxuICAgICAgICBwaW5rOiAnZmZjMGNiJyxcbiAgICAgICAgcGx1bTogJ2RkYTBkZCcsXG4gICAgICAgIHBvd2RlcmJsdWU6ICdiMGUwZTYnLFxuICAgICAgICBwdXJwbGU6ICc4MDAwODAnLFxuICAgICAgICByZWJlY2NhcHVycGxlOiAnNjYzMzk5JyxcbiAgICAgICAgcmVkOiAnZmYwMDAwJyxcbiAgICAgICAgcm9zeWJyb3duOiAnYmM4ZjhmJyxcbiAgICAgICAgcm95YWxibHVlOiAnNDE2OWUxJyxcbiAgICAgICAgc2FkZGxlYnJvd246ICc4YjQ1MTMnLFxuICAgICAgICBzYWxtb246ICdmYTgwNzInLFxuICAgICAgICBzYW5keWJyb3duOiAnZjRhNDYwJyxcbiAgICAgICAgc2VhZ3JlZW46ICcyZThiNTcnLFxuICAgICAgICBzZWFzaGVsbDogJ2ZmZjVlZScsXG4gICAgICAgIHNpZW5uYTogJ2EwNTIyZCcsXG4gICAgICAgIHNpbHZlcjogJ2MwYzBjMCcsXG4gICAgICAgIHNreWJsdWU6ICc4N2NlZWInLFxuICAgICAgICBzbGF0ZWJsdWU6ICc2YTVhY2QnLFxuICAgICAgICBzbGF0ZWdyYXk6ICc3MDgwOTAnLFxuICAgICAgICBzbm93OiAnZmZmYWZhJyxcbiAgICAgICAgc3ByaW5nZ3JlZW46ICcwMGZmN2YnLFxuICAgICAgICBzdGVlbGJsdWU6ICc0NjgyYjQnLFxuICAgICAgICB0YW46ICdkMmI0OGMnLFxuICAgICAgICB0ZWFsOiAnMDA4MDgwJyxcbiAgICAgICAgdGhpc3RsZTogJ2Q4YmZkOCcsXG4gICAgICAgIHRvbWF0bzogJ2ZmNjM0NycsXG4gICAgICAgIHR1cnF1b2lzZTogJzQwZTBkMCcsXG4gICAgICAgIHZpb2xldDogJ2VlODJlZScsXG4gICAgICAgIHZpb2xldHJlZDogJ2QwMjA5MCcsXG4gICAgICAgIHdoZWF0OiAnZjVkZWIzJyxcbiAgICAgICAgd2hpdGU6ICdmZmZmZmYnLFxuICAgICAgICB3aGl0ZXNtb2tlOiAnZjVmNWY1JyxcbiAgICAgICAgeWVsbG93OiAnZmZmZjAwJyxcbiAgICAgICAgeWVsbG93Z3JlZW46ICc5YWNkMzInXG4gICAgfTtcbiAgICBjb2xvcl9zdHJpbmcgPSBzaW1wbGVfY29sb3JzW2NvbG9yX3N0cmluZ10gfHwgY29sb3Jfc3RyaW5nO1xuICAgIC8vIGVtZCBvZiBzaW1wbGUgdHlwZS1pbiBjb2xvcnNcblxuICAgIC8vIGFycmF5IG9mIGNvbG9yIGRlZmluaXRpb24gb2JqZWN0c1xuICAgIHZhciBjb2xvcl9kZWZzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICByZTogL15yZ2JhXFwoKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KSxcXHMqKCg/OlxcZD9cXC4pP1xcZClcXCkkLyxcbiAgICAgICAgICAgIGV4YW1wbGU6IFsncmdiYSgxMjMsIDIzNCwgNDUsIDAuOCknLCAncmdiYSgyNTUsMjM0LDI0NSwxLjApJ10sXG4gICAgICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiAoYml0cyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1sxXSksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGJpdHNbMl0pLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChiaXRzWzNdKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChiaXRzWzRdKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlOiAvXnJnYlxcKChcXGR7MSwzfSksXFxzKihcXGR7MSwzfSksXFxzKihcXGR7MSwzfSlcXCkkLyxcbiAgICAgICAgICAgIGV4YW1wbGU6IFsncmdiKDEyMywgMjM0LCA0NSknLCAncmdiKDI1NSwyMzQsMjQ1KSddLFxuICAgICAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGJpdHMpe1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGJpdHNbMV0pLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChiaXRzWzJdKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1szXSlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByZTogL14oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICAgICAgICAgIGV4YW1wbGU6IFsnIzAwZmYwMCcsICczMzY2OTknXSxcbiAgICAgICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChiaXRzKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChiaXRzWzFdLCAxNiksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGJpdHNbMl0sIDE2KSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1szXSwgMTYpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcmU6IC9eKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgICAgICAgICBleGFtcGxlOiBbJyNmYjAnLCAnZjBmJ10sXG4gICAgICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiAoYml0cyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1sxXSArIGJpdHNbMV0sIDE2KSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1syXSArIGJpdHNbMl0sIDE2KSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1szXSArIGJpdHNbM10sIDE2KVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdO1xuXG4gICAgLy8gc2VhcmNoIHRocm91Z2ggdGhlIGRlZmluaXRpb25zIHRvIGZpbmQgYSBtYXRjaFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JfZGVmcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcmUgPSBjb2xvcl9kZWZzW2ldLnJlO1xuICAgICAgICB2YXIgcHJvY2Vzc29yID0gY29sb3JfZGVmc1tpXS5wcm9jZXNzO1xuICAgICAgICB2YXIgYml0cyA9IHJlLmV4ZWMoY29sb3Jfc3RyaW5nKTtcbiAgICAgICAgaWYgKGJpdHMpIHtcbiAgICAgICAgICAgIHZhciBjaGFubmVscyA9IHByb2Nlc3NvcihiaXRzKTtcbiAgICAgICAgICAgIHRoaXMuciA9IGNoYW5uZWxzWzBdO1xuICAgICAgICAgICAgdGhpcy5nID0gY2hhbm5lbHNbMV07XG4gICAgICAgICAgICB0aGlzLmIgPSBjaGFubmVsc1syXTtcbiAgICAgICAgICAgIGlmIChjaGFubmVscy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbHBoYSA9IGNoYW5uZWxzWzNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vayA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlL2NsZWFudXAgdmFsdWVzXG4gICAgdGhpcy5yID0gKHRoaXMuciA8IDAgfHwgaXNOYU4odGhpcy5yKSkgPyAwIDogKCh0aGlzLnIgPiAyNTUpID8gMjU1IDogdGhpcy5yKTtcbiAgICB0aGlzLmcgPSAodGhpcy5nIDwgMCB8fCBpc05hTih0aGlzLmcpKSA/IDAgOiAoKHRoaXMuZyA+IDI1NSkgPyAyNTUgOiB0aGlzLmcpO1xuICAgIHRoaXMuYiA9ICh0aGlzLmIgPCAwIHx8IGlzTmFOKHRoaXMuYikpID8gMCA6ICgodGhpcy5iID4gMjU1KSA/IDI1NSA6IHRoaXMuYik7XG4gICAgdGhpcy5hbHBoYSA9ICh0aGlzLmFscGhhIDwgMCkgPyAwIDogKCh0aGlzLmFscGhhID4gMS4wIHx8IGlzTmFOKHRoaXMuYWxwaGEpKSA/IDEuMCA6IHRoaXMuYWxwaGEpO1xuXG4gICAgLy8gc29tZSBnZXR0ZXJzXG4gICAgdGhpcy50b1JHQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdyZ2IoJyArIHRoaXMuciArICcsICcgKyB0aGlzLmcgKyAnLCAnICsgdGhpcy5iICsgJyknO1xuICAgIH1cbiAgICB0aGlzLnRvUkdCQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdyZ2JhKCcgKyB0aGlzLnIgKyAnLCAnICsgdGhpcy5nICsgJywgJyArIHRoaXMuYiArICcsICcgKyB0aGlzLmFscGhhICsgJyknO1xuICAgIH1cbiAgICB0aGlzLnRvSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgciA9IHRoaXMuci50b1N0cmluZygxNik7XG4gICAgICAgIHZhciBnID0gdGhpcy5nLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgdmFyIGIgPSB0aGlzLmIudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoci5sZW5ndGggPT0gMSkgciA9ICcwJyArIHI7XG4gICAgICAgIGlmIChnLmxlbmd0aCA9PSAxKSBnID0gJzAnICsgZztcbiAgICAgICAgaWYgKGIubGVuZ3RoID09IDEpIGIgPSAnMCcgKyBiO1xuICAgICAgICByZXR1cm4gJyMnICsgciArIGcgKyBiO1xuICAgIH1cblxuICAgIC8vIGhlbHBcbiAgICB0aGlzLmdldEhlbHBYTUwgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGV4YW1wbGVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIC8vIGFkZCByZWdleHBzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JfZGVmcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGV4YW1wbGUgPSBjb2xvcl9kZWZzW2ldLmV4YW1wbGU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGV4YW1wbGUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBleGFtcGxlc1tleGFtcGxlcy5sZW5ndGhdID0gZXhhbXBsZVtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdHlwZS1pbiBjb2xvcnNcbiAgICAgICAgZm9yICh2YXIgc2MgaW4gc2ltcGxlX2NvbG9ycykge1xuICAgICAgICAgICAgZXhhbXBsZXNbZXhhbXBsZXMubGVuZ3RoXSA9IHNjO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHhtbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgIHhtbC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3JnYmNvbG9yLWV4YW1wbGVzJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RfaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RfY29sb3IgPSBuZXcgUkdCQ29sb3IoZXhhbXBsZXNbaV0pO1xuICAgICAgICAgICAgICAgIHZhciBleGFtcGxlX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGV4YW1wbGVfZGl2LnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmdpbjogM3B4OyAnXG4gICAgICAgICAgICAgICAgICAgICAgICArICdib3JkZXI6IDFweCBzb2xpZCBibGFjazsgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnYmFja2dyb3VuZDonICsgbGlzdF9jb2xvci50b0hleCgpICsgJzsgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnY29sb3I6JyArIGxpc3RfY29sb3IudG9IZXgoKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBleGFtcGxlX2Rpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgndGVzdCcpKTtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdF9pdGVtX3ZhbHVlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXG4gICAgICAgICAgICAgICAgICAgICcgJyArIGV4YW1wbGVzW2ldICsgJyAtPiAnICsgbGlzdF9jb2xvci50b1JHQigpICsgJyAtPiAnICsgbGlzdF9jb2xvci50b0hleCgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBsaXN0X2l0ZW0uYXBwZW5kQ2hpbGQoZXhhbXBsZV9kaXYpO1xuICAgICAgICAgICAgICAgIGxpc3RfaXRlbS5hcHBlbmRDaGlsZChsaXN0X2l0ZW1fdmFsdWUpO1xuICAgICAgICAgICAgICAgIHhtbC5hcHBlbmRDaGlsZChsaXN0X2l0ZW0pO1xuXG4gICAgICAgICAgICB9IGNhdGNoKGUpe31cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geG1sO1xuXG4gICAgfVxuXG59XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXG5cblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbnZhciB0PWZ1bmN0aW9uKHIsZSl7cmV0dXJuKHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQscil7dC5fX3Byb3RvX189cn18fGZ1bmN0aW9uKHQscil7Zm9yKHZhciBlIGluIHIpci5oYXNPd25Qcm9wZXJ0eShlKSYmKHRbZV09cltlXSl9KShyLGUpfTtmdW5jdGlvbiByKHIsZSl7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9cn10KHIsZSksci5wcm90b3R5cGU9bnVsbD09PWU/T2JqZWN0LmNyZWF0ZShlKTooaS5wcm90b3R5cGU9ZS5wcm90b3R5cGUsbmV3IGkpfWZ1bmN0aW9uIGUodCl7dmFyIHI9XCJcIjtBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pO2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgaT10W2VdO2lmKGkudHlwZT09PWYuQ0xPU0VfUEFUSClyKz1cInpcIjtlbHNlIGlmKGkudHlwZT09PWYuSE9SSVpfTElORV9UTylyKz0oaS5yZWxhdGl2ZT9cImhcIjpcIkhcIikraS54O2Vsc2UgaWYoaS50eXBlPT09Zi5WRVJUX0xJTkVfVE8pcis9KGkucmVsYXRpdmU/XCJ2XCI6XCJWXCIpK2kueTtlbHNlIGlmKGkudHlwZT09PWYuTU9WRV9UTylyKz0oaS5yZWxhdGl2ZT9cIm1cIjpcIk1cIikraS54K1wiIFwiK2kueTtlbHNlIGlmKGkudHlwZT09PWYuTElORV9UTylyKz0oaS5yZWxhdGl2ZT9cImxcIjpcIkxcIikraS54K1wiIFwiK2kueTtlbHNlIGlmKGkudHlwZT09PWYuQ1VSVkVfVE8pcis9KGkucmVsYXRpdmU/XCJjXCI6XCJDXCIpK2kueDErXCIgXCIraS55MStcIiBcIitpLngyK1wiIFwiK2kueTIrXCIgXCIraS54K1wiIFwiK2kueTtlbHNlIGlmKGkudHlwZT09PWYuU01PT1RIX0NVUlZFX1RPKXIrPShpLnJlbGF0aXZlP1wic1wiOlwiU1wiKStpLngyK1wiIFwiK2kueTIrXCIgXCIraS54K1wiIFwiK2kueTtlbHNlIGlmKGkudHlwZT09PWYuUVVBRF9UTylyKz0oaS5yZWxhdGl2ZT9cInFcIjpcIlFcIikraS54MStcIiBcIitpLnkxK1wiIFwiK2kueCtcIiBcIitpLnk7ZWxzZSBpZihpLnR5cGU9PT1mLlNNT09USF9RVUFEX1RPKXIrPShpLnJlbGF0aXZlP1widFwiOlwiVFwiKStpLngrXCIgXCIraS55O2Vsc2V7aWYoaS50eXBlIT09Zi5BUkMpdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGNvbW1hbmQgdHlwZSBcIicraS50eXBlKydcIiBhdCBpbmRleCAnK2UrXCIuXCIpO3IrPShpLnJlbGF0aXZlP1wiYVwiOlwiQVwiKStpLnJYK1wiIFwiK2kuclkrXCIgXCIraS54Um90K1wiIFwiKyAraS5sQXJjRmxhZytcIiBcIisgK2kuc3dlZXBGbGFnK1wiIFwiK2kueCtcIiBcIitpLnl9fXJldHVybiByfWZ1bmN0aW9uIGkodCxyKXt2YXIgZT10WzBdLGk9dFsxXTtyZXR1cm5bZSpNYXRoLmNvcyhyKS1pKk1hdGguc2luKHIpLGUqTWF0aC5zaW4ocikraSpNYXRoLmNvcyhyKV19ZnVuY3Rpb24gYSgpe2Zvcih2YXIgdD1bXSxyPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZihcIm51bWJlclwiIT10eXBlb2YgdFtlXSl0aHJvdyBuZXcgRXJyb3IoXCJhc3NlcnROdW1iZXJzIGFyZ3VtZW50c1tcIitlK1wiXSBpcyBub3QgYSBudW1iZXIuIFwiK3R5cGVvZiB0W2VdK1wiID09IHR5cGVvZiBcIit0W2VdKTtyZXR1cm4hMH12YXIgbj1NYXRoLlBJO2Z1bmN0aW9uIG8odCxyLGUpe3QubEFyY0ZsYWc9MD09PXQubEFyY0ZsYWc/MDoxLHQuc3dlZXBGbGFnPTA9PT10LnN3ZWVwRmxhZz8wOjE7dmFyIGE9dC5yWCxvPXQuclkscz10LngsdT10Lnk7YT1NYXRoLmFicyh0LnJYKSxvPU1hdGguYWJzKHQuclkpO3ZhciBoPWkoWyhyLXMpLzIsKGUtdSkvMl0sLXQueFJvdC8xODAqbiksYz1oWzBdLHk9aFsxXSxwPU1hdGgucG93KGMsMikvTWF0aC5wb3coYSwyKStNYXRoLnBvdyh5LDIpL01hdGgucG93KG8sMik7MTxwJiYoYSo9TWF0aC5zcXJ0KHApLG8qPU1hdGguc3FydChwKSksdC5yWD1hLHQuclk9bzt2YXIgbT1NYXRoLnBvdyhhLDIpKk1hdGgucG93KHksMikrTWF0aC5wb3cobywyKSpNYXRoLnBvdyhjLDIpLE89KHQubEFyY0ZsYWchPT10LnN3ZWVwRmxhZz8xOi0xKSpNYXRoLnNxcnQoTWF0aC5tYXgoMCwoTWF0aC5wb3coYSwyKSpNYXRoLnBvdyhvLDIpLW0pL20pKSxUPWEqeS9vKk8sdj0tbypjL2EqTyxsPWkoW1Qsdl0sdC54Um90LzE4MCpuKTt0LmNYPWxbMF0rKHIrcykvMix0LmNZPWxbMV0rKGUrdSkvMix0LnBoaTE9TWF0aC5hdGFuMigoeS12KS9vLChjLVQpL2EpLHQucGhpMj1NYXRoLmF0YW4yKCgteS12KS9vLCgtYy1UKS9hKSwwPT09dC5zd2VlcEZsYWcmJnQucGhpMj50LnBoaTEmJih0LnBoaTItPTIqbiksMT09PXQuc3dlZXBGbGFnJiZ0LnBoaTI8dC5waGkxJiYodC5waGkyKz0yKm4pLHQucGhpMSo9MTgwL24sdC5waGkyKj0xODAvbn1mdW5jdGlvbiBzKHQscixlKXthKHQscixlKTt2YXIgaT10KnQrcipyLWUqZTtpZigwPmkpcmV0dXJuW107aWYoMD09PWkpcmV0dXJuW1t0KmUvKHQqdCtyKnIpLHIqZS8odCp0K3IqcildXTt2YXIgbj1NYXRoLnNxcnQoaSk7cmV0dXJuW1sodCplK3IqbikvKHQqdCtyKnIpLChyKmUtdCpuKS8odCp0K3IqcildLFsodCplLXIqbikvKHQqdCtyKnIpLChyKmUrdCpuKS8odCp0K3IqcildXX12YXIgdSxoPU1hdGguUEkvMTgwO2Z1bmN0aW9uIGModCxyLGUpe3JldHVybigxLWUpKnQrZSpyfWZ1bmN0aW9uIHkodCxyLGUsaSl7cmV0dXJuIHQrTWF0aC5jb3MoaS8xODAqbikqcitNYXRoLnNpbihpLzE4MCpuKSplfWZ1bmN0aW9uIHAodCxyLGUsaSl7dmFyIGE9ci10LG49ZS1yLG89MyphKzMqKGktZSktNipuLHM9Nioobi1hKSx1PTMqYTtyZXR1cm4gTWF0aC5hYnMobyk8MWUtNj9bLXUvc106ZnVuY3Rpb24odCxyLGUpe3ZvaWQgMD09PWUmJihlPTFlLTYpO3ZhciBpPXQqdC80LXI7aWYoaTwtZSlyZXR1cm5bXTtpZihpPD1lKXJldHVyblstdC8yXTt2YXIgYT1NYXRoLnNxcnQoaSk7cmV0dXJuWy10LzItYSwtdC8yK2FdfShzL28sdS9vLDFlLTYpfWZ1bmN0aW9uIG0odCxyLGUsaSxhKXt2YXIgbj0xLWE7cmV0dXJuIHQqKG4qbipuKStyKigzKm4qbiphKStlKigzKm4qYSphKStpKihhKmEqYSl9IWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHIoKXtyZXR1cm4gdSgoZnVuY3Rpb24odCxyLGUpe3JldHVybiB0LnJlbGF0aXZlJiYodm9pZCAwIT09dC54MSYmKHQueDErPXIpLHZvaWQgMCE9PXQueTEmJih0LnkxKz1lKSx2b2lkIDAhPT10LngyJiYodC54Mis9ciksdm9pZCAwIT09dC55MiYmKHQueTIrPWUpLHZvaWQgMCE9PXQueCYmKHQueCs9ciksdm9pZCAwIT09dC55JiYodC55Kz1lKSx0LnJlbGF0aXZlPSExKSx0fSkpfWZ1bmN0aW9uIGUoKXt2YXIgdD1OYU4scj1OYU4sZT1OYU4saT1OYU47cmV0dXJuIHUoKGZ1bmN0aW9uKGEsbixvKXtyZXR1cm4gYS50eXBlJmYuU01PT1RIX0NVUlZFX1RPJiYoYS50eXBlPWYuQ1VSVkVfVE8sdD1pc05hTih0KT9uOnQscj1pc05hTihyKT9vOnIsYS54MT1hLnJlbGF0aXZlP24tdDoyKm4tdCxhLnkxPWEucmVsYXRpdmU/by1yOjIqby1yKSxhLnR5cGUmZi5DVVJWRV9UTz8odD1hLnJlbGF0aXZlP24rYS54MjphLngyLHI9YS5yZWxhdGl2ZT9vK2EueTI6YS55Mik6KHQ9TmFOLHI9TmFOKSxhLnR5cGUmZi5TTU9PVEhfUVVBRF9UTyYmKGEudHlwZT1mLlFVQURfVE8sZT1pc05hTihlKT9uOmUsaT1pc05hTihpKT9vOmksYS54MT1hLnJlbGF0aXZlP24tZToyKm4tZSxhLnkxPWEucmVsYXRpdmU/by1pOjIqby1pKSxhLnR5cGUmZi5RVUFEX1RPPyhlPWEucmVsYXRpdmU/bithLngxOmEueDEsaT1hLnJlbGF0aXZlP28rYS55MTphLnkxKTooZT1OYU4saT1OYU4pLGF9KSl9ZnVuY3Rpb24gbigpe3ZhciB0PU5hTixyPU5hTjtyZXR1cm4gdSgoZnVuY3Rpb24oZSxpLGEpe2lmKGUudHlwZSZmLlNNT09USF9RVUFEX1RPJiYoZS50eXBlPWYuUVVBRF9UTyx0PWlzTmFOKHQpP2k6dCxyPWlzTmFOKHIpP2E6cixlLngxPWUucmVsYXRpdmU/aS10OjIqaS10LGUueTE9ZS5yZWxhdGl2ZT9hLXI6MiphLXIpLGUudHlwZSZmLlFVQURfVE8pe3Q9ZS5yZWxhdGl2ZT9pK2UueDE6ZS54MSxyPWUucmVsYXRpdmU/YStlLnkxOmUueTE7dmFyIG49ZS54MSxvPWUueTE7ZS50eXBlPWYuQ1VSVkVfVE8sZS54MT0oKGUucmVsYXRpdmU/MDppKSsyKm4pLzMsZS55MT0oKGUucmVsYXRpdmU/MDphKSsyKm8pLzMsZS54Mj0oZS54KzIqbikvMyxlLnkyPShlLnkrMipvKS8zfWVsc2UgdD1OYU4scj1OYU47cmV0dXJuIGV9KSl9ZnVuY3Rpb24gdSh0KXt2YXIgcj0wLGU9MCxpPU5hTixhPU5hTjtyZXR1cm4gZnVuY3Rpb24obil7aWYoaXNOYU4oaSkmJiEobi50eXBlJmYuTU9WRV9UTykpdGhyb3cgbmV3IEVycm9yKFwicGF0aCBtdXN0IHN0YXJ0IHdpdGggbW92ZXRvXCIpO3ZhciBvPXQobixyLGUsaSxhKTtyZXR1cm4gbi50eXBlJmYuQ0xPU0VfUEFUSCYmKHI9aSxlPWEpLHZvaWQgMCE9PW4ueCYmKHI9bi5yZWxhdGl2ZT9yK24ueDpuLngpLHZvaWQgMCE9PW4ueSYmKGU9bi5yZWxhdGl2ZT9lK24ueTpuLnkpLG4udHlwZSZmLk1PVkVfVE8mJihpPXIsYT1lKSxvfX1mdW5jdGlvbiBPKHQscixlLGksbixvKXtyZXR1cm4gYSh0LHIsZSxpLG4sbyksdSgoZnVuY3Rpb24oYSxzLHUsaCl7dmFyIGM9YS54MSx5PWEueDIscD1hLnJlbGF0aXZlJiYhaXNOYU4oaCksbT12b2lkIDAhPT1hLng/YS54OnA/MDpzLE89dm9pZCAwIT09YS55P2EueTpwPzA6dTtmdW5jdGlvbiBUKHQpe3JldHVybiB0KnR9YS50eXBlJmYuSE9SSVpfTElORV9UTyYmMCE9PXImJihhLnR5cGU9Zi5MSU5FX1RPLGEueT1hLnJlbGF0aXZlPzA6dSksYS50eXBlJmYuVkVSVF9MSU5FX1RPJiYwIT09ZSYmKGEudHlwZT1mLkxJTkVfVE8sYS54PWEucmVsYXRpdmU/MDpzKSx2b2lkIDAhPT1hLngmJihhLng9YS54KnQrTyplKyhwPzA6bikpLHZvaWQgMCE9PWEueSYmKGEueT1tKnIrYS55KmkrKHA/MDpvKSksdm9pZCAwIT09YS54MSYmKGEueDE9YS54MSp0K2EueTEqZSsocD8wOm4pKSx2b2lkIDAhPT1hLnkxJiYoYS55MT1jKnIrYS55MSppKyhwPzA6bykpLHZvaWQgMCE9PWEueDImJihhLngyPWEueDIqdCthLnkyKmUrKHA/MDpuKSksdm9pZCAwIT09YS55MiYmKGEueTI9eSpyK2EueTIqaSsocD8wOm8pKTt2YXIgdj10KmktciplO2lmKHZvaWQgMCE9PWEueFJvdCYmKDEhPT10fHwwIT09cnx8MCE9PWV8fDEhPT1pKSlpZigwPT09dilkZWxldGUgYS5yWCxkZWxldGUgYS5yWSxkZWxldGUgYS54Um90LGRlbGV0ZSBhLmxBcmNGbGFnLGRlbGV0ZSBhLnN3ZWVwRmxhZyxhLnR5cGU9Zi5MSU5FX1RPO2Vsc2V7dmFyIGw9YS54Um90Kk1hdGguUEkvMTgwLF89TWF0aC5zaW4obCksTj1NYXRoLmNvcyhsKSx4PTEvVChhLnJYKSxkPTEvVChhLnJZKSxBPVQoTikqeCtUKF8pKmQsRT0yKl8qTiooeC1kKSxDPVQoXykqeCtUKE4pKmQsTT1BKmkqaS1FKnIqaStDKnIqcixSPUUqKHQqaStyKmUpLTIqKEEqZSppK0MqdCpyKSxnPUEqZSplLUUqdCplK0MqdCp0LEk9KE1hdGguYXRhbjIoUixNLWcpK01hdGguUEkpJU1hdGguUEkvMixTPU1hdGguc2luKEkpLEw9TWF0aC5jb3MoSSk7YS5yWD1NYXRoLmFicyh2KS9NYXRoLnNxcnQoTSpUKEwpK1IqUypMK2cqVChTKSksYS5yWT1NYXRoLmFicyh2KS9NYXRoLnNxcnQoTSpUKFMpLVIqUypMK2cqVChMKSksYS54Um90PTE4MCpJL01hdGguUEl9cmV0dXJuIHZvaWQgMCE9PWEuc3dlZXBGbGFnJiYwPnYmJihhLnN3ZWVwRmxhZz0rIWEuc3dlZXBGbGFnKSxhfSkpfWZ1bmN0aW9uIFQoKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIHI9e307Zm9yKHZhciBlIGluIHQpcltlXT10W2VdO3JldHVybiByfX10LlJPVU5EPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHIocil7cmV0dXJuIE1hdGgucm91bmQocip0KS90fXJldHVybiB2b2lkIDA9PT10JiYodD0xZTEzKSxhKHQpLGZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10LngxJiYodC54MT1yKHQueDEpKSx2b2lkIDAhPT10LnkxJiYodC55MT1yKHQueTEpKSx2b2lkIDAhPT10LngyJiYodC54Mj1yKHQueDIpKSx2b2lkIDAhPT10LnkyJiYodC55Mj1yKHQueTIpKSx2b2lkIDAhPT10LngmJih0Lng9cih0LngpKSx2b2lkIDAhPT10LnkmJih0Lnk9cih0LnkpKSx2b2lkIDAhPT10LnJYJiYodC5yWD1yKHQuclgpKSx2b2lkIDAhPT10LnJZJiYodC5yWT1yKHQuclkpKSx0fX0sdC5UT19BQlM9cix0LlRPX1JFTD1mdW5jdGlvbigpe3JldHVybiB1KChmdW5jdGlvbih0LHIsZSl7cmV0dXJuIHQucmVsYXRpdmV8fCh2b2lkIDAhPT10LngxJiYodC54MS09ciksdm9pZCAwIT09dC55MSYmKHQueTEtPWUpLHZvaWQgMCE9PXQueDImJih0LngyLT1yKSx2b2lkIDAhPT10LnkyJiYodC55Mi09ZSksdm9pZCAwIT09dC54JiYodC54LT1yKSx2b2lkIDAhPT10LnkmJih0LnktPWUpLHQucmVsYXRpdmU9ITApLHR9KSl9LHQuTk9STUFMSVpFX0hWWj1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PSEwKSx2b2lkIDA9PT1yJiYocj0hMCksdm9pZCAwPT09ZSYmKGU9ITApLHUoKGZ1bmN0aW9uKGksYSxuLG8scyl7aWYoaXNOYU4obykmJiEoaS50eXBlJmYuTU9WRV9UTykpdGhyb3cgbmV3IEVycm9yKFwicGF0aCBtdXN0IHN0YXJ0IHdpdGggbW92ZXRvXCIpO3JldHVybiByJiZpLnR5cGUmZi5IT1JJWl9MSU5FX1RPJiYoaS50eXBlPWYuTElORV9UTyxpLnk9aS5yZWxhdGl2ZT8wOm4pLGUmJmkudHlwZSZmLlZFUlRfTElORV9UTyYmKGkudHlwZT1mLkxJTkVfVE8saS54PWkucmVsYXRpdmU/MDphKSx0JiZpLnR5cGUmZi5DTE9TRV9QQVRIJiYoaS50eXBlPWYuTElORV9UTyxpLng9aS5yZWxhdGl2ZT9vLWE6byxpLnk9aS5yZWxhdGl2ZT9zLW46cyksaS50eXBlJmYuQVJDJiYoMD09PWkuclh8fDA9PT1pLnJZKSYmKGkudHlwZT1mLkxJTkVfVE8sZGVsZXRlIGkuclgsZGVsZXRlIGkuclksZGVsZXRlIGkueFJvdCxkZWxldGUgaS5sQXJjRmxhZyxkZWxldGUgaS5zd2VlcEZsYWcpLGl9KSl9LHQuTk9STUFMSVpFX1NUPWUsdC5RVF9UT19DPW4sdC5JTkZPPXUsdC5TQU5JVElaRT1mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD0wKSxhKHQpO3ZhciByPU5hTixlPU5hTixpPU5hTixuPU5hTjtyZXR1cm4gdSgoZnVuY3Rpb24oYSxvLHMsdSxoKXt2YXIgYz1NYXRoLmFicyx5PSExLHA9MCxtPTA7aWYoYS50eXBlJmYuU01PT1RIX0NVUlZFX1RPJiYocD1pc05hTihyKT8wOm8tcixtPWlzTmFOKGUpPzA6cy1lKSxhLnR5cGUmKGYuQ1VSVkVfVE98Zi5TTU9PVEhfQ1VSVkVfVE8pPyhyPWEucmVsYXRpdmU/bythLngyOmEueDIsZT1hLnJlbGF0aXZlP3MrYS55MjphLnkyKToocj1OYU4sZT1OYU4pLGEudHlwZSZmLlNNT09USF9RVUFEX1RPPyhpPWlzTmFOKGkpP286MipvLWksbj1pc05hTihuKT9zOjIqcy1uKTphLnR5cGUmZi5RVUFEX1RPPyhpPWEucmVsYXRpdmU/bythLngxOmEueDEsbj1hLnJlbGF0aXZlP3MrYS55MTphLnkyKTooaT1OYU4sbj1OYU4pLGEudHlwZSZmLkxJTkVfQ09NTUFORFN8fGEudHlwZSZmLkFSQyYmKDA9PT1hLnJYfHwwPT09YS5yWXx8IWEubEFyY0ZsYWcpfHxhLnR5cGUmZi5DVVJWRV9UT3x8YS50eXBlJmYuU01PT1RIX0NVUlZFX1RPfHxhLnR5cGUmZi5RVUFEX1RPfHxhLnR5cGUmZi5TTU9PVEhfUVVBRF9UTyl7dmFyIE89dm9pZCAwPT09YS54PzA6YS5yZWxhdGl2ZT9hLng6YS54LW8sVD12b2lkIDA9PT1hLnk/MDphLnJlbGF0aXZlP2EueTphLnktcztwPWlzTmFOKGkpP3ZvaWQgMD09PWEueDE/cDphLnJlbGF0aXZlP2EueDphLngxLW86aS1vLG09aXNOYU4obik/dm9pZCAwPT09YS55MT9tOmEucmVsYXRpdmU/YS55OmEueTEtczpuLXM7dmFyIHY9dm9pZCAwPT09YS54Mj8wOmEucmVsYXRpdmU/YS54OmEueDItbyxsPXZvaWQgMD09PWEueTI/MDphLnJlbGF0aXZlP2EueTphLnkyLXM7YyhPKTw9dCYmYyhUKTw9dCYmYyhwKTw9dCYmYyhtKTw9dCYmYyh2KTw9dCYmYyhsKTw9dCYmKHk9ITApfXJldHVybiBhLnR5cGUmZi5DTE9TRV9QQVRIJiZjKG8tdSk8PXQmJmMocy1oKTw9dCYmKHk9ITApLHk/W106YX0pKX0sdC5NQVRSSVg9Tyx0LlJPVEFURT1mdW5jdGlvbih0LHIsZSl7dm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09ZSYmKGU9MCksYSh0LHIsZSk7dmFyIGk9TWF0aC5zaW4odCksbj1NYXRoLmNvcyh0KTtyZXR1cm4gTyhuLGksLWksbixyLXIqbitlKmksZS1yKmktZSpuKX0sdC5UUkFOU0xBVEU9ZnVuY3Rpb24odCxyKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9MCksYSh0LHIpLE8oMSwwLDAsMSx0LHIpfSx0LlNDQUxFPWZ1bmN0aW9uKHQscil7cmV0dXJuIHZvaWQgMD09PXImJihyPXQpLGEodCxyKSxPKHQsMCwwLHIsMCwwKX0sdC5TS0VXX1g9ZnVuY3Rpb24odCl7cmV0dXJuIGEodCksTygxLDAsTWF0aC5hdGFuKHQpLDEsMCwwKX0sdC5TS0VXX1k9ZnVuY3Rpb24odCl7cmV0dXJuIGEodCksTygxLE1hdGguYXRhbih0KSwwLDEsMCwwKX0sdC5YX0FYSVNfU1lNTUVUUlk9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLGEodCksTygtMSwwLDAsMSx0LDApfSx0LllfQVhJU19TWU1NRVRSWT1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksYSh0KSxPKDEsMCwwLC0xLDAsdCl9LHQuQV9UT19DPWZ1bmN0aW9uKCl7cmV0dXJuIHUoKGZ1bmN0aW9uKHQscixlKXtyZXR1cm4gZi5BUkM9PT10LnR5cGU/ZnVuY3Rpb24odCxyLGUpe3ZhciBhLG4scyx1O3QuY1h8fG8odCxyLGUpO2Zvcih2YXIgeT1NYXRoLm1pbih0LnBoaTEsdC5waGkyKSxwPU1hdGgubWF4KHQucGhpMSx0LnBoaTIpLXksbT1NYXRoLmNlaWwocC85MCksTz1uZXcgQXJyYXkobSksVD1yLHY9ZSxsPTA7bDxtO2wrKyl7dmFyIF89Yyh0LnBoaTEsdC5waGkyLGwvbSksTj1jKHQucGhpMSx0LnBoaTIsKGwrMSkvbSkseD1OLV8sZD00LzMqTWF0aC50YW4oeCpoLzQpLEE9W01hdGguY29zKF8qaCktZCpNYXRoLnNpbihfKmgpLE1hdGguc2luKF8qaCkrZCpNYXRoLmNvcyhfKmgpXSxFPUFbMF0sQz1BWzFdLE09W01hdGguY29zKE4qaCksTWF0aC5zaW4oTipoKV0sUj1NWzBdLGc9TVsxXSxJPVtSK2QqTWF0aC5zaW4oTipoKSxnLWQqTWF0aC5jb3MoTipoKV0sUz1JWzBdLEw9SVsxXTtPW2xdPXtyZWxhdGl2ZTp0LnJlbGF0aXZlLHR5cGU6Zi5DVVJWRV9UT307dmFyIEg9ZnVuY3Rpb24ocixlKXt2YXIgYT1pKFtyKnQuclgsZSp0LnJZXSx0LnhSb3QpLG49YVswXSxvPWFbMV07cmV0dXJuW3QuY1grbix0LmNZK29dfTthPUgoRSxDKSxPW2xdLngxPWFbMF0sT1tsXS55MT1hWzFdLG49SChTLEwpLE9bbF0ueDI9blswXSxPW2xdLnkyPW5bMV0scz1IKFIsZyksT1tsXS54PXNbMF0sT1tsXS55PXNbMV0sdC5yZWxhdGl2ZSYmKE9bbF0ueDEtPVQsT1tsXS55MS09dixPW2xdLngyLT1ULE9bbF0ueTItPXYsT1tsXS54LT1ULE9bbF0ueS09diksVD0odT1bT1tsXS54LE9bbF0ueV0pWzBdLHY9dVsxXX1yZXR1cm4gT30odCx0LnJlbGF0aXZlPzA6cix0LnJlbGF0aXZlPzA6ZSk6dH0pKX0sdC5BTk5PVEFURV9BUkNTPWZ1bmN0aW9uKCl7cmV0dXJuIHUoKGZ1bmN0aW9uKHQscixlKXtyZXR1cm4gdC5yZWxhdGl2ZSYmKHI9MCxlPTApLGYuQVJDPT09dC50eXBlJiZvKHQscixlKSx0fSkpfSx0LkNMT05FPVQsdC5DQUxDVUxBVEVfQk9VTkRTPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24odCl7dmFyIHI9e307Zm9yKHZhciBlIGluIHQpcltlXT10W2VdO3JldHVybiByfSxpPXIoKSxhPW4oKSxoPWUoKSxjPXUoKGZ1bmN0aW9uKHIsZSxuKXt2YXIgdT1oKGEoaSh0KHIpKSkpO2Z1bmN0aW9uIE8odCl7dD5jLm1heFgmJihjLm1heFg9dCksdDxjLm1pblgmJihjLm1pblg9dCl9ZnVuY3Rpb24gVCh0KXt0PmMubWF4WSYmKGMubWF4WT10KSx0PGMubWluWSYmKGMubWluWT10KX1pZih1LnR5cGUmZi5EUkFXSU5HX0NPTU1BTkRTJiYoTyhlKSxUKG4pKSx1LnR5cGUmZi5IT1JJWl9MSU5FX1RPJiZPKHUueCksdS50eXBlJmYuVkVSVF9MSU5FX1RPJiZUKHUueSksdS50eXBlJmYuTElORV9UTyYmKE8odS54KSxUKHUueSkpLHUudHlwZSZmLkNVUlZFX1RPKXtPKHUueCksVCh1LnkpO2Zvcih2YXIgdj0wLGw9cChlLHUueDEsdS54Mix1LngpO3Y8bC5sZW5ndGg7disrKXswPCh3PWxbdl0pJiYxPncmJk8obShlLHUueDEsdS54Mix1LngsdykpfWZvcih2YXIgXz0wLE49cChuLHUueTEsdS55Mix1LnkpO188Ti5sZW5ndGg7XysrKXswPCh3PU5bX10pJiYxPncmJlQobShuLHUueTEsdS55Mix1LnksdykpfX1pZih1LnR5cGUmZi5BUkMpe08odS54KSxUKHUueSksbyh1LGUsbik7Zm9yKHZhciB4PXUueFJvdC8xODAqTWF0aC5QSSxkPU1hdGguY29zKHgpKnUuclgsQT1NYXRoLnNpbih4KSp1LnJYLEU9LU1hdGguc2luKHgpKnUuclksQz1NYXRoLmNvcyh4KSp1LnJZLE09dS5waGkxPHUucGhpMj9bdS5waGkxLHUucGhpMl06LTE4MD51LnBoaTI/W3UucGhpMiszNjAsdS5waGkxKzM2MF06W3UucGhpMix1LnBoaTFdLFI9TVswXSxnPU1bMV0sST1mdW5jdGlvbih0KXt2YXIgcj10WzBdLGU9dFsxXSxpPTE4MCpNYXRoLmF0YW4yKGUscikvTWF0aC5QSTtyZXR1cm4gaTxSP2krMzYwOml9LFM9MCxMPXMoRSwtZCwwKS5tYXAoSSk7UzxMLmxlbmd0aDtTKyspeyh3PUxbU10pPlImJnc8ZyYmTyh5KHUuY1gsZCxFLHcpKX1mb3IodmFyIEg9MCxVPXMoQywtQSwwKS5tYXAoSSk7SDxVLmxlbmd0aDtIKyspe3ZhciB3Oyh3PVVbSF0pPlImJnc8ZyYmVCh5KHUuY1ksQSxDLHcpKX19cmV0dXJuIHJ9KSk7cmV0dXJuIGMubWluWD0xLzAsYy5tYXhYPS0xLzAsYy5taW5ZPTEvMCxjLm1heFk9LTEvMCxjfX0odXx8KHU9e30pKTt2YXIgTyxUPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudHJhbnNmb3JtKHUuUk9VTkQodCkpfSx0LnByb3RvdHlwZS50b0Ficz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYW5zZm9ybSh1LlRPX0FCUygpKX0sdC5wcm90b3R5cGUudG9SZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5UT19SRUwoKSl9LHQucHJvdG90eXBlLm5vcm1hbGl6ZUhWWj1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIHRoaXMudHJhbnNmb3JtKHUuTk9STUFMSVpFX0hWWih0LHIsZSkpfSx0LnByb3RvdHlwZS5ub3JtYWxpemVTVD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYW5zZm9ybSh1Lk5PUk1BTElaRV9TVCgpKX0sdC5wcm90b3R5cGUucXRUb0M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5RVF9UT19DKCkpfSx0LnByb3RvdHlwZS5hVG9DPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhbnNmb3JtKHUuQV9UT19DKCkpfSx0LnByb3RvdHlwZS5zYW5pdGl6ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5TQU5JVElaRSh0KSl9LHQucHJvdG90eXBlLnRyYW5zbGF0ZT1mdW5jdGlvbih0LHIpe3JldHVybiB0aGlzLnRyYW5zZm9ybSh1LlRSQU5TTEFURSh0LHIpKX0sdC5wcm90b3R5cGUuc2NhbGU9ZnVuY3Rpb24odCxyKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5TQ0FMRSh0LHIpKX0sdC5wcm90b3R5cGUucm90YXRlPWZ1bmN0aW9uKHQscixlKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5ST1RBVEUodCxyLGUpKX0sdC5wcm90b3R5cGUubWF0cml4PWZ1bmN0aW9uKHQscixlLGksYSxuKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5NQVRSSVgodCxyLGUsaSxhLG4pKX0sdC5wcm90b3R5cGUuc2tld1g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudHJhbnNmb3JtKHUuU0tFV19YKHQpKX0sdC5wcm90b3R5cGUuc2tld1k9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudHJhbnNmb3JtKHUuU0tFV19ZKHQpKX0sdC5wcm90b3R5cGUueFN5bW1ldHJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRyYW5zZm9ybSh1LlhfQVhJU19TWU1NRVRSWSh0KSl9LHQucHJvdG90eXBlLnlTeW1tZXRyeT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5ZX0FYSVNfU1lNTUVUUlkodCkpfSx0LnByb3RvdHlwZS5hbm5vdGF0ZUFyY3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm0odS5BTk5PVEFURV9BUkNTKCkpfSx0fSgpLHY9ZnVuY3Rpb24odCl7cmV0dXJuXCIgXCI9PT10fHxcIlxcdFwiPT09dHx8XCJcXHJcIj09PXR8fFwiXFxuXCI9PT10fSxsPWZ1bmN0aW9uKHQpe3JldHVyblwiMFwiLmNoYXJDb2RlQXQoMCk8PXQuY2hhckNvZGVBdCgwKSYmdC5jaGFyQ29kZUF0KDApPD1cIjlcIi5jaGFyQ29kZUF0KDApfSxfPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXt2YXIgcj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHIuY3VyTnVtYmVyPVwiXCIsci5jdXJDb21tYW5kVHlwZT0tMSxyLmN1ckNvbW1hbmRSZWxhdGl2ZT0hMSxyLmNhblBhcnNlQ29tbWFuZE9yQ29tbWE9ITAsci5jdXJOdW1iZXJIYXNFeHA9ITEsci5jdXJOdW1iZXJIYXNFeHBEaWdpdHM9ITEsci5jdXJOdW1iZXJIYXNEZWNpbWFsPSExLHIuY3VyQXJncz1bXSxyfXJldHVybiByKGUsdCksZS5wcm90b3R5cGUuZmluaXNoPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQmJih0PVtdKSx0aGlzLnBhcnNlKFwiIFwiLHQpLDAhPT10aGlzLmN1ckFyZ3MubGVuZ3RofHwhdGhpcy5jYW5QYXJzZUNvbW1hbmRPckNvbW1hKXRocm93IG5ldyBTeW50YXhFcnJvcihcIlVudGVybWluYXRlZCBjb21tYW5kIGF0IHRoZSBwYXRoIGVuZC5cIik7cmV0dXJuIHR9LGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQscil7dmFyIGU9dGhpczt2b2lkIDA9PT1yJiYocj1bXSk7Zm9yKHZhciBpPWZ1bmN0aW9uKHQpe3IucHVzaCh0KSxlLmN1ckFyZ3MubGVuZ3RoPTAsZS5jYW5QYXJzZUNvbW1hbmRPckNvbW1hPSEwfSxhPTA7YTx0Lmxlbmd0aDthKyspe3ZhciBuPXRbYV0sbz0hKHRoaXMuY3VyQ29tbWFuZFR5cGUhPT1mLkFSQ3x8MyE9PXRoaXMuY3VyQXJncy5sZW5ndGgmJjQhPT10aGlzLmN1ckFyZ3MubGVuZ3RofHwxIT09dGhpcy5jdXJOdW1iZXIubGVuZ3RofHxcIjBcIiE9PXRoaXMuY3VyTnVtYmVyJiZcIjFcIiE9PXRoaXMuY3VyTnVtYmVyKSxzPWwobikmJihcIjBcIj09PXRoaXMuY3VyTnVtYmVyJiZcIjBcIj09PW58fG8pO2lmKCFsKG4pfHxzKWlmKFwiZVwiIT09biYmXCJFXCIhPT1uKWlmKFwiLVwiIT09biYmXCIrXCIhPT1ufHwhdGhpcy5jdXJOdW1iZXJIYXNFeHB8fHRoaXMuY3VyTnVtYmVySGFzRXhwRGlnaXRzKWlmKFwiLlwiIT09bnx8dGhpcy5jdXJOdW1iZXJIYXNFeHB8fHRoaXMuY3VyTnVtYmVySGFzRGVjaW1hbHx8byl7aWYodGhpcy5jdXJOdW1iZXImJi0xIT09dGhpcy5jdXJDb21tYW5kVHlwZSl7dmFyIHU9TnVtYmVyKHRoaXMuY3VyTnVtYmVyKTtpZihpc05hTih1KSl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJJbnZhbGlkIG51bWJlciBlbmRpbmcgYXQgXCIrYSk7aWYodGhpcy5jdXJDb21tYW5kVHlwZT09PWYuQVJDKWlmKDA9PT10aGlzLmN1ckFyZ3MubGVuZ3RofHwxPT09dGhpcy5jdXJBcmdzLmxlbmd0aCl7aWYoMD51KXRocm93IG5ldyBTeW50YXhFcnJvcignRXhwZWN0ZWQgcG9zaXRpdmUgbnVtYmVyLCBnb3QgXCInK3UrJ1wiIGF0IGluZGV4IFwiJythKydcIicpfWVsc2UgaWYoKDM9PT10aGlzLmN1ckFyZ3MubGVuZ3RofHw0PT09dGhpcy5jdXJBcmdzLmxlbmd0aCkmJlwiMFwiIT09dGhpcy5jdXJOdW1iZXImJlwiMVwiIT09dGhpcy5jdXJOdW1iZXIpdGhyb3cgbmV3IFN5bnRheEVycm9yKCdFeHBlY3RlZCBhIGZsYWcsIGdvdCBcIicrdGhpcy5jdXJOdW1iZXIrJ1wiIGF0IGluZGV4IFwiJythKydcIicpO3RoaXMuY3VyQXJncy5wdXNoKHUpLHRoaXMuY3VyQXJncy5sZW5ndGg9PT1OW3RoaXMuY3VyQ29tbWFuZFR5cGVdJiYoZi5IT1JJWl9MSU5FX1RPPT09dGhpcy5jdXJDb21tYW5kVHlwZT9pKHt0eXBlOmYuSE9SSVpfTElORV9UTyxyZWxhdGl2ZTp0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZSx4OnV9KTpmLlZFUlRfTElORV9UTz09PXRoaXMuY3VyQ29tbWFuZFR5cGU/aSh7dHlwZTpmLlZFUlRfTElORV9UTyxyZWxhdGl2ZTp0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZSx5OnV9KTp0aGlzLmN1ckNvbW1hbmRUeXBlPT09Zi5NT1ZFX1RPfHx0aGlzLmN1ckNvbW1hbmRUeXBlPT09Zi5MSU5FX1RPfHx0aGlzLmN1ckNvbW1hbmRUeXBlPT09Zi5TTU9PVEhfUVVBRF9UTz8oaSh7dHlwZTp0aGlzLmN1ckNvbW1hbmRUeXBlLHJlbGF0aXZlOnRoaXMuY3VyQ29tbWFuZFJlbGF0aXZlLHg6dGhpcy5jdXJBcmdzWzBdLHk6dGhpcy5jdXJBcmdzWzFdfSksZi5NT1ZFX1RPPT09dGhpcy5jdXJDb21tYW5kVHlwZSYmKHRoaXMuY3VyQ29tbWFuZFR5cGU9Zi5MSU5FX1RPKSk6dGhpcy5jdXJDb21tYW5kVHlwZT09PWYuQ1VSVkVfVE8/aSh7dHlwZTpmLkNVUlZFX1RPLHJlbGF0aXZlOnRoaXMuY3VyQ29tbWFuZFJlbGF0aXZlLHgxOnRoaXMuY3VyQXJnc1swXSx5MTp0aGlzLmN1ckFyZ3NbMV0seDI6dGhpcy5jdXJBcmdzWzJdLHkyOnRoaXMuY3VyQXJnc1szXSx4OnRoaXMuY3VyQXJnc1s0XSx5OnRoaXMuY3VyQXJnc1s1XX0pOnRoaXMuY3VyQ29tbWFuZFR5cGU9PT1mLlNNT09USF9DVVJWRV9UTz9pKHt0eXBlOmYuU01PT1RIX0NVUlZFX1RPLHJlbGF0aXZlOnRoaXMuY3VyQ29tbWFuZFJlbGF0aXZlLHgyOnRoaXMuY3VyQXJnc1swXSx5Mjp0aGlzLmN1ckFyZ3NbMV0seDp0aGlzLmN1ckFyZ3NbMl0seTp0aGlzLmN1ckFyZ3NbM119KTp0aGlzLmN1ckNvbW1hbmRUeXBlPT09Zi5RVUFEX1RPP2koe3R5cGU6Zi5RVUFEX1RPLHJlbGF0aXZlOnRoaXMuY3VyQ29tbWFuZFJlbGF0aXZlLHgxOnRoaXMuY3VyQXJnc1swXSx5MTp0aGlzLmN1ckFyZ3NbMV0seDp0aGlzLmN1ckFyZ3NbMl0seTp0aGlzLmN1ckFyZ3NbM119KTp0aGlzLmN1ckNvbW1hbmRUeXBlPT09Zi5BUkMmJmkoe3R5cGU6Zi5BUkMscmVsYXRpdmU6dGhpcy5jdXJDb21tYW5kUmVsYXRpdmUsclg6dGhpcy5jdXJBcmdzWzBdLHJZOnRoaXMuY3VyQXJnc1sxXSx4Um90OnRoaXMuY3VyQXJnc1syXSxsQXJjRmxhZzp0aGlzLmN1ckFyZ3NbM10sc3dlZXBGbGFnOnRoaXMuY3VyQXJnc1s0XSx4OnRoaXMuY3VyQXJnc1s1XSx5OnRoaXMuY3VyQXJnc1s2XX0pKSx0aGlzLmN1ck51bWJlcj1cIlwiLHRoaXMuY3VyTnVtYmVySGFzRXhwRGlnaXRzPSExLHRoaXMuY3VyTnVtYmVySGFzRXhwPSExLHRoaXMuY3VyTnVtYmVySGFzRGVjaW1hbD0hMSx0aGlzLmNhblBhcnNlQ29tbWFuZE9yQ29tbWE9ITB9aWYoIXYobikpaWYoXCIsXCI9PT1uJiZ0aGlzLmNhblBhcnNlQ29tbWFuZE9yQ29tbWEpdGhpcy5jYW5QYXJzZUNvbW1hbmRPckNvbW1hPSExO2Vsc2UgaWYoXCIrXCIhPT1uJiZcIi1cIiE9PW4mJlwiLlwiIT09bilpZihzKXRoaXMuY3VyTnVtYmVyPW4sdGhpcy5jdXJOdW1iZXJIYXNEZWNpbWFsPSExO2Vsc2V7aWYoMCE9PXRoaXMuY3VyQXJncy5sZW5ndGgpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVW50ZXJtaW5hdGVkIGNvbW1hbmQgYXQgaW5kZXggXCIrYStcIi5cIik7aWYoIXRoaXMuY2FuUGFyc2VDb21tYW5kT3JDb21tYSl0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgY2hhcmFjdGVyIFwiJytuKydcIiBhdCBpbmRleCAnK2ErXCIuIENvbW1hbmQgY2Fubm90IGZvbGxvdyBjb21tYVwiKTtpZih0aGlzLmNhblBhcnNlQ29tbWFuZE9yQ29tbWE9ITEsXCJ6XCIhPT1uJiZcIlpcIiE9PW4paWYoXCJoXCI9PT1ufHxcIkhcIj09PW4pdGhpcy5jdXJDb21tYW5kVHlwZT1mLkhPUklaX0xJTkVfVE8sdGhpcy5jdXJDb21tYW5kUmVsYXRpdmU9XCJoXCI9PT1uO2Vsc2UgaWYoXCJ2XCI9PT1ufHxcIlZcIj09PW4pdGhpcy5jdXJDb21tYW5kVHlwZT1mLlZFUlRfTElORV9UTyx0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZT1cInZcIj09PW47ZWxzZSBpZihcIm1cIj09PW58fFwiTVwiPT09bil0aGlzLmN1ckNvbW1hbmRUeXBlPWYuTU9WRV9UTyx0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZT1cIm1cIj09PW47ZWxzZSBpZihcImxcIj09PW58fFwiTFwiPT09bil0aGlzLmN1ckNvbW1hbmRUeXBlPWYuTElORV9UTyx0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZT1cImxcIj09PW47ZWxzZSBpZihcImNcIj09PW58fFwiQ1wiPT09bil0aGlzLmN1ckNvbW1hbmRUeXBlPWYuQ1VSVkVfVE8sdGhpcy5jdXJDb21tYW5kUmVsYXRpdmU9XCJjXCI9PT1uO2Vsc2UgaWYoXCJzXCI9PT1ufHxcIlNcIj09PW4pdGhpcy5jdXJDb21tYW5kVHlwZT1mLlNNT09USF9DVVJWRV9UTyx0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZT1cInNcIj09PW47ZWxzZSBpZihcInFcIj09PW58fFwiUVwiPT09bil0aGlzLmN1ckNvbW1hbmRUeXBlPWYuUVVBRF9UTyx0aGlzLmN1ckNvbW1hbmRSZWxhdGl2ZT1cInFcIj09PW47ZWxzZSBpZihcInRcIj09PW58fFwiVFwiPT09bil0aGlzLmN1ckNvbW1hbmRUeXBlPWYuU01PT1RIX1FVQURfVE8sdGhpcy5jdXJDb21tYW5kUmVsYXRpdmU9XCJ0XCI9PT1uO2Vsc2V7aWYoXCJhXCIhPT1uJiZcIkFcIiE9PW4pdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIGNoYXJhY3RlciBcIicrbisnXCIgYXQgaW5kZXggJythK1wiLlwiKTt0aGlzLmN1ckNvbW1hbmRUeXBlPWYuQVJDLHRoaXMuY3VyQ29tbWFuZFJlbGF0aXZlPVwiYVwiPT09bn1lbHNlIHIucHVzaCh7dHlwZTpmLkNMT1NFX1BBVEh9KSx0aGlzLmNhblBhcnNlQ29tbWFuZE9yQ29tbWE9ITAsdGhpcy5jdXJDb21tYW5kVHlwZT0tMX1lbHNlIHRoaXMuY3VyTnVtYmVyPW4sdGhpcy5jdXJOdW1iZXJIYXNEZWNpbWFsPVwiLlwiPT09bn1lbHNlIHRoaXMuY3VyTnVtYmVyKz1uLHRoaXMuY3VyTnVtYmVySGFzRGVjaW1hbD0hMDtlbHNlIHRoaXMuY3VyTnVtYmVyKz1uO2Vsc2UgdGhpcy5jdXJOdW1iZXIrPW4sdGhpcy5jdXJOdW1iZXJIYXNFeHA9ITA7ZWxzZSB0aGlzLmN1ck51bWJlcis9bix0aGlzLmN1ck51bWJlckhhc0V4cERpZ2l0cz10aGlzLmN1ck51bWJlckhhc0V4cH1yZXR1cm4gcn0sZS5wcm90b3R5cGUudHJhbnNmb3JtPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuY3JlYXRlKHRoaXMse3BhcnNlOnt2YWx1ZTpmdW5jdGlvbihyLGUpe3ZvaWQgMD09PWUmJihlPVtdKTtmb3IodmFyIGk9MCxhPU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5wYXJzZS5jYWxsKHRoaXMscik7aTxhLmxlbmd0aDtpKyspe3ZhciBuPWFbaV0sbz10KG4pO0FycmF5LmlzQXJyYXkobyk/ZS5wdXNoLmFwcGx5KGUsbyk6ZS5wdXNoKG8pfXJldHVybiBlfX19KX0sZX0oVCksZj1mdW5jdGlvbih0KXtmdW5jdGlvbiBpKHIpe3ZhciBlPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gZS5jb21tYW5kcz1cInN0cmluZ1wiPT10eXBlb2Ygcj9pLnBhcnNlKHIpOnIsZX1yZXR1cm4gcihpLHQpLGkucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbigpe3JldHVybiBpLmVuY29kZSh0aGlzLmNvbW1hbmRzKX0saS5wcm90b3R5cGUuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7dmFyIHQ9dS5DQUxDVUxBVEVfQk9VTkRTKCk7cmV0dXJuIHRoaXMudHJhbnNmb3JtKHQpLHR9LGkucHJvdG90eXBlLnRyYW5zZm9ybT1mdW5jdGlvbih0KXtmb3IodmFyIHI9W10sZT0wLGk9dGhpcy5jb21tYW5kcztlPGkubGVuZ3RoO2UrKyl7dmFyIGE9dChpW2VdKTtBcnJheS5pc0FycmF5KGEpP3IucHVzaC5hcHBseShyLGEpOnIucHVzaChhKX1yZXR1cm4gdGhpcy5jb21tYW5kcz1yLHRoaXN9LGkuZW5jb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfSxpLnBhcnNlPWZ1bmN0aW9uKHQpe3ZhciByPW5ldyBfLGU9W107cmV0dXJuIHIucGFyc2UodCxlKSxyLmZpbmlzaChlKSxlfSxpLkNMT1NFX1BBVEg9MSxpLk1PVkVfVE89MixpLkhPUklaX0xJTkVfVE89NCxpLlZFUlRfTElORV9UTz04LGkuTElORV9UTz0xNixpLkNVUlZFX1RPPTMyLGkuU01PT1RIX0NVUlZFX1RPPTY0LGkuUVVBRF9UTz0xMjgsaS5TTU9PVEhfUVVBRF9UTz0yNTYsaS5BUkM9NTEyLGkuTElORV9DT01NQU5EUz1pLkxJTkVfVE98aS5IT1JJWl9MSU5FX1RPfGkuVkVSVF9MSU5FX1RPLGkuRFJBV0lOR19DT01NQU5EUz1pLkhPUklaX0xJTkVfVE98aS5WRVJUX0xJTkVfVE98aS5MSU5FX1RPfGkuQ1VSVkVfVE98aS5TTU9PVEhfQ1VSVkVfVE98aS5RVUFEX1RPfGkuU01PT1RIX1FVQURfVE98aS5BUkMsaX0oVCksTj0oKE89e30pW2YuTU9WRV9UT109MixPW2YuTElORV9UT109MixPW2YuSE9SSVpfTElORV9UT109MSxPW2YuVkVSVF9MSU5FX1RPXT0xLE9bZi5DTE9TRV9QQVRIXT0wLE9bZi5RVUFEX1RPXT00LE9bZi5TTU9PVEhfUVVBRF9UT109MixPW2YuQ1VSVkVfVE9dPTYsT1tmLlNNT09USF9DVVJWRV9UT109NCxPW2YuQVJDXT03LE8pO2V4cG9ydHtOIGFzIENPTU1BTkRfQVJHX0NPVU5UUyxmIGFzIFNWR1BhdGhEYXRhLF8gYXMgU1ZHUGF0aERhdGFQYXJzZXIsdSBhcyBTVkdQYXRoRGF0YVRyYW5zZm9ybWVyLGUgYXMgZW5jb2RlU1ZHUGF0aH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TVkdQYXRoRGF0YS5tb2R1bGUuanMubWFwXG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlIC0tIHVzZWQgZm9yIGNhbGN1bGF0aW9ucyAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB1bmljb3JuL3ByZWZlci1xdWVyeS1zZWxlY3RvciAtLSBhaW1pbmcgYXRcbiAgYmFja3dhcmQtY29tcGF0aWJpbGl0eSAqL1xuXG4vKipcbiogU3RhY2tCbHVyIC0gYSBmYXN0IGFsbW9zdCBHYXVzc2lhbiBCbHVyIEZvciBDYW52YXNcbipcbiogSW4gY2FzZSB5b3UgZmluZCB0aGlzIGNsYXNzIHVzZWZ1bCAtIGVzcGVjaWFsbHkgaW4gY29tbWVyY2lhbCBwcm9qZWN0cyAtXG4qIEkgYW0gbm90IHRvdGFsbHkgdW5oYXBweSBmb3IgYSBzbWFsbCBkb25hdGlvbiB0byBteSBQYXlQYWwgYWNjb3VudFxuKiBtYXJpb0BxdWFzaW1vbmRvLmRlXG4qXG4qIE9yIHN1cHBvcnQgbWUgb24gZmxhdHRyOlxuKiB7QGxpbmsgaHR0cHM6Ly9mbGF0dHIuY29tL3RoaW5nLzcyNzkxL1N0YWNrQmx1ci1hLWZhc3QtYWxtb3N0LUdhdXNzaWFuLUJsdXItRWZmZWN0LWZvci1DYW52YXNKYXZhc2NyaXB0fS5cbipcbiogQG1vZHVsZSBTdGFja0JsdXJcbiogQGF1dGhvciBNYXJpbyBLbGluZ2VtYW5uXG4qIENvbnRhY3Q6IG1hcmlvQHF1YXNpbW9uZG8uY29tXG4qIFdlYnNpdGU6IHtAbGluayBodHRwOi8vd3d3LnF1YXNpbW9uZG8uY29tL1N0YWNrQmx1ckZvckNhbnZhcy9TdGFja0JsdXJEZW1vLmh0bWx9XG4qIFR3aXR0ZXI6IEBxdWFzaW1vbmRvXG4qXG4qIEBjb3B5cmlnaHQgKGMpIDIwMTAgTWFyaW8gS2xpbmdlbWFublxuKlxuKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXRcbiogcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4qIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4qIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZVxuKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuKiBjb25kaXRpb25zOlxuKlxuKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbipcbiogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4qIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4qIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4qIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xudmFyIG11bFRhYmxlID0gWzUxMiwgNTEyLCA0NTYsIDUxMiwgMzI4LCA0NTYsIDMzNSwgNTEyLCA0MDUsIDMyOCwgMjcxLCA0NTYsIDM4OCwgMzM1LCAyOTIsIDUxMiwgNDU0LCA0MDUsIDM2NCwgMzI4LCAyOTgsIDI3MSwgNDk2LCA0NTYsIDQyMCwgMzg4LCAzNjAsIDMzNSwgMzEyLCAyOTIsIDI3MywgNTEyLCA0ODIsIDQ1NCwgNDI4LCA0MDUsIDM4MywgMzY0LCAzNDUsIDMyOCwgMzEyLCAyOTgsIDI4NCwgMjcxLCAyNTksIDQ5NiwgNDc1LCA0NTYsIDQzNywgNDIwLCA0MDQsIDM4OCwgMzc0LCAzNjAsIDM0NywgMzM1LCAzMjMsIDMxMiwgMzAyLCAyOTIsIDI4MiwgMjczLCAyNjUsIDUxMiwgNDk3LCA0ODIsIDQ2OCwgNDU0LCA0NDEsIDQyOCwgNDE3LCA0MDUsIDM5NCwgMzgzLCAzNzMsIDM2NCwgMzU0LCAzNDUsIDMzNywgMzI4LCAzMjAsIDMxMiwgMzA1LCAyOTgsIDI5MSwgMjg0LCAyNzgsIDI3MSwgMjY1LCAyNTksIDUwNywgNDk2LCA0ODUsIDQ3NSwgNDY1LCA0NTYsIDQ0NiwgNDM3LCA0MjgsIDQyMCwgNDEyLCA0MDQsIDM5NiwgMzg4LCAzODEsIDM3NCwgMzY3LCAzNjAsIDM1NCwgMzQ3LCAzNDEsIDMzNSwgMzI5LCAzMjMsIDMxOCwgMzEyLCAzMDcsIDMwMiwgMjk3LCAyOTIsIDI4NywgMjgyLCAyNzgsIDI3MywgMjY5LCAyNjUsIDI2MSwgNTEyLCA1MDUsIDQ5NywgNDg5LCA0ODIsIDQ3NSwgNDY4LCA0NjEsIDQ1NCwgNDQ3LCA0NDEsIDQzNSwgNDI4LCA0MjIsIDQxNywgNDExLCA0MDUsIDM5OSwgMzk0LCAzODksIDM4MywgMzc4LCAzNzMsIDM2OCwgMzY0LCAzNTksIDM1NCwgMzUwLCAzNDUsIDM0MSwgMzM3LCAzMzIsIDMyOCwgMzI0LCAzMjAsIDMxNiwgMzEyLCAzMDksIDMwNSwgMzAxLCAyOTgsIDI5NCwgMjkxLCAyODcsIDI4NCwgMjgxLCAyNzgsIDI3NCwgMjcxLCAyNjgsIDI2NSwgMjYyLCAyNTksIDI1NywgNTA3LCA1MDEsIDQ5NiwgNDkxLCA0ODUsIDQ4MCwgNDc1LCA0NzAsIDQ2NSwgNDYwLCA0NTYsIDQ1MSwgNDQ2LCA0NDIsIDQzNywgNDMzLCA0MjgsIDQyNCwgNDIwLCA0MTYsIDQxMiwgNDA4LCA0MDQsIDQwMCwgMzk2LCAzOTIsIDM4OCwgMzg1LCAzODEsIDM3NywgMzc0LCAzNzAsIDM2NywgMzYzLCAzNjAsIDM1NywgMzU0LCAzNTAsIDM0NywgMzQ0LCAzNDEsIDMzOCwgMzM1LCAzMzIsIDMyOSwgMzI2LCAzMjMsIDMyMCwgMzE4LCAzMTUsIDMxMiwgMzEwLCAzMDcsIDMwNCwgMzAyLCAyOTksIDI5NywgMjk0LCAyOTIsIDI4OSwgMjg3LCAyODUsIDI4MiwgMjgwLCAyNzgsIDI3NSwgMjczLCAyNzEsIDI2OSwgMjY3LCAyNjUsIDI2MywgMjYxLCAyNTldO1xudmFyIHNoZ1RhYmxlID0gWzksIDExLCAxMiwgMTMsIDEzLCAxNCwgMTQsIDE1LCAxNSwgMTUsIDE1LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNF07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEhUTUxJbWFnZUVsZW1lbnR9IGltZ1xuICogQHBhcmFtIHtzdHJpbmd8SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtGbG9hdH0gcmFkaXVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJsdXJBbHBoYUNoYW5uZWxcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlT2Zmc2V0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNraXBTdHlsZXNcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuZnVuY3Rpb24gcHJvY2Vzc0ltYWdlKGltZywgY2FudmFzLCByYWRpdXMsIGJsdXJBbHBoYUNoYW5uZWwsIHVzZU9mZnNldCwgc2tpcFN0eWxlcykge1xuICBpZiAodHlwZW9mIGltZyA9PT0gJ3N0cmluZycpIHtcbiAgICBpbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbWcpO1xuICB9XG5cbiAgaWYgKCFpbWcgfHwgISgnbmF0dXJhbFdpZHRoJyBpbiBpbWcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRpbWVuc2lvblR5cGUgPSB1c2VPZmZzZXQgPyAnb2Zmc2V0JyA6ICduYXR1cmFsJztcbiAgdmFyIHcgPSBpbWdbZGltZW5zaW9uVHlwZSArICdXaWR0aCddO1xuICB2YXIgaCA9IGltZ1tkaW1lbnNpb25UeXBlICsgJ0hlaWdodCddO1xuXG4gIGlmICh0eXBlb2YgY2FudmFzID09PSAnc3RyaW5nJykge1xuICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhcyk7XG4gIH1cblxuICBpZiAoIWNhbnZhcyB8fCAhKCdnZXRDb250ZXh0JyBpbiBjYW52YXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFza2lwU3R5bGVzKSB7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gdyArICdweCc7XG4gICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xuICB9XG5cbiAgY2FudmFzLndpZHRoID0gdztcbiAgY2FudmFzLmhlaWdodCA9IGg7XG4gIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHcsIGgpO1xuICBjb250ZXh0LmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZy5uYXR1cmFsV2lkdGgsIGltZy5uYXR1cmFsSGVpZ2h0LCAwLCAwLCB3LCBoKTtcblxuICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGJsdXJBbHBoYUNoYW5uZWwpIHtcbiAgICBwcm9jZXNzQ2FudmFzUkdCQShjYW52YXMsIDAsIDAsIHcsIGgsIHJhZGl1cyk7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzc0NhbnZhc1JHQihjYW52YXMsIDAsIDAsIHcsIGgsIHJhZGl1cyk7XG4gIH1cbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BYXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFlcbiAqIEBwYXJhbSB7SW50ZWdlcn0gd2lkdGhcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaGVpZ2h0XG4gKiBAdGhyb3dzIHtFcnJvcnxUeXBlRXJyb3J9XG4gKiBAcmV0dXJucyB7SW1hZ2VEYXRhfSBTZWUge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NhbnZhcy5odG1sI2ltYWdlZGF0YX1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEltYWdlRGF0YUZyb21DYW52YXMoY2FudmFzLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGlmICh0eXBlb2YgY2FudmFzID09PSAnc3RyaW5nJykge1xuICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhcyk7XG4gIH1cblxuICBpZiAoIWNhbnZhcyB8fCBfdHlwZW9mKGNhbnZhcykgIT09ICdvYmplY3QnIHx8ICEoJ2dldENvbnRleHQnIGluIGNhbnZhcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgY2FudmFzIHdpdGggYGdldENvbnRleHRgIG1ldGhvZCAnICsgJ2luIHByb2Nlc3NDYW52YXNSR0IoQSkgY2FsbHMhJyk7XG4gIH1cblxuICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZ2V0SW1hZ2VEYXRhKHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gYWNjZXNzIGltYWdlIGRhdGE6ICcgKyBlKTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gdG9wWFxuICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BZXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHdpZHRoXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGhlaWdodFxuICogQHBhcmFtIHtGbG9hdH0gcmFkaXVzXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cblxuZnVuY3Rpb24gcHJvY2Vzc0NhbnZhc1JHQkEoY2FudmFzLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJhZGl1cyB8PSAwO1xuICB2YXIgaW1hZ2VEYXRhID0gZ2V0SW1hZ2VEYXRhRnJvbUNhbnZhcyhjYW52YXMsIHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQpO1xuICBpbWFnZURhdGEgPSBwcm9jZXNzSW1hZ2VEYXRhUkdCQShpbWFnZURhdGEsIHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cyk7XG4gIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLnB1dEltYWdlRGF0YShpbWFnZURhdGEsIHRvcFgsIHRvcFkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlRGF0YX0gaW1hZ2VEYXRhXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFhcbiAqIEBwYXJhbSB7SW50ZWdlcn0gdG9wWVxuICogQHBhcmFtIHtJbnRlZ2VyfSB3aWR0aFxuICogQHBhcmFtIHtJbnRlZ2VyfSBoZWlnaHRcbiAqIEBwYXJhbSB7RmxvYXR9IHJhZGl1c1xuICogQHJldHVybnMge0ltYWdlRGF0YX1cbiAqL1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NJbWFnZURhdGFSR0JBKGltYWdlRGF0YSwgdG9wWCwgdG9wWSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gIHZhciBwaXhlbHMgPSBpbWFnZURhdGEuZGF0YTtcbiAgdmFyIGRpdiA9IDIgKiByYWRpdXMgKyAxOyAvLyBjb25zdCB3NCA9IHdpZHRoIDw8IDI7XG5cbiAgdmFyIHdpZHRoTWludXMxID0gd2lkdGggLSAxO1xuICB2YXIgaGVpZ2h0TWludXMxID0gaGVpZ2h0IC0gMTtcbiAgdmFyIHJhZGl1c1BsdXMxID0gcmFkaXVzICsgMTtcbiAgdmFyIHN1bUZhY3RvciA9IHJhZGl1c1BsdXMxICogKHJhZGl1c1BsdXMxICsgMSkgLyAyO1xuICB2YXIgc3RhY2tTdGFydCA9IG5ldyBCbHVyU3RhY2soKTtcbiAgdmFyIHN0YWNrID0gc3RhY2tTdGFydDtcbiAgdmFyIHN0YWNrRW5kO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgZGl2OyBpKyspIHtcbiAgICBzdGFjayA9IHN0YWNrLm5leHQgPSBuZXcgQmx1clN0YWNrKCk7XG5cbiAgICBpZiAoaSA9PT0gcmFkaXVzUGx1czEpIHtcbiAgICAgIHN0YWNrRW5kID0gc3RhY2s7XG4gICAgfVxuICB9XG5cbiAgc3RhY2submV4dCA9IHN0YWNrU3RhcnQ7XG4gIHZhciBzdGFja0luID0gbnVsbCxcbiAgICAgIHN0YWNrT3V0ID0gbnVsbCxcbiAgICAgIHl3ID0gMCxcbiAgICAgIHlpID0gMDtcbiAgdmFyIG11bFN1bSA9IG11bFRhYmxlW3JhZGl1c107XG4gIHZhciBzaGdTdW0gPSBzaGdUYWJsZVtyYWRpdXNdO1xuXG4gIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBzdGFjayA9IHN0YWNrU3RhcnQ7XG4gICAgdmFyIHByID0gcGl4ZWxzW3lpXSxcbiAgICAgICAgcGcgPSBwaXhlbHNbeWkgKyAxXSxcbiAgICAgICAgcGIgPSBwaXhlbHNbeWkgKyAyXSxcbiAgICAgICAgcGEgPSBwaXhlbHNbeWkgKyAzXTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCByYWRpdXNQbHVzMTsgX2krKykge1xuICAgICAgc3RhY2suciA9IHByO1xuICAgICAgc3RhY2suZyA9IHBnO1xuICAgICAgc3RhY2suYiA9IHBiO1xuICAgICAgc3RhY2suYSA9IHBhO1xuICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuICAgIH1cblxuICAgIHZhciBySW5TdW0gPSAwLFxuICAgICAgICBnSW5TdW0gPSAwLFxuICAgICAgICBiSW5TdW0gPSAwLFxuICAgICAgICBhSW5TdW0gPSAwLFxuICAgICAgICByT3V0U3VtID0gcmFkaXVzUGx1czEgKiBwcixcbiAgICAgICAgZ091dFN1bSA9IHJhZGl1c1BsdXMxICogcGcsXG4gICAgICAgIGJPdXRTdW0gPSByYWRpdXNQbHVzMSAqIHBiLFxuICAgICAgICBhT3V0U3VtID0gcmFkaXVzUGx1czEgKiBwYSxcbiAgICAgICAgclN1bSA9IHN1bUZhY3RvciAqIHByLFxuICAgICAgICBnU3VtID0gc3VtRmFjdG9yICogcGcsXG4gICAgICAgIGJTdW0gPSBzdW1GYWN0b3IgKiBwYixcbiAgICAgICAgYVN1bSA9IHN1bUZhY3RvciAqIHBhO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMTsgX2kyIDwgcmFkaXVzUGx1czE7IF9pMisrKSB7XG4gICAgICB2YXIgcCA9IHlpICsgKCh3aWR0aE1pbnVzMSA8IF9pMiA/IHdpZHRoTWludXMxIDogX2kyKSA8PCAyKTtcbiAgICAgIHZhciByID0gcGl4ZWxzW3BdLFxuICAgICAgICAgIGcgPSBwaXhlbHNbcCArIDFdLFxuICAgICAgICAgIGIgPSBwaXhlbHNbcCArIDJdLFxuICAgICAgICAgIGEgPSBwaXhlbHNbcCArIDNdO1xuICAgICAgdmFyIHJicyA9IHJhZGl1c1BsdXMxIC0gX2kyO1xuICAgICAgclN1bSArPSAoc3RhY2suciA9IHIpICogcmJzO1xuICAgICAgZ1N1bSArPSAoc3RhY2suZyA9IGcpICogcmJzO1xuICAgICAgYlN1bSArPSAoc3RhY2suYiA9IGIpICogcmJzO1xuICAgICAgYVN1bSArPSAoc3RhY2suYSA9IGEpICogcmJzO1xuICAgICAgckluU3VtICs9IHI7XG4gICAgICBnSW5TdW0gKz0gZztcbiAgICAgIGJJblN1bSArPSBiO1xuICAgICAgYUluU3VtICs9IGE7XG4gICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG4gICAgfVxuXG4gICAgc3RhY2tJbiA9IHN0YWNrU3RhcnQ7XG4gICAgc3RhY2tPdXQgPSBzdGFja0VuZDtcblxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgdmFyIHBhSW5pdGlhbCA9IGFTdW0gKiBtdWxTdW0gPj4gc2hnU3VtO1xuICAgICAgcGl4ZWxzW3lpICsgM10gPSBwYUluaXRpYWw7XG5cbiAgICAgIGlmIChwYUluaXRpYWwgIT09IDApIHtcbiAgICAgICAgdmFyIF9hMiA9IDI1NSAvIHBhSW5pdGlhbDtcblxuICAgICAgICBwaXhlbHNbeWldID0gKHJTdW0gKiBtdWxTdW0gPj4gc2hnU3VtKSAqIF9hMjtcbiAgICAgICAgcGl4ZWxzW3lpICsgMV0gPSAoZ1N1bSAqIG11bFN1bSA+PiBzaGdTdW0pICogX2EyO1xuICAgICAgICBwaXhlbHNbeWkgKyAyXSA9IChiU3VtICogbXVsU3VtID4+IHNoZ1N1bSkgKiBfYTI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaXhlbHNbeWldID0gcGl4ZWxzW3lpICsgMV0gPSBwaXhlbHNbeWkgKyAyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJTdW0gLT0gck91dFN1bTtcbiAgICAgIGdTdW0gLT0gZ091dFN1bTtcbiAgICAgIGJTdW0gLT0gYk91dFN1bTtcbiAgICAgIGFTdW0gLT0gYU91dFN1bTtcbiAgICAgIHJPdXRTdW0gLT0gc3RhY2tJbi5yO1xuICAgICAgZ091dFN1bSAtPSBzdGFja0luLmc7XG4gICAgICBiT3V0U3VtIC09IHN0YWNrSW4uYjtcbiAgICAgIGFPdXRTdW0gLT0gc3RhY2tJbi5hO1xuXG4gICAgICB2YXIgX3AgPSB4ICsgcmFkaXVzICsgMTtcblxuICAgICAgX3AgPSB5dyArIChfcCA8IHdpZHRoTWludXMxID8gX3AgOiB3aWR0aE1pbnVzMSkgPDwgMjtcbiAgICAgIHJJblN1bSArPSBzdGFja0luLnIgPSBwaXhlbHNbX3BdO1xuICAgICAgZ0luU3VtICs9IHN0YWNrSW4uZyA9IHBpeGVsc1tfcCArIDFdO1xuICAgICAgYkluU3VtICs9IHN0YWNrSW4uYiA9IHBpeGVsc1tfcCArIDJdO1xuICAgICAgYUluU3VtICs9IHN0YWNrSW4uYSA9IHBpeGVsc1tfcCArIDNdO1xuICAgICAgclN1bSArPSBySW5TdW07XG4gICAgICBnU3VtICs9IGdJblN1bTtcbiAgICAgIGJTdW0gKz0gYkluU3VtO1xuICAgICAgYVN1bSArPSBhSW5TdW07XG4gICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xuICAgICAgdmFyIF9zdGFja091dCA9IHN0YWNrT3V0LFxuICAgICAgICAgIF9yID0gX3N0YWNrT3V0LnIsXG4gICAgICAgICAgX2cgPSBfc3RhY2tPdXQuZyxcbiAgICAgICAgICBfYiA9IF9zdGFja091dC5iLFxuICAgICAgICAgIF9hID0gX3N0YWNrT3V0LmE7XG4gICAgICByT3V0U3VtICs9IF9yO1xuICAgICAgZ091dFN1bSArPSBfZztcbiAgICAgIGJPdXRTdW0gKz0gX2I7XG4gICAgICBhT3V0U3VtICs9IF9hO1xuICAgICAgckluU3VtIC09IF9yO1xuICAgICAgZ0luU3VtIC09IF9nO1xuICAgICAgYkluU3VtIC09IF9iO1xuICAgICAgYUluU3VtIC09IF9hO1xuICAgICAgc3RhY2tPdXQgPSBzdGFja091dC5uZXh0O1xuICAgICAgeWkgKz0gNDtcbiAgICB9XG5cbiAgICB5dyArPSB3aWR0aDtcbiAgfVxuXG4gIGZvciAodmFyIF94ID0gMDsgX3ggPCB3aWR0aDsgX3grKykge1xuICAgIHlpID0gX3ggPDwgMjtcblxuICAgIHZhciBfcHIgPSBwaXhlbHNbeWldLFxuICAgICAgICBfcGcgPSBwaXhlbHNbeWkgKyAxXSxcbiAgICAgICAgX3BiID0gcGl4ZWxzW3lpICsgMl0sXG4gICAgICAgIF9wYSA9IHBpeGVsc1t5aSArIDNdLFxuICAgICAgICBfck91dFN1bSA9IHJhZGl1c1BsdXMxICogX3ByLFxuICAgICAgICBfZ091dFN1bSA9IHJhZGl1c1BsdXMxICogX3BnLFxuICAgICAgICBfYk91dFN1bSA9IHJhZGl1c1BsdXMxICogX3BiLFxuICAgICAgICBfYU91dFN1bSA9IHJhZGl1c1BsdXMxICogX3BhLFxuICAgICAgICBfclN1bSA9IHN1bUZhY3RvciAqIF9wcixcbiAgICAgICAgX2dTdW0gPSBzdW1GYWN0b3IgKiBfcGcsXG4gICAgICAgIF9iU3VtID0gc3VtRmFjdG9yICogX3BiLFxuICAgICAgICBfYVN1bSA9IHN1bUZhY3RvciAqIF9wYTtcblxuICAgIHN0YWNrID0gc3RhY2tTdGFydDtcblxuICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IHJhZGl1c1BsdXMxOyBfaTMrKykge1xuICAgICAgc3RhY2suciA9IF9wcjtcbiAgICAgIHN0YWNrLmcgPSBfcGc7XG4gICAgICBzdGFjay5iID0gX3BiO1xuICAgICAgc3RhY2suYSA9IF9wYTtcbiAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB3aWR0aDtcbiAgICB2YXIgX2dJblN1bSA9IDAsXG4gICAgICAgIF9iSW5TdW0gPSAwLFxuICAgICAgICBfYUluU3VtID0gMCxcbiAgICAgICAgX3JJblN1bSA9IDA7XG5cbiAgICBmb3IgKHZhciBfaTQgPSAxOyBfaTQgPD0gcmFkaXVzOyBfaTQrKykge1xuICAgICAgeWkgPSB5cCArIF94IDw8IDI7XG5cbiAgICAgIHZhciBfcmJzID0gcmFkaXVzUGx1czEgLSBfaTQ7XG5cbiAgICAgIF9yU3VtICs9IChzdGFjay5yID0gX3ByID0gcGl4ZWxzW3lpXSkgKiBfcmJzO1xuICAgICAgX2dTdW0gKz0gKHN0YWNrLmcgPSBfcGcgPSBwaXhlbHNbeWkgKyAxXSkgKiBfcmJzO1xuICAgICAgX2JTdW0gKz0gKHN0YWNrLmIgPSBfcGIgPSBwaXhlbHNbeWkgKyAyXSkgKiBfcmJzO1xuICAgICAgX2FTdW0gKz0gKHN0YWNrLmEgPSBfcGEgPSBwaXhlbHNbeWkgKyAzXSkgKiBfcmJzO1xuICAgICAgX3JJblN1bSArPSBfcHI7XG4gICAgICBfZ0luU3VtICs9IF9wZztcbiAgICAgIF9iSW5TdW0gKz0gX3BiO1xuICAgICAgX2FJblN1bSArPSBfcGE7XG4gICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG5cbiAgICAgIGlmIChfaTQgPCBoZWlnaHRNaW51czEpIHtcbiAgICAgICAgeXAgKz0gd2lkdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeWkgPSBfeDtcbiAgICBzdGFja0luID0gc3RhY2tTdGFydDtcbiAgICBzdGFja091dCA9IHN0YWNrRW5kO1xuXG4gICAgZm9yICh2YXIgX3kgPSAwOyBfeSA8IGhlaWdodDsgX3krKykge1xuICAgICAgdmFyIF9wMiA9IHlpIDw8IDI7XG5cbiAgICAgIHBpeGVsc1tfcDIgKyAzXSA9IF9wYSA9IF9hU3VtICogbXVsU3VtID4+IHNoZ1N1bTtcblxuICAgICAgaWYgKF9wYSA+IDApIHtcbiAgICAgICAgX3BhID0gMjU1IC8gX3BhO1xuICAgICAgICBwaXhlbHNbX3AyXSA9IChfclN1bSAqIG11bFN1bSA+PiBzaGdTdW0pICogX3BhO1xuICAgICAgICBwaXhlbHNbX3AyICsgMV0gPSAoX2dTdW0gKiBtdWxTdW0gPj4gc2hnU3VtKSAqIF9wYTtcbiAgICAgICAgcGl4ZWxzW19wMiArIDJdID0gKF9iU3VtICogbXVsU3VtID4+IHNoZ1N1bSkgKiBfcGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaXhlbHNbX3AyXSA9IHBpeGVsc1tfcDIgKyAxXSA9IHBpeGVsc1tfcDIgKyAyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIF9yU3VtIC09IF9yT3V0U3VtO1xuICAgICAgX2dTdW0gLT0gX2dPdXRTdW07XG4gICAgICBfYlN1bSAtPSBfYk91dFN1bTtcbiAgICAgIF9hU3VtIC09IF9hT3V0U3VtO1xuICAgICAgX3JPdXRTdW0gLT0gc3RhY2tJbi5yO1xuICAgICAgX2dPdXRTdW0gLT0gc3RhY2tJbi5nO1xuICAgICAgX2JPdXRTdW0gLT0gc3RhY2tJbi5iO1xuICAgICAgX2FPdXRTdW0gLT0gc3RhY2tJbi5hO1xuICAgICAgX3AyID0gX3ggKyAoKF9wMiA9IF95ICsgcmFkaXVzUGx1czEpIDwgaGVpZ2h0TWludXMxID8gX3AyIDogaGVpZ2h0TWludXMxKSAqIHdpZHRoIDw8IDI7XG4gICAgICBfclN1bSArPSBfckluU3VtICs9IHN0YWNrSW4uciA9IHBpeGVsc1tfcDJdO1xuICAgICAgX2dTdW0gKz0gX2dJblN1bSArPSBzdGFja0luLmcgPSBwaXhlbHNbX3AyICsgMV07XG4gICAgICBfYlN1bSArPSBfYkluU3VtICs9IHN0YWNrSW4uYiA9IHBpeGVsc1tfcDIgKyAyXTtcbiAgICAgIF9hU3VtICs9IF9hSW5TdW0gKz0gc3RhY2tJbi5hID0gcGl4ZWxzW19wMiArIDNdO1xuICAgICAgc3RhY2tJbiA9IHN0YWNrSW4ubmV4dDtcbiAgICAgIF9yT3V0U3VtICs9IF9wciA9IHN0YWNrT3V0LnI7XG4gICAgICBfZ091dFN1bSArPSBfcGcgPSBzdGFja091dC5nO1xuICAgICAgX2JPdXRTdW0gKz0gX3BiID0gc3RhY2tPdXQuYjtcbiAgICAgIF9hT3V0U3VtICs9IF9wYSA9IHN0YWNrT3V0LmE7XG4gICAgICBfckluU3VtIC09IF9wcjtcbiAgICAgIF9nSW5TdW0gLT0gX3BnO1xuICAgICAgX2JJblN1bSAtPSBfcGI7XG4gICAgICBfYUluU3VtIC09IF9wYTtcbiAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcbiAgICAgIHlpICs9IHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbWFnZURhdGE7XG59XG4vKipcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BYXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFlcbiAqIEBwYXJhbSB7SW50ZWdlcn0gd2lkdGhcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaGVpZ2h0XG4gKiBAcGFyYW0ge0Zsb2F0fSByYWRpdXNcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuXG5mdW5jdGlvbiBwcm9jZXNzQ2FudmFzUkdCKGNhbnZhcywgdG9wWCwgdG9wWSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gIGlmIChpc05hTihyYWRpdXMpIHx8IHJhZGl1cyA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByYWRpdXMgfD0gMDtcbiAgdmFyIGltYWdlRGF0YSA9IGdldEltYWdlRGF0YUZyb21DYW52YXMoY2FudmFzLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0KTtcbiAgaW1hZ2VEYXRhID0gcHJvY2Vzc0ltYWdlRGF0YVJHQihpbWFnZURhdGEsIHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cyk7XG4gIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLnB1dEltYWdlRGF0YShpbWFnZURhdGEsIHRvcFgsIHRvcFkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlRGF0YX0gaW1hZ2VEYXRhXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFhcbiAqIEBwYXJhbSB7SW50ZWdlcn0gdG9wWVxuICogQHBhcmFtIHtJbnRlZ2VyfSB3aWR0aFxuICogQHBhcmFtIHtJbnRlZ2VyfSBoZWlnaHRcbiAqIEBwYXJhbSB7RmxvYXR9IHJhZGl1c1xuICogQHJldHVybnMge0ltYWdlRGF0YX1cbiAqL1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NJbWFnZURhdGFSR0IoaW1hZ2VEYXRhLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgdmFyIHBpeGVscyA9IGltYWdlRGF0YS5kYXRhO1xuICB2YXIgZGl2ID0gMiAqIHJhZGl1cyArIDE7IC8vIGNvbnN0IHc0ID0gd2lkdGggPDwgMjtcblxuICB2YXIgd2lkdGhNaW51czEgPSB3aWR0aCAtIDE7XG4gIHZhciBoZWlnaHRNaW51czEgPSBoZWlnaHQgLSAxO1xuICB2YXIgcmFkaXVzUGx1czEgPSByYWRpdXMgKyAxO1xuICB2YXIgc3VtRmFjdG9yID0gcmFkaXVzUGx1czEgKiAocmFkaXVzUGx1czEgKyAxKSAvIDI7XG4gIHZhciBzdGFja1N0YXJ0ID0gbmV3IEJsdXJTdGFjaygpO1xuICB2YXIgc3RhY2sgPSBzdGFja1N0YXJ0O1xuICB2YXIgc3RhY2tFbmQ7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBkaXY7IGkrKykge1xuICAgIHN0YWNrID0gc3RhY2submV4dCA9IG5ldyBCbHVyU3RhY2soKTtcblxuICAgIGlmIChpID09PSByYWRpdXNQbHVzMSkge1xuICAgICAgc3RhY2tFbmQgPSBzdGFjaztcbiAgICB9XG4gIH1cblxuICBzdGFjay5uZXh0ID0gc3RhY2tTdGFydDtcbiAgdmFyIHN0YWNrSW4gPSBudWxsO1xuICB2YXIgc3RhY2tPdXQgPSBudWxsO1xuICB2YXIgbXVsU3VtID0gbXVsVGFibGVbcmFkaXVzXTtcbiAgdmFyIHNoZ1N1bSA9IHNoZ1RhYmxlW3JhZGl1c107XG4gIHZhciBwLCByYnM7XG4gIHZhciB5dyA9IDAsXG4gICAgICB5aSA9IDA7XG5cbiAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIHZhciBwciA9IHBpeGVsc1t5aV0sXG4gICAgICAgIHBnID0gcGl4ZWxzW3lpICsgMV0sXG4gICAgICAgIHBiID0gcGl4ZWxzW3lpICsgMl0sXG4gICAgICAgIHJPdXRTdW0gPSByYWRpdXNQbHVzMSAqIHByLFxuICAgICAgICBnT3V0U3VtID0gcmFkaXVzUGx1czEgKiBwZyxcbiAgICAgICAgYk91dFN1bSA9IHJhZGl1c1BsdXMxICogcGIsXG4gICAgICAgIHJTdW0gPSBzdW1GYWN0b3IgKiBwcixcbiAgICAgICAgZ1N1bSA9IHN1bUZhY3RvciAqIHBnLFxuICAgICAgICBiU3VtID0gc3VtRmFjdG9yICogcGI7XG4gICAgc3RhY2sgPSBzdGFja1N0YXJ0O1xuXG4gICAgZm9yICh2YXIgX2k1ID0gMDsgX2k1IDwgcmFkaXVzUGx1czE7IF9pNSsrKSB7XG4gICAgICBzdGFjay5yID0gcHI7XG4gICAgICBzdGFjay5nID0gcGc7XG4gICAgICBzdGFjay5iID0gcGI7XG4gICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG4gICAgfVxuXG4gICAgdmFyIHJJblN1bSA9IDAsXG4gICAgICAgIGdJblN1bSA9IDAsXG4gICAgICAgIGJJblN1bSA9IDA7XG5cbiAgICBmb3IgKHZhciBfaTYgPSAxOyBfaTYgPCByYWRpdXNQbHVzMTsgX2k2KyspIHtcbiAgICAgIHAgPSB5aSArICgod2lkdGhNaW51czEgPCBfaTYgPyB3aWR0aE1pbnVzMSA6IF9pNikgPDwgMik7XG4gICAgICByU3VtICs9IChzdGFjay5yID0gcHIgPSBwaXhlbHNbcF0pICogKHJicyA9IHJhZGl1c1BsdXMxIC0gX2k2KTtcbiAgICAgIGdTdW0gKz0gKHN0YWNrLmcgPSBwZyA9IHBpeGVsc1twICsgMV0pICogcmJzO1xuICAgICAgYlN1bSArPSAoc3RhY2suYiA9IHBiID0gcGl4ZWxzW3AgKyAyXSkgKiByYnM7XG4gICAgICBySW5TdW0gKz0gcHI7XG4gICAgICBnSW5TdW0gKz0gcGc7XG4gICAgICBiSW5TdW0gKz0gcGI7XG4gICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG4gICAgfVxuXG4gICAgc3RhY2tJbiA9IHN0YWNrU3RhcnQ7XG4gICAgc3RhY2tPdXQgPSBzdGFja0VuZDtcblxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgcGl4ZWxzW3lpXSA9IHJTdW0gKiBtdWxTdW0gPj4gc2hnU3VtO1xuICAgICAgcGl4ZWxzW3lpICsgMV0gPSBnU3VtICogbXVsU3VtID4+IHNoZ1N1bTtcbiAgICAgIHBpeGVsc1t5aSArIDJdID0gYlN1bSAqIG11bFN1bSA+PiBzaGdTdW07XG4gICAgICByU3VtIC09IHJPdXRTdW07XG4gICAgICBnU3VtIC09IGdPdXRTdW07XG4gICAgICBiU3VtIC09IGJPdXRTdW07XG4gICAgICByT3V0U3VtIC09IHN0YWNrSW4ucjtcbiAgICAgIGdPdXRTdW0gLT0gc3RhY2tJbi5nO1xuICAgICAgYk91dFN1bSAtPSBzdGFja0luLmI7XG4gICAgICBwID0geXcgKyAoKHAgPSB4ICsgcmFkaXVzICsgMSkgPCB3aWR0aE1pbnVzMSA/IHAgOiB3aWR0aE1pbnVzMSkgPDwgMjtcbiAgICAgIHJJblN1bSArPSBzdGFja0luLnIgPSBwaXhlbHNbcF07XG4gICAgICBnSW5TdW0gKz0gc3RhY2tJbi5nID0gcGl4ZWxzW3AgKyAxXTtcbiAgICAgIGJJblN1bSArPSBzdGFja0luLmIgPSBwaXhlbHNbcCArIDJdO1xuICAgICAgclN1bSArPSBySW5TdW07XG4gICAgICBnU3VtICs9IGdJblN1bTtcbiAgICAgIGJTdW0gKz0gYkluU3VtO1xuICAgICAgc3RhY2tJbiA9IHN0YWNrSW4ubmV4dDtcbiAgICAgIHJPdXRTdW0gKz0gcHIgPSBzdGFja091dC5yO1xuICAgICAgZ091dFN1bSArPSBwZyA9IHN0YWNrT3V0Lmc7XG4gICAgICBiT3V0U3VtICs9IHBiID0gc3RhY2tPdXQuYjtcbiAgICAgIHJJblN1bSAtPSBwcjtcbiAgICAgIGdJblN1bSAtPSBwZztcbiAgICAgIGJJblN1bSAtPSBwYjtcbiAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcbiAgICAgIHlpICs9IDQ7XG4gICAgfVxuXG4gICAgeXcgKz0gd2lkdGg7XG4gIH1cblxuICBmb3IgKHZhciBfeDIgPSAwOyBfeDIgPCB3aWR0aDsgX3gyKyspIHtcbiAgICB5aSA9IF94MiA8PCAyO1xuXG4gICAgdmFyIF9wcjIgPSBwaXhlbHNbeWldLFxuICAgICAgICBfcGcyID0gcGl4ZWxzW3lpICsgMV0sXG4gICAgICAgIF9wYjIgPSBwaXhlbHNbeWkgKyAyXSxcbiAgICAgICAgX3JPdXRTdW0yID0gcmFkaXVzUGx1czEgKiBfcHIyLFxuICAgICAgICBfZ091dFN1bTIgPSByYWRpdXNQbHVzMSAqIF9wZzIsXG4gICAgICAgIF9iT3V0U3VtMiA9IHJhZGl1c1BsdXMxICogX3BiMixcbiAgICAgICAgX3JTdW0yID0gc3VtRmFjdG9yICogX3ByMixcbiAgICAgICAgX2dTdW0yID0gc3VtRmFjdG9yICogX3BnMixcbiAgICAgICAgX2JTdW0yID0gc3VtRmFjdG9yICogX3BiMjtcblxuICAgIHN0YWNrID0gc3RhY2tTdGFydDtcblxuICAgIGZvciAodmFyIF9pNyA9IDA7IF9pNyA8IHJhZGl1c1BsdXMxOyBfaTcrKykge1xuICAgICAgc3RhY2suciA9IF9wcjI7XG4gICAgICBzdGFjay5nID0gX3BnMjtcbiAgICAgIHN0YWNrLmIgPSBfcGIyO1xuICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuICAgIH1cblxuICAgIHZhciBfckluU3VtMiA9IDAsXG4gICAgICAgIF9nSW5TdW0yID0gMCxcbiAgICAgICAgX2JJblN1bTIgPSAwO1xuXG4gICAgZm9yICh2YXIgX2k4ID0gMSwgeXAgPSB3aWR0aDsgX2k4IDw9IHJhZGl1czsgX2k4KyspIHtcbiAgICAgIHlpID0geXAgKyBfeDIgPDwgMjtcbiAgICAgIF9yU3VtMiArPSAoc3RhY2suciA9IF9wcjIgPSBwaXhlbHNbeWldKSAqIChyYnMgPSByYWRpdXNQbHVzMSAtIF9pOCk7XG4gICAgICBfZ1N1bTIgKz0gKHN0YWNrLmcgPSBfcGcyID0gcGl4ZWxzW3lpICsgMV0pICogcmJzO1xuICAgICAgX2JTdW0yICs9IChzdGFjay5iID0gX3BiMiA9IHBpeGVsc1t5aSArIDJdKSAqIHJicztcbiAgICAgIF9ySW5TdW0yICs9IF9wcjI7XG4gICAgICBfZ0luU3VtMiArPSBfcGcyO1xuICAgICAgX2JJblN1bTIgKz0gX3BiMjtcbiAgICAgIHN0YWNrID0gc3RhY2submV4dDtcblxuICAgICAgaWYgKF9pOCA8IGhlaWdodE1pbnVzMSkge1xuICAgICAgICB5cCArPSB3aWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB5aSA9IF94MjtcbiAgICBzdGFja0luID0gc3RhY2tTdGFydDtcbiAgICBzdGFja091dCA9IHN0YWNrRW5kO1xuXG4gICAgZm9yICh2YXIgX3kyID0gMDsgX3kyIDwgaGVpZ2h0OyBfeTIrKykge1xuICAgICAgcCA9IHlpIDw8IDI7XG4gICAgICBwaXhlbHNbcF0gPSBfclN1bTIgKiBtdWxTdW0gPj4gc2hnU3VtO1xuICAgICAgcGl4ZWxzW3AgKyAxXSA9IF9nU3VtMiAqIG11bFN1bSA+PiBzaGdTdW07XG4gICAgICBwaXhlbHNbcCArIDJdID0gX2JTdW0yICogbXVsU3VtID4+IHNoZ1N1bTtcbiAgICAgIF9yU3VtMiAtPSBfck91dFN1bTI7XG4gICAgICBfZ1N1bTIgLT0gX2dPdXRTdW0yO1xuICAgICAgX2JTdW0yIC09IF9iT3V0U3VtMjtcbiAgICAgIF9yT3V0U3VtMiAtPSBzdGFja0luLnI7XG4gICAgICBfZ091dFN1bTIgLT0gc3RhY2tJbi5nO1xuICAgICAgX2JPdXRTdW0yIC09IHN0YWNrSW4uYjtcbiAgICAgIHAgPSBfeDIgKyAoKHAgPSBfeTIgKyByYWRpdXNQbHVzMSkgPCBoZWlnaHRNaW51czEgPyBwIDogaGVpZ2h0TWludXMxKSAqIHdpZHRoIDw8IDI7XG4gICAgICBfclN1bTIgKz0gX3JJblN1bTIgKz0gc3RhY2tJbi5yID0gcGl4ZWxzW3BdO1xuICAgICAgX2dTdW0yICs9IF9nSW5TdW0yICs9IHN0YWNrSW4uZyA9IHBpeGVsc1twICsgMV07XG4gICAgICBfYlN1bTIgKz0gX2JJblN1bTIgKz0gc3RhY2tJbi5iID0gcGl4ZWxzW3AgKyAyXTtcbiAgICAgIHN0YWNrSW4gPSBzdGFja0luLm5leHQ7XG4gICAgICBfck91dFN1bTIgKz0gX3ByMiA9IHN0YWNrT3V0LnI7XG4gICAgICBfZ091dFN1bTIgKz0gX3BnMiA9IHN0YWNrT3V0Lmc7XG4gICAgICBfYk91dFN1bTIgKz0gX3BiMiA9IHN0YWNrT3V0LmI7XG4gICAgICBfckluU3VtMiAtPSBfcHIyO1xuICAgICAgX2dJblN1bTIgLT0gX3BnMjtcbiAgICAgIF9iSW5TdW0yIC09IF9wYjI7XG4gICAgICBzdGFja091dCA9IHN0YWNrT3V0Lm5leHQ7XG4gICAgICB5aSArPSB3aWR0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW1hZ2VEYXRhO1xufVxuLyoqXG4gKlxuICovXG5cblxudmFyIEJsdXJTdGFjayA9XG4vKipcbiAqIFNldCBwcm9wZXJ0aWVzLlxuICovXG5mdW5jdGlvbiBCbHVyU3RhY2soKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbHVyU3RhY2spO1xuXG4gIHRoaXMuciA9IDA7XG4gIHRoaXMuZyA9IDA7XG4gIHRoaXMuYiA9IDA7XG4gIHRoaXMuYSA9IDA7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59O1xuXG5leHBvcnQgeyBCbHVyU3RhY2ssIHByb2Nlc3NDYW52YXNSR0IgYXMgY2FudmFzUkdCLCBwcm9jZXNzQ2FudmFzUkdCQSBhcyBjYW52YXNSR0JBLCBwcm9jZXNzSW1hZ2UgYXMgaW1hZ2UsIHByb2Nlc3NJbWFnZURhdGFSR0IgYXMgaW1hZ2VEYXRhUkdCLCBwcm9jZXNzSW1hZ2VEYXRhUkdCQSBhcyBpbWFnZURhdGFSR0JBIH07XG4iLCJpbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzJztcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InO1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzJztcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzJztcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMnO1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aC5qcyc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMnO1xuaW1wb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZSBmcm9tICdyYWYnO1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMnO1xuaW1wb3J0IFJHQkNvbG9yIGZyb20gJ3JnYmNvbG9yJztcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyc7XG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzJztcbmltcG9ydCB7IFNWR1BhdGhEYXRhIH0gZnJvbSAnc3ZnLXBhdGhkYXRhJztcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMnO1xuaW1wb3J0IHsgY2FudmFzUkdCQSB9IGZyb20gJ3N0YWNrYmx1ci1jYW52YXMnO1xuXG4vKipcclxuICogT3B0aW9ucyBwcmVzZXQgZm9yIGBPZmZzY3JlZW5DYW52YXNgLlxyXG4gKiBAcGFyYW0gY29uZmlnIC0gUHJlc2V0IHJlcXVpcmVtZW50cy5cclxuICogQHBhcmFtIGNvbmZpZy5ET01QYXJzZXIgLSBYTUwvSFRNTCBwYXJzZXIgZnJvbSBzdHJpbmcgaW50byBET00gRG9jdW1lbnQuXHJcbiAqIEByZXR1cm5zIFByZXNldCBvYmplY3QuXHJcbiAqL1xuZnVuY3Rpb24gb2Zmc2NyZWVuKCkge1xuICB2YXIge1xuICAgIERPTVBhcnNlcjogRE9NUGFyc2VyRmFsbGJhY2tcbiAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBwcmVzZXQgPSB7XG4gICAgd2luZG93OiBudWxsLFxuICAgIGlnbm9yZUFuaW1hdGlvbjogdHJ1ZSxcbiAgICBpZ25vcmVNb3VzZTogdHJ1ZSxcbiAgICBET01QYXJzZXI6IERPTVBhcnNlckZhbGxiYWNrLFxuXG4gICAgY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHJldHVybiBuZXcgT2Zmc2NyZWVuQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0sXG5cbiAgICBjcmVhdGVJbWFnZSh1cmwpIHtcbiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCh1cmwpO1xuICAgICAgICB2YXIgYmxvYiA9IHlpZWxkIHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgICAgdmFyIGltZyA9IHlpZWxkIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IpO1xuICAgICAgICByZXR1cm4gaW1nO1xuICAgICAgfSkoKTtcbiAgICB9XG5cbiAgfTtcblxuICBpZiAodHlwZW9mIERPTVBhcnNlciAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIERPTVBhcnNlckZhbGxiYWNrID09PSAndW5kZWZpbmVkJykge1xuICAgIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkocHJlc2V0LCAnRE9NUGFyc2VyJyk7XG4gIH1cblxuICByZXR1cm4gcHJlc2V0O1xufVxuXG4vKipcclxuICogT3B0aW9ucyBwcmVzZXQgZm9yIGBub2RlLWNhbnZhc2AuXHJcbiAqIEBwYXJhbSBjb25maWcgLSBQcmVzZXQgcmVxdWlyZW1lbnRzLlxyXG4gKiBAcGFyYW0gY29uZmlnLkRPTVBhcnNlciAtIFhNTC9IVE1MIHBhcnNlciBmcm9tIHN0cmluZyBpbnRvIERPTSBEb2N1bWVudC5cclxuICogQHBhcmFtIGNvbmZpZy5jYW52YXMgLSBgbm9kZS1jYW52YXNgIGV4cG9ydHMuXHJcbiAqIEBwYXJhbSBjb25maWcuZmV0Y2ggLSBXSEFUV0ctY29tcGF0aWJsZSBgZmV0Y2hgIGZ1bmN0aW9uLlxyXG4gKiBAcmV0dXJucyBQcmVzZXQgb2JqZWN0LlxyXG4gKi9cbmZ1bmN0aW9uIG5vZGUoX3JlZikge1xuICB2YXIge1xuICAgIERPTVBhcnNlcixcbiAgICBjYW52YXMsXG4gICAgZmV0Y2hcbiAgfSA9IF9yZWY7XG4gIHJldHVybiB7XG4gICAgd2luZG93OiBudWxsLFxuICAgIGlnbm9yZUFuaW1hdGlvbjogdHJ1ZSxcbiAgICBpZ25vcmVNb3VzZTogdHJ1ZSxcbiAgICBET01QYXJzZXIsXG4gICAgZmV0Y2gsXG4gICAgY3JlYXRlQ2FudmFzOiBjYW52YXMuY3JlYXRlQ2FudmFzLFxuICAgIGNyZWF0ZUltYWdlOiBjYW52YXMubG9hZEltYWdlXG4gIH07XG59XG5cbnZhciBpbmRleCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRvZmZzY3JlZW46IG9mZnNjcmVlbixcblx0bm9kZTogbm9kZVxufSk7XG5cbi8qKlxyXG4gKiBIVE1MLXNhZmUgY29tcHJlc3Mgd2hpdGUtc3BhY2VzLlxyXG4gKiBAcGFyYW0gc3RyIC0gU3RyaW5nIHRvIGNvbXByZXNzLlxyXG4gKiBAcmV0dXJucyBTdHJpbmcuXHJcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NTcGFjZXMoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKD8hXFx1MzAwMClcXHMrL2dtLCAnICcpO1xufVxuLyoqXHJcbiAqIEhUTUwtc2FmZSBsZWZ0IHRyaW0uXHJcbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgdG8gdHJpbS5cclxuICogQHJldHVybnMgU3RyaW5nLlxyXG4gKi9cblxuZnVuY3Rpb24gdHJpbUxlZnQoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXltcXG4gXFx0XSsvLCAnJyk7XG59XG4vKipcclxuICogSFRNTC1zYWZlIHJpZ2h0IHRyaW0uXHJcbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgdG8gdHJpbS5cclxuICogQHJldHVybnMgU3RyaW5nLlxyXG4gKi9cblxuZnVuY3Rpb24gdHJpbVJpZ2h0KHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXG4gXFx0XSskLywgJycpO1xufVxuLyoqXHJcbiAqIFN0cmluZyB0byBudW1iZXJzIGFycmF5LlxyXG4gKiBAcGFyYW0gc3RyIC0gTnVtYmVycyBzdHJpbmcuXHJcbiAqIEByZXR1cm5zIE51bWJlcnMgYXJyYXkuXHJcbiAqL1xuXG5mdW5jdGlvbiB0b051bWJlcnMoc3RyKSB7XG4gIHZhciBtYXRjaGVzID0gKHN0ciB8fCAnJykubWF0Y2goLy0/KFxcZCsoPzpcXC5cXGQqKD86W2VFXVsrLV0/XFxkKyk/KT98XFwuXFxkKykoPz1cXER8JCkvZ20pIHx8IFtdO1xuICByZXR1cm4gbWF0Y2hlcy5tYXAocGFyc2VGbG9hdCk7XG59IC8vIE1pY3Jvc29mdCBFZGdlIGZpeFxuXG52YXIgYWxsVXBwZXJjYXNlID0gL15bQS1aLV0rJC87XG4vKipcclxuICogTm9ybWFsaXplIGF0dHJpYnV0ZSBuYW1lLlxyXG4gKiBAcGFyYW0gbmFtZSAtIEF0dHJpYnV0ZSBuYW1lLlxyXG4gKiBAcmV0dXJucyBOb3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lLlxyXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplQXR0cmlidXRlTmFtZShuYW1lKSB7XG4gIGlmIChhbGxVcHBlcmNhc2UudGVzdChuYW1lKSkge1xuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn1cbi8qKlxyXG4gKiBQYXJzZSBleHRlcm5hbCBVUkwuXHJcbiAqIEBwYXJhbSB1cmwgLSBDU1MgdXJsIHN0cmluZy5cclxuICogQHJldHVybnMgUGFyc2VkIFVSTC5cclxuICovXG5cbmZ1bmN0aW9uIHBhcnNlRXh0ZXJuYWxVcmwodXJsKSB7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZSBxdW90ZXMgWzJdXG4gIC8vICAgICAgICAgICAgICAgICAgICAgIHYgICAgICAgICBkb3VibGUgcXVvdGVzIFszXVxuICAvLyAgICAgICAgICAgICAgICAgICAgICB2ICAgICAgICAgdiAgICAgICAgIG5vIHF1b3RlcyBbNF1cbiAgLy8gICAgICAgICAgICAgICAgICAgICAgdiAgICAgICAgIHYgICAgICAgICB2XG4gIHZhciB1cmxNYXRjaCA9IC91cmxcXCgoJyhbXiddKyknfFwiKFteXCJdKylcInwoW14nXCIpXSspKVxcKS8uZXhlYyh1cmwpIHx8IFtdO1xuICByZXR1cm4gdXJsTWF0Y2hbMl0gfHwgdXJsTWF0Y2hbM10gfHwgdXJsTWF0Y2hbNF07XG59XG4vKipcclxuICogVHJhbnNmb3JtIGZsb2F0cyB0byBpbnRlZ2VycyBpbiByZ2IgY29sb3JzLlxyXG4gKiBAcGFyYW0gY29sb3IgLSBDb2xvciB0byBub3JtYWxpemUuXHJcbiAqIEByZXR1cm5zIE5vcm1hbGl6ZWQgY29sb3IuXHJcbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVDb2xvcihjb2xvcikge1xuICBpZiAoIWNvbG9yLnN0YXJ0c1dpdGgoJ3JnYicpKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIHJnYlBhcnRzID0gMztcbiAgdmFyIG5vcm1hbGl6ZWRDb2xvciA9IGNvbG9yLnJlcGxhY2UoL1xcZCsoXFwuXFxkKyk/L2csIChudW0sIGlzRmxvYXQpID0+IHJnYlBhcnRzLS0gJiYgaXNGbG9hdCA/IFN0cmluZyhNYXRoLnJvdW5kKHBhcnNlRmxvYXQobnVtKSkpIDogbnVtKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWRDb2xvcjtcbn1cblxuLy8gc2xpZ2h0bHkgbW9kaWZpZWQgdmVyc2lvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2VlZ2Fuc3RyZWV0L3NwZWNpZmljaXR5L2Jsb2IvbWFzdGVyL3NwZWNpZmljaXR5LmpzXG52YXIgYXR0cmlidXRlUmVnZXggPSAvKFxcW1teXFxdXStcXF0pL2c7XG52YXIgaWRSZWdleCA9IC8oI1teXFxzKz5+Lls6XSspL2c7XG52YXIgY2xhc3NSZWdleCA9IC8oXFwuW15cXHMrPn4uWzpdKykvZztcbnZhciBwc2V1ZG9FbGVtZW50UmVnZXggPSAvKDo6W15cXHMrPn4uWzpdK3w6Zmlyc3QtbGluZXw6Zmlyc3QtbGV0dGVyfDpiZWZvcmV8OmFmdGVyKS9naTtcbnZhciBwc2V1ZG9DbGFzc1dpdGhCcmFja2V0c1JlZ2V4ID0gLyg6W1xcdy1dK1xcKFteKV0qXFwpKS9naTtcbnZhciBwc2V1ZG9DbGFzc1JlZ2V4ID0gLyg6W15cXHMrPn4uWzpdKykvZztcbnZhciBlbGVtZW50UmVnZXggPSAvKFteXFxzKz5+Lls6XSspL2c7XG5cbmZ1bmN0aW9uIGZpbmRTZWxlY3Rvck1hdGNoKHNlbGVjdG9yLCByZWdleCkge1xuICB2YXIgbWF0Y2hlcyA9IHJlZ2V4LmV4ZWMoc2VsZWN0b3IpO1xuXG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiBbc2VsZWN0b3IsIDBdO1xuICB9XG5cbiAgcmV0dXJuIFtzZWxlY3Rvci5yZXBsYWNlKHJlZ2V4LCAnICcpLCBtYXRjaGVzLmxlbmd0aF07XG59XG4vKipcclxuICogTWVhc3VyZSBzZWxlY3RvciBzcGVjaWZpY2l0eS5cclxuICogQHBhcmFtIHNlbGVjdG9yIC0gU2VsZWN0b3IgdG8gbWVhc3VyZS5cclxuICogQHJldHVybnMgU3BlY2lmaWNpdHkuXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNlbGVjdG9yU3BlY2lmaWNpdHkoc2VsZWN0b3IpIHtcbiAgdmFyIHNwZWNpZmljaXR5ID0gWzAsIDAsIDBdO1xuICB2YXIgY3VycmVudFNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvOm5vdFxcKChbXildKilcXCkvZywgJyAgICAgJDEgJykucmVwbGFjZSgve1tcXHNcXFNdKi9nbSwgJyAnKTtcbiAgdmFyIGRlbHRhID0gMDtcbiAgW2N1cnJlbnRTZWxlY3RvciwgZGVsdGFdID0gZmluZFNlbGVjdG9yTWF0Y2goY3VycmVudFNlbGVjdG9yLCBhdHRyaWJ1dGVSZWdleCk7XG4gIHNwZWNpZmljaXR5WzFdICs9IGRlbHRhO1xuICBbY3VycmVudFNlbGVjdG9yLCBkZWx0YV0gPSBmaW5kU2VsZWN0b3JNYXRjaChjdXJyZW50U2VsZWN0b3IsIGlkUmVnZXgpO1xuICBzcGVjaWZpY2l0eVswXSArPSBkZWx0YTtcbiAgW2N1cnJlbnRTZWxlY3RvciwgZGVsdGFdID0gZmluZFNlbGVjdG9yTWF0Y2goY3VycmVudFNlbGVjdG9yLCBjbGFzc1JlZ2V4KTtcbiAgc3BlY2lmaWNpdHlbMV0gKz0gZGVsdGE7XG4gIFtjdXJyZW50U2VsZWN0b3IsIGRlbHRhXSA9IGZpbmRTZWxlY3Rvck1hdGNoKGN1cnJlbnRTZWxlY3RvciwgcHNldWRvRWxlbWVudFJlZ2V4KTtcbiAgc3BlY2lmaWNpdHlbMl0gKz0gZGVsdGE7XG4gIFtjdXJyZW50U2VsZWN0b3IsIGRlbHRhXSA9IGZpbmRTZWxlY3Rvck1hdGNoKGN1cnJlbnRTZWxlY3RvciwgcHNldWRvQ2xhc3NXaXRoQnJhY2tldHNSZWdleCk7XG4gIHNwZWNpZmljaXR5WzFdICs9IGRlbHRhO1xuICBbY3VycmVudFNlbGVjdG9yLCBkZWx0YV0gPSBmaW5kU2VsZWN0b3JNYXRjaChjdXJyZW50U2VsZWN0b3IsIHBzZXVkb0NsYXNzUmVnZXgpO1xuICBzcGVjaWZpY2l0eVsxXSArPSBkZWx0YTtcbiAgY3VycmVudFNlbGVjdG9yID0gY3VycmVudFNlbGVjdG9yLnJlcGxhY2UoL1sqXFxzKz5+XS9nLCAnICcpLnJlcGxhY2UoL1sjLl0vZywgJyAnKTtcbiAgW2N1cnJlbnRTZWxlY3RvciwgZGVsdGFdID0gZmluZFNlbGVjdG9yTWF0Y2goY3VycmVudFNlbGVjdG9yLCBlbGVtZW50UmVnZXgpOyAvLyBsZ3RtIFtqcy91c2VsZXNzLWFzc2lnbm1lbnQtdG8tbG9jYWxdXG5cbiAgc3BlY2lmaWNpdHlbMl0gKz0gZGVsdGE7XG4gIHJldHVybiBzcGVjaWZpY2l0eS5qb2luKCcnKTtcbn1cblxudmFyIFBTRVVET19aRVJPID0gLjAwMDAwMDAxO1xuLyoqXHJcbiAqIFZlY3RvciBtYWduaXR1ZGUuXHJcbiAqIEBwYXJhbSB2XHJcbiAqIEByZXR1cm5zIE51bWJlciByZXN1bHQuXHJcbiAqL1xuXG5mdW5jdGlvbiB2ZWN0b3JNYWduaXR1ZGUodikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHZbMF0sIDIpICsgTWF0aC5wb3codlsxXSwgMikpO1xufVxuLyoqXHJcbiAqIFJhdGlvIGJldHdlZW4gdHdvIHZlY3RvcnMuXHJcbiAqIEBwYXJhbSB1XHJcbiAqIEBwYXJhbSB2XHJcbiAqIEByZXR1cm5zIE51bWJlciByZXN1bHQuXHJcbiAqL1xuXG5mdW5jdGlvbiB2ZWN0b3JzUmF0aW8odSwgdikge1xuICByZXR1cm4gKHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV0pIC8gKHZlY3Rvck1hZ25pdHVkZSh1KSAqIHZlY3Rvck1hZ25pdHVkZSh2KSk7XG59XG4vKipcclxuICogQW5nbGUgYmV0d2VlbiB0d28gdmVjdG9ycy5cclxuICogQHBhcmFtIHVcclxuICogQHBhcmFtIHZcclxuICogQHJldHVybnMgTnVtYmVyIHJlc3VsdC5cclxuICovXG5cbmZ1bmN0aW9uIHZlY3RvcnNBbmdsZSh1LCB2KSB7XG4gIHJldHVybiAodVswXSAqIHZbMV0gPCB1WzFdICogdlswXSA/IC0xIDogMSkgKiBNYXRoLmFjb3ModmVjdG9yc1JhdGlvKHUsIHYpKTtcbn1cbmZ1bmN0aW9uIENCMSh0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5mdW5jdGlvbiBDQjIodCkge1xuICByZXR1cm4gMyAqIHQgKiB0ICogKDEgLSB0KTtcbn1cbmZ1bmN0aW9uIENCMyh0KSB7XG4gIHJldHVybiAzICogdCAqICgxIC0gdCkgKiAoMSAtIHQpO1xufVxuZnVuY3Rpb24gQ0I0KHQpIHtcbiAgcmV0dXJuICgxIC0gdCkgKiAoMSAtIHQpICogKDEgLSB0KTtcbn1cbmZ1bmN0aW9uIFFCMSh0KSB7XG4gIHJldHVybiB0ICogdDtcbn1cbmZ1bmN0aW9uIFFCMih0KSB7XG4gIHJldHVybiAyICogdCAqICgxIC0gdCk7XG59XG5mdW5jdGlvbiBRQjModCkge1xuICByZXR1cm4gKDEgLSB0KSAqICgxIC0gdCk7XG59XG5cbmNsYXNzIFByb3BlcnR5IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuaXNOb3JtYWxpemVkQ29sb3IgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBlbXB0eShkb2N1bWVudCkge1xuICAgIHJldHVybiBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICdFTVBUWScsICcnKTtcbiAgfVxuXG4gIHNwbGl0KCkge1xuICAgIHZhciBzZXBhcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcgJztcbiAgICB2YXIge1xuICAgICAgZG9jdW1lbnQsXG4gICAgICBuYW1lXG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuIGNvbXByZXNzU3BhY2VzKHRoaXMuZ2V0U3RyaW5nKCkpLnRyaW0oKS5zcGxpdChzZXBhcmF0b3IpLm1hcCh2YWx1ZSA9PiBuZXcgUHJvcGVydHkoZG9jdW1lbnQsIG5hbWUsIHZhbHVlKSk7XG4gIH1cblxuICBoYXNWYWx1ZSh6ZXJvSXNWYWx1ZSkge1xuICAgIHZhciB7XG4gICAgICB2YWx1ZVxuICAgIH0gPSB0aGlzO1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gJycgJiYgKHplcm9Jc1ZhbHVlIHx8IHZhbHVlICE9PSAwKSAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuICB9XG5cbiAgaXNTdHJpbmcocmVnZXhwKSB7XG4gICAgdmFyIHtcbiAgICAgIHZhbHVlXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHJlc3VsdCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG5cbiAgICBpZiAoIXJlc3VsdCB8fCAhcmVnZXhwKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiByZWdleHAudGVzdCh2YWx1ZSk7XG4gIH1cblxuICBpc1VybERlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTdHJpbmcoL151cmxcXCgvKTtcbiAgfVxuXG4gIGlzUGl4ZWxzKCkge1xuICAgIGlmICghdGhpcy5oYXNWYWx1ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFzU3RyaW5nID0gdGhpcy5nZXRTdHJpbmcoKTtcblxuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBhc1N0cmluZy5lbmRzV2l0aCgncHgnKTpcbiAgICAgIGNhc2UgL15bMC05XSskLy50ZXN0KGFzU3RyaW5nKTpcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFZhbHVlKGRlZikge1xuICAgIGlmICh0eXBlb2YgZGVmID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBkZWY7XG4gIH1cblxuICBnZXROdW1iZXIoZGVmKSB7XG4gICAgaWYgKCF0aGlzLmhhc1ZhbHVlKCkpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZGVmKTtcbiAgICB9XG5cbiAgICB2YXIge1xuICAgICAgdmFsdWVcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuaXNTdHJpbmcoLyUkLykpIHtcbiAgICAgIG4gLz0gMTAwLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG47XG4gIH1cblxuICBnZXRTdHJpbmcoZGVmKSB7XG4gICAgaWYgKHR5cGVvZiBkZWYgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuaGFzVmFsdWUoKSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnZhbHVlID09PSAndW5kZWZpbmVkJyA/ICcnIDogU3RyaW5nKHRoaXMudmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcoZGVmKTtcbiAgfVxuXG4gIGdldENvbG9yKGRlZikge1xuICAgIHZhciBjb2xvciA9IHRoaXMuZ2V0U3RyaW5nKGRlZik7XG5cbiAgICBpZiAodGhpcy5pc05vcm1hbGl6ZWRDb2xvcikge1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cblxuICAgIHRoaXMuaXNOb3JtYWxpemVkQ29sb3IgPSB0cnVlO1xuICAgIGNvbG9yID0gbm9ybWFsaXplQ29sb3IoY29sb3IpO1xuICAgIHRoaXMudmFsdWUgPSBjb2xvcjtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBnZXREcGkoKSB7XG4gICAgcmV0dXJuIDk2LjA7IC8vIFRPRE86IGNvbXB1dGU/XG4gIH1cblxuICBnZXRSZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQucm9vdEVtU2l6ZTtcbiAgfVxuXG4gIGdldEVtKCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmVtU2l6ZTtcbiAgfVxuXG4gIGdldFVuaXRzKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZygpLnJlcGxhY2UoL1swLTkuLV0vZywgJycpO1xuICB9XG5cbiAgZ2V0UGl4ZWxzKGF4aXNPcklzRm9udFNpemUpIHtcbiAgICB2YXIgcHJvY2Vzc1BlcmNlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBbYXhpcywgaXNGb250U2l6ZV0gPSB0eXBlb2YgYXhpc09ySXNGb250U2l6ZSA9PT0gJ2Jvb2xlYW4nID8gW3VuZGVmaW5lZCwgYXhpc09ySXNGb250U2l6ZV0gOiBbYXhpc09ySXNGb250U2l6ZV07XG4gICAgdmFyIHtcbiAgICAgIHZpZXdQb3J0XG4gICAgfSA9IHRoaXMuZG9jdW1lbnQuc2NyZWVuO1xuXG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL3ZtaW4kLyk6XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bWJlcigpIC8gMTAwLjAgKiBNYXRoLm1pbih2aWV3UG9ydC5jb21wdXRlU2l6ZSgneCcpLCB2aWV3UG9ydC5jb21wdXRlU2l6ZSgneScpKTtcblxuICAgICAgY2FzZSB0aGlzLmlzU3RyaW5nKC92bWF4JC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAvIDEwMC4wICogTWF0aC5tYXgodmlld1BvcnQuY29tcHV0ZVNpemUoJ3gnKSwgdmlld1BvcnQuY29tcHV0ZVNpemUoJ3knKSk7XG5cbiAgICAgIGNhc2UgdGhpcy5pc1N0cmluZygvdnckLyk6XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bWJlcigpIC8gMTAwLjAgKiB2aWV3UG9ydC5jb21wdXRlU2l6ZSgneCcpO1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL3ZoJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAvIDEwMC4wICogdmlld1BvcnQuY29tcHV0ZVNpemUoJ3knKTtcblxuICAgICAgY2FzZSB0aGlzLmlzU3RyaW5nKC9yZW0kLyk6XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bWJlcigpICogdGhpcy5nZXRSZW0oKTtcblxuICAgICAgY2FzZSB0aGlzLmlzU3RyaW5nKC9lbSQvKTpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCkgKiB0aGlzLmdldEVtKCk7XG5cbiAgICAgIGNhc2UgdGhpcy5pc1N0cmluZygvZXgkLyk6XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bWJlcigpICogdGhpcy5nZXRFbSgpIC8gMi4wO1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL3B4JC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKTtcblxuICAgICAgY2FzZSB0aGlzLmlzU3RyaW5nKC9wdCQvKTpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCkgKiB0aGlzLmdldERwaSgpICogKDEuMCAvIDcyLjApO1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL3BjJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIDE1O1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL2NtJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIHRoaXMuZ2V0RHBpKCkgLyAyLjU0O1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL21tJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIHRoaXMuZ2V0RHBpKCkgLyAyNS40O1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL2luJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIHRoaXMuZ2V0RHBpKCk7XG5cbiAgICAgIGNhc2UgdGhpcy5pc1N0cmluZygvJSQvKSAmJiBpc0ZvbnRTaXplOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIHRoaXMuZ2V0RW0oKTtcblxuICAgICAgY2FzZSB0aGlzLmlzU3RyaW5nKC8lJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIHZpZXdQb3J0LmNvbXB1dGVTaXplKGF4aXMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIG4gPSB0aGlzLmdldE51bWJlcigpO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3NQZXJjZW50ICYmIG4gPCAxLjApIHtcbiAgICAgICAgICAgIHJldHVybiBuICogdmlld1BvcnQuY29tcHV0ZVNpemUoYXhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRNaWxsaXNlY29uZHMoKSB7XG4gICAgaWYgKCF0aGlzLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3RyaW5nKC9tcyQvKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCkgKiAxMDAwO1xuICB9XG5cbiAgZ2V0UmFkaWFucygpIHtcbiAgICBpZiAoIXRoaXMuaGFzVmFsdWUoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL2RlZyQvKTpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCkgKiAoTWF0aC5QSSAvIDE4MC4wKTtcblxuICAgICAgY2FzZSB0aGlzLmlzU3RyaW5nKC9ncmFkJC8pOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoKSAqIChNYXRoLlBJIC8gMjAwLjApO1xuXG4gICAgICBjYXNlIHRoaXMuaXNTdHJpbmcoL3JhZCQvKTpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bWJlcigpICogKE1hdGguUEkgLyAxODAuMCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0RGVmaW5pdGlvbigpIHtcbiAgICB2YXIgYXNTdHJpbmcgPSB0aGlzLmdldFN0cmluZygpO1xuICAgIHZhciBuYW1lID0gLyMoW14pJ1wiXSspLy5leGVjKGFzU3RyaW5nKTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICBuYW1lID0gbmFtZVsxXTtcbiAgICB9XG5cbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIG5hbWUgPSBhc1N0cmluZztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5kZWZpbml0aW9uc1tuYW1lXTtcbiAgfVxuXG4gIGdldEZpbGxTdHlsZURlZmluaXRpb24oZWxlbWVudCwgb3BhY2l0eSkge1xuICAgIHZhciBkZWYgPSB0aGlzLmdldERlZmluaXRpb24oKTtcblxuICAgIGlmICghZGVmKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIGdyYWRpZW50XG5cblxuICAgIGlmICh0eXBlb2YgZGVmLmNyZWF0ZUdyYWRpZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZGVmLmNyZWF0ZUdyYWRpZW50KHRoaXMuZG9jdW1lbnQuY3R4LCBlbGVtZW50LCBvcGFjaXR5KTtcbiAgICB9IC8vIHBhdHRlcm5cblxuXG4gICAgaWYgKHR5cGVvZiBkZWYuY3JlYXRlUGF0dGVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRlZi5nZXRIcmVmQXR0cmlidXRlKCkuaGFzVmFsdWUoKSkge1xuICAgICAgICB2YXIgcGF0dGVyblRyYW5zZm9ybSA9IGRlZi5nZXRBdHRyaWJ1dGUoJ3BhdHRlcm5UcmFuc2Zvcm0nKTtcbiAgICAgICAgZGVmID0gZGVmLmdldEhyZWZBdHRyaWJ1dGUoKS5nZXREZWZpbml0aW9uKCk7XG5cbiAgICAgICAgaWYgKHBhdHRlcm5UcmFuc2Zvcm0uaGFzVmFsdWUoKSkge1xuICAgICAgICAgIGRlZi5nZXRBdHRyaWJ1dGUoJ3BhdHRlcm5UcmFuc2Zvcm0nLCB0cnVlKS5zZXRWYWx1ZShwYXR0ZXJuVHJhbnNmb3JtLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVmLmNyZWF0ZVBhdHRlcm4odGhpcy5kb2N1bWVudC5jdHgsIGVsZW1lbnQsIG9wYWNpdHkpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0VGV4dEJhc2VsaW5lKCkge1xuICAgIGlmICghdGhpcy5oYXNWYWx1ZSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvcGVydHkudGV4dEJhc2VsaW5lTWFwcGluZ1t0aGlzLmdldFN0cmluZygpXTtcbiAgfVxuXG4gIGFkZE9wYWNpdHkob3BhY2l0eSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0Q29sb3IoKTtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgIHZhciBjb21tYXMgPSAwOyAvLyBTaW11bGF0ZSBvbGQgUkdCQ29sb3IgdmVyc2lvbiwgd2hpY2ggY2FuJ3QgcGFyc2UgcmdiYS5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJywnKSB7XG4gICAgICAgIGNvbW1hcysrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tbWFzID09PSAzKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcGFjaXR5Lmhhc1ZhbHVlKCkgJiYgdGhpcy5pc1N0cmluZygpICYmIGNvbW1hcyAhPT0gMykge1xuICAgICAgdmFyIGNvbG9yID0gbmV3IFJHQkNvbG9yKHZhbHVlKTtcblxuICAgICAgaWYgKGNvbG9yLm9rKSB7XG4gICAgICAgIGNvbG9yLmFscGhhID0gb3BhY2l0eS5nZXROdW1iZXIoKTtcbiAgICAgICAgdmFsdWUgPSBjb2xvci50b1JHQkEoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsIHRoaXMubmFtZSwgdmFsdWUpO1xuICB9XG5cbn1cblByb3BlcnR5LnRleHRCYXNlbGluZU1hcHBpbmcgPSB7XG4gICdiYXNlbGluZSc6ICdhbHBoYWJldGljJyxcbiAgJ2JlZm9yZS1lZGdlJzogJ3RvcCcsXG4gICd0ZXh0LWJlZm9yZS1lZGdlJzogJ3RvcCcsXG4gICdtaWRkbGUnOiAnbWlkZGxlJyxcbiAgJ2NlbnRyYWwnOiAnbWlkZGxlJyxcbiAgJ2FmdGVyLWVkZ2UnOiAnYm90dG9tJyxcbiAgJ3RleHQtYWZ0ZXItZWRnZSc6ICdib3R0b20nLFxuICAnaWRlb2dyYXBoaWMnOiAnaWRlb2dyYXBoaWMnLFxuICAnYWxwaGFiZXRpYyc6ICdhbHBoYWJldGljJyxcbiAgJ2hhbmdpbmcnOiAnaGFuZ2luZycsXG4gICdtYXRoZW1hdGljYWwnOiAnYWxwaGFiZXRpYydcbn07XG5cbmNsYXNzIFZpZXdQb3J0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52aWV3UG9ydHMgPSBbXTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMudmlld1BvcnRzID0gW107XG4gIH1cblxuICBzZXRDdXJyZW50KHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnZpZXdQb3J0cy5wdXNoKHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVDdXJyZW50KCkge1xuICAgIHRoaXMudmlld1BvcnRzLnBvcCgpO1xuICB9XG5cbiAgZ2V0Q3VycmVudCgpIHtcbiAgICB2YXIge1xuICAgICAgdmlld1BvcnRzXG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuIHZpZXdQb3J0c1t2aWV3UG9ydHMubGVuZ3RoIC0gMV07XG4gIH1cblxuICBnZXQgd2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudCgpLndpZHRoO1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50KCkuaGVpZ2h0O1xuICB9XG5cbiAgY29tcHV0ZVNpemUoZCkge1xuICAgIGlmICh0eXBlb2YgZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBkO1xuICAgIH1cblxuICAgIGlmIChkID09PSAneCcpIHtcbiAgICAgIHJldHVybiB0aGlzLndpZHRoO1xuICAgIH1cblxuICAgIGlmIChkID09PSAneScpIHtcbiAgICAgIHJldHVybiB0aGlzLmhlaWdodDtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMud2lkdGgsIDIpICsgTWF0aC5wb3codGhpcy5oZWlnaHQsIDIpKSAvIE1hdGguc3FydCgyKTtcbiAgfVxuXG59XG5cbmNsYXNzIFBvaW50IHtcbiAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZShwb2ludCkge1xuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgdmFyIFt4ID0gZGVmYXVsdFZhbHVlLCB5ID0gZGVmYXVsdFZhbHVlXSA9IHRvTnVtYmVycyhwb2ludCk7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh4LCB5KTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZVNjYWxlKHNjYWxlKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgICB2YXIgW3ggPSBkZWZhdWx0VmFsdWUsIHkgPSB4XSA9IHRvTnVtYmVycyhzY2FsZSk7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh4LCB5KTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZVBhdGgocGF0aCkge1xuICAgIHZhciBwb2ludHMgPSB0b051bWJlcnMocGF0aCk7XG4gICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgdmFyIHBhdGhQb2ludHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICAgIHBhdGhQb2ludHMucHVzaChuZXcgUG9pbnQocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhQb2ludHM7XG4gIH1cblxuICBhbmdsZVRvKHBvaW50KSB7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIocG9pbnQueSAtIHRoaXMueSwgcG9pbnQueCAtIHRoaXMueCk7XG4gIH1cblxuICBhcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICB2YXIge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgeHAgPSB4ICogdHJhbnNmb3JtWzBdICsgeSAqIHRyYW5zZm9ybVsyXSArIHRyYW5zZm9ybVs0XTtcbiAgICB2YXIgeXAgPSB4ICogdHJhbnNmb3JtWzFdICsgeSAqIHRyYW5zZm9ybVszXSArIHRyYW5zZm9ybVs1XTtcbiAgICB0aGlzLnggPSB4cDtcbiAgICB0aGlzLnkgPSB5cDtcbiAgfVxuXG59XG5cbmNsYXNzIE1vdXNlIHtcbiAgY29uc3RydWN0b3Ioc2NyZWVuKSB7XG4gICAgdGhpcy5zY3JlZW4gPSBzY3JlZW47XG4gICAgdGhpcy53b3JraW5nID0gZmFsc2U7XG4gICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICB0aGlzLmV2ZW50RWxlbWVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuXG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcblxuICAgIHRoaXMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XG4gIH1cblxuICBpc1dvcmtpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMud29ya2luZztcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIGlmICh0aGlzLndvcmtpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIge1xuICAgICAgc2NyZWVuLFxuICAgICAgb25DbGljayxcbiAgICAgIG9uTW91c2VNb3ZlXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIGNhbnZhcyA9IHNjcmVlbi5jdHguY2FudmFzO1xuICAgIGNhbnZhcy5vbmNsaWNrID0gb25DbGljaztcbiAgICBjYW52YXMub25tb3VzZW1vdmUgPSBvbk1vdXNlTW92ZTtcbiAgICB0aGlzLndvcmtpbmcgPSB0cnVlO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICBpZiAoIXRoaXMud29ya2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjYW52YXMgPSB0aGlzLnNjcmVlbi5jdHguY2FudmFzO1xuICAgIHRoaXMud29ya2luZyA9IGZhbHNlO1xuICAgIGNhbnZhcy5vbmNsaWNrID0gbnVsbDtcbiAgICBjYW52YXMub25tb3VzZW1vdmUgPSBudWxsO1xuICB9XG5cbiAgaGFzRXZlbnRzKCkge1xuICAgIHJldHVybiB0aGlzLndvcmtpbmcgJiYgdGhpcy5ldmVudHMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHJ1bkV2ZW50cygpIHtcbiAgICBpZiAoIXRoaXMud29ya2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB7XG4gICAgICBzY3JlZW46IGRvY3VtZW50LFxuICAgICAgZXZlbnRzLFxuICAgICAgZXZlbnRFbGVtZW50c1xuICAgIH0gPSB0aGlzO1xuICAgIHZhciB7XG4gICAgICBzdHlsZVxuICAgIH0gPSBkb2N1bWVudC5jdHguY2FudmFzO1xuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBzdHlsZS5jdXJzb3IgPSAnJztcbiAgICB9XG5cbiAgICBldmVudHMuZm9yRWFjaCgoX3JlZiwgaSkgPT4ge1xuICAgICAgdmFyIHtcbiAgICAgICAgcnVuXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIHZhciBlbGVtZW50ID0gZXZlbnRFbGVtZW50c1tpXTtcblxuICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgICAgcnVuKGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gICAgICB9XG4gICAgfSk7IC8vIGRvbmUgcnVubmluZywgY2xlYXJcblxuICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgdGhpcy5ldmVudEVsZW1lbnRzID0gW107XG4gIH1cblxuICBjaGVja1BhdGgoZWxlbWVudCwgY3R4KSB7XG4gICAgaWYgKCF0aGlzLndvcmtpbmcgfHwgIWN0eCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB7XG4gICAgICBldmVudHMsXG4gICAgICBldmVudEVsZW1lbnRzXG4gICAgfSA9IHRoaXM7XG4gICAgZXZlbnRzLmZvckVhY2goKF9yZWYyLCBpKSA9PiB7XG4gICAgICB2YXIge1xuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9ID0gX3JlZjI7XG5cbiAgICAgIGlmICghZXZlbnRFbGVtZW50c1tpXSAmJiBjdHguaXNQb2ludEluUGF0aCAmJiBjdHguaXNQb2ludEluUGF0aCh4LCB5KSkge1xuICAgICAgICBldmVudEVsZW1lbnRzW2ldID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNoZWNrQm91bmRpbmdCb3goZWxlbWVudCwgYm91bmRpbmdCb3gpIHtcbiAgICBpZiAoIXRoaXMud29ya2luZyB8fCAhYm91bmRpbmdCb3gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIge1xuICAgICAgZXZlbnRzLFxuICAgICAgZXZlbnRFbGVtZW50c1xuICAgIH0gPSB0aGlzO1xuICAgIGV2ZW50cy5mb3JFYWNoKChfcmVmMywgaSkgPT4ge1xuICAgICAgdmFyIHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfSA9IF9yZWYzO1xuXG4gICAgICBpZiAoIWV2ZW50RWxlbWVudHNbaV0gJiYgYm91bmRpbmdCb3guaXNQb2ludEluQm94KHgsIHkpKSB7XG4gICAgICAgIGV2ZW50RWxlbWVudHNbaV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwWFkoeCwgeSkge1xuICAgIHZhciB7XG4gICAgICB3aW5kb3csXG4gICAgICBjdHhcbiAgICB9ID0gdGhpcy5zY3JlZW47XG4gICAgdmFyIHBvaW50ID0gbmV3IFBvaW50KHgsIHkpO1xuICAgIHZhciBlbGVtZW50ID0gY3R4LmNhbnZhcztcblxuICAgIHdoaWxlIChlbGVtZW50KSB7XG4gICAgICBwb2ludC54IC09IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgIHBvaW50LnkgLT0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5zY3JvbGxYKSB7XG4gICAgICBwb2ludC54ICs9IHdpbmRvdy5zY3JvbGxYO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuc2Nyb2xsWSkge1xuICAgICAgcG9pbnQueSArPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnQ7XG4gIH1cblxuICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IHRoaXMubWFwWFkoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgdGhpcy5ldmVudHMucHVzaCh7XG4gICAgICB0eXBlOiAnb25jbGljaycsXG4gICAgICB4LFxuICAgICAgeSxcblxuICAgICAgcnVuKGV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIGlmIChldmVudFRhcmdldC5vbkNsaWNrKSB7XG4gICAgICAgICAgZXZlbnRUYXJnZXQub25DbGljaygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IHRoaXMubWFwWFkoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgdGhpcy5ldmVudHMucHVzaCh7XG4gICAgICB0eXBlOiAnb25tb3VzZW1vdmUnLFxuICAgICAgeCxcbiAgICAgIHksXG5cbiAgICAgIHJ1bihldmVudFRhcmdldCkge1xuICAgICAgICBpZiAoZXZlbnRUYXJnZXQub25Nb3VzZU1vdmUpIHtcbiAgICAgICAgICBldmVudFRhcmdldC5vbk1vdXNlTW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG59XG5cbnZhciBkZWZhdWx0V2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBudWxsO1xudmFyIGRlZmF1bHRGZXRjaCQxID0gdHlwZW9mIGZldGNoICE9PSAndW5kZWZpbmVkJyA/IGZldGNoLmJpbmQodW5kZWZpbmVkKSAvLyBgZmV0Y2hgIGRlcGVuZHMgb24gY29udGV4dDogYHNvbWVPYmplY3QuZmV0Y2goLi4uKWAgd2lsbCB0aHJvdyBlcnJvci5cbjogbnVsbDtcbmNsYXNzIFNjcmVlbiB7XG4gIGNvbnN0cnVjdG9yKGN0eCkge1xuICAgIHZhciB7XG4gICAgICBmZXRjaCA9IGRlZmF1bHRGZXRjaCQxLFxuICAgICAgd2luZG93ID0gZGVmYXVsdFdpbmRvd1xuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgIHRoaXMuRlJBTUVSQVRFID0gMzA7XG4gICAgdGhpcy5NQVhfVklSVFVBTF9QSVhFTFMgPSAzMDAwMDtcbiAgICB0aGlzLkNMSUVOVF9XSURUSCA9IDgwMDtcbiAgICB0aGlzLkNMSUVOVF9IRUlHSFQgPSA2MDA7XG4gICAgdGhpcy52aWV3UG9ydCA9IG5ldyBWaWV3UG9ydCgpO1xuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2UodGhpcyk7XG4gICAgdGhpcy5hbmltYXRpb25zID0gW107XG4gICAgdGhpcy53YWl0cyA9IFtdO1xuICAgIHRoaXMuZnJhbWVEdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5pc1JlYWR5TG9jayA9IGZhbHNlO1xuICAgIHRoaXMuaXNGaXJzdFJlbmRlciA9IHRydWU7XG4gICAgdGhpcy5pbnRlcnZhbElkID0gbnVsbDtcbiAgICB0aGlzLndpbmRvdyA9IHdpbmRvdztcbiAgICB0aGlzLmZldGNoID0gZmV0Y2g7XG4gIH1cblxuICB3YWl0KGNoZWNrZXIpIHtcbiAgICB0aGlzLndhaXRzLnB1c2goY2hlY2tlcik7XG4gIH1cblxuICByZWFkeSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXNcbiAgICBpZiAoIXRoaXMucmVhZHlQcm9taXNlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVhZHlQcm9taXNlO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICBpZiAodGhpcy5pc1JlYWR5TG9jaykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzUmVhZHlMb2NrID0gdGhpcy53YWl0cy5ldmVyeShfID0+IF8oKSk7XG5cbiAgICBpZiAoaXNSZWFkeUxvY2spIHtcbiAgICAgIHRoaXMud2FpdHMgPSBbXTtcblxuICAgICAgaWYgKHRoaXMucmVzb2x2ZVJlYWR5KSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZVJlYWR5KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pc1JlYWR5TG9jayA9IGlzUmVhZHlMb2NrO1xuICAgIHJldHVybiBpc1JlYWR5TG9jaztcbiAgfVxuXG4gIHNldERlZmF1bHRzKGN0eCkge1xuICAgIC8vIGluaXRpYWwgdmFsdWVzIGFuZCBkZWZhdWx0c1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICBjdHgubGluZUNhcCA9ICdidXR0JztcbiAgICBjdHgubGluZUpvaW4gPSAnbWl0ZXInO1xuICAgIGN0eC5taXRlckxpbWl0ID0gNDtcbiAgfVxuXG4gIHNldFZpZXdCb3goX3JlZikge1xuICAgIHZhciB7XG4gICAgICBkb2N1bWVudCxcbiAgICAgIGN0eCxcbiAgICAgIGFzcGVjdFJhdGlvLFxuICAgICAgd2lkdGgsXG4gICAgICBkZXNpcmVkV2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBkZXNpcmVkSGVpZ2h0LFxuICAgICAgbWluWCA9IDAsXG4gICAgICBtaW5ZID0gMCxcbiAgICAgIHJlZlgsXG4gICAgICByZWZZLFxuICAgICAgY2xpcCA9IGZhbHNlLFxuICAgICAgY2xpcFggPSAwLFxuICAgICAgY2xpcFkgPSAwXG4gICAgfSA9IF9yZWY7XG4gICAgLy8gYXNwZWN0IHJhdGlvIC0gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2Nvb3Jkcy5odG1sI1ByZXNlcnZlQXNwZWN0UmF0aW9BdHRyaWJ1dGVcbiAgICB2YXIgY2xlYW5Bc3BlY3RSYXRpbyA9IGNvbXByZXNzU3BhY2VzKGFzcGVjdFJhdGlvKS5yZXBsYWNlKC9eZGVmZXJcXHMvLCAnJyk7IC8vIGlnbm9yZSBkZWZlclxuXG4gICAgdmFyIFthc3BlY3RSYXRpb0FsaWduLCBhc3BlY3RSYXRpb01lZXRPclNsaWNlXSA9IGNsZWFuQXNwZWN0UmF0aW8uc3BsaXQoJyAnKTtcbiAgICB2YXIgYWxpZ24gPSBhc3BlY3RSYXRpb0FsaWduIHx8ICd4TWlkWU1pZCc7XG4gICAgdmFyIG1lZXRPclNsaWNlID0gYXNwZWN0UmF0aW9NZWV0T3JTbGljZSB8fCAnbWVldCc7IC8vIGNhbGN1bGF0ZSBzY2FsZVxuXG4gICAgdmFyIHNjYWxlWCA9IHdpZHRoIC8gZGVzaXJlZFdpZHRoO1xuICAgIHZhciBzY2FsZVkgPSBoZWlnaHQgLyBkZXNpcmVkSGVpZ2h0O1xuICAgIHZhciBzY2FsZU1pbiA9IE1hdGgubWluKHNjYWxlWCwgc2NhbGVZKTtcbiAgICB2YXIgc2NhbGVNYXggPSBNYXRoLm1heChzY2FsZVgsIHNjYWxlWSk7XG4gICAgdmFyIGZpbmFsRGVzaXJlZFdpZHRoID0gZGVzaXJlZFdpZHRoO1xuICAgIHZhciBmaW5hbERlc2lyZWRIZWlnaHQgPSBkZXNpcmVkSGVpZ2h0O1xuXG4gICAgaWYgKG1lZXRPclNsaWNlID09PSAnbWVldCcpIHtcbiAgICAgIGZpbmFsRGVzaXJlZFdpZHRoICo9IHNjYWxlTWluO1xuICAgICAgZmluYWxEZXNpcmVkSGVpZ2h0ICo9IHNjYWxlTWluO1xuICAgIH1cblxuICAgIGlmIChtZWV0T3JTbGljZSA9PT0gJ3NsaWNlJykge1xuICAgICAgZmluYWxEZXNpcmVkV2lkdGggKj0gc2NhbGVNYXg7XG4gICAgICBmaW5hbERlc2lyZWRIZWlnaHQgKj0gc2NhbGVNYXg7XG4gICAgfVxuXG4gICAgdmFyIHJlZlhQcm9wID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAncmVmWCcsIHJlZlgpO1xuICAgIHZhciByZWZZUHJvcCA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgJ3JlZlknLCByZWZZKTtcbiAgICB2YXIgaGFzUmVmcyA9IHJlZlhQcm9wLmhhc1ZhbHVlKCkgJiYgcmVmWVByb3AuaGFzVmFsdWUoKTtcblxuICAgIGlmIChoYXNSZWZzKSB7XG4gICAgICBjdHgudHJhbnNsYXRlKC1zY2FsZU1pbiAqIHJlZlhQcm9wLmdldFBpeGVscygneCcpLCAtc2NhbGVNaW4gKiByZWZZUHJvcC5nZXRQaXhlbHMoJ3knKSk7XG4gICAgfVxuXG4gICAgaWYgKGNsaXApIHtcbiAgICAgIHZhciBzY2FsZWRDbGlwWCA9IHNjYWxlTWluICogY2xpcFg7XG4gICAgICB2YXIgc2NhbGVkQ2xpcFkgPSBzY2FsZU1pbiAqIGNsaXBZO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyhzY2FsZWRDbGlwWCwgc2NhbGVkQ2xpcFkpO1xuICAgICAgY3R4LmxpbmVUbyh3aWR0aCwgc2NhbGVkQ2xpcFkpO1xuICAgICAgY3R4LmxpbmVUbyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGN0eC5saW5lVG8oc2NhbGVkQ2xpcFgsIGhlaWdodCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguY2xpcCgpO1xuICAgIH1cblxuICAgIGlmICghaGFzUmVmcykge1xuICAgICAgdmFyIGlzTWVldE1pblkgPSBtZWV0T3JTbGljZSA9PT0gJ21lZXQnICYmIHNjYWxlTWluID09PSBzY2FsZVk7XG4gICAgICB2YXIgaXNTbGljZU1heFkgPSBtZWV0T3JTbGljZSA9PT0gJ3NsaWNlJyAmJiBzY2FsZU1heCA9PT0gc2NhbGVZO1xuICAgICAgdmFyIGlzTWVldE1pblggPSBtZWV0T3JTbGljZSA9PT0gJ21lZXQnICYmIHNjYWxlTWluID09PSBzY2FsZVg7XG4gICAgICB2YXIgaXNTbGljZU1heFggPSBtZWV0T3JTbGljZSA9PT0gJ3NsaWNlJyAmJiBzY2FsZU1heCA9PT0gc2NhbGVYO1xuXG4gICAgICBpZiAoYWxpZ24uc3RhcnRzV2l0aCgneE1pZCcpICYmIChpc01lZXRNaW5ZIHx8IGlzU2xpY2VNYXhZKSkge1xuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoIC8gMi4wIC0gZmluYWxEZXNpcmVkV2lkdGggLyAyLjAsIDApO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWxpZ24uZW5kc1dpdGgoJ1lNaWQnKSAmJiAoaXNNZWV0TWluWCB8fCBpc1NsaWNlTWF4WCkpIHtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLCBoZWlnaHQgLyAyLjAgLSBmaW5hbERlc2lyZWRIZWlnaHQgLyAyLjApO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWxpZ24uc3RhcnRzV2l0aCgneE1heCcpICYmIChpc01lZXRNaW5ZIHx8IGlzU2xpY2VNYXhZKSkge1xuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoIC0gZmluYWxEZXNpcmVkV2lkdGgsIDApO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWxpZ24uZW5kc1dpdGgoJ1lNYXgnKSAmJiAoaXNNZWV0TWluWCB8fCBpc1NsaWNlTWF4WCkpIHtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLCBoZWlnaHQgLSBmaW5hbERlc2lyZWRIZWlnaHQpO1xuICAgICAgfVxuICAgIH0gLy8gc2NhbGVcblxuXG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIGFsaWduID09PSAnbm9uZSc6XG4gICAgICAgIGN0eC5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIG1lZXRPclNsaWNlID09PSAnbWVldCc6XG4gICAgICAgIGN0eC5zY2FsZShzY2FsZU1pbiwgc2NhbGVNaW4pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBtZWV0T3JTbGljZSA9PT0gJ3NsaWNlJzpcbiAgICAgICAgY3R4LnNjYWxlKHNjYWxlTWF4LCBzY2FsZU1heCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH0gLy8gdHJhbnNsYXRlXG5cblxuICAgIGN0eC50cmFuc2xhdGUoLW1pblgsIC1taW5ZKTtcbiAgfVxuXG4gIHN0YXJ0KGVsZW1lbnQpIHtcbiAgICB2YXIge1xuICAgICAgZW5hYmxlUmVkcmF3ID0gZmFsc2UsXG4gICAgICBpZ25vcmVNb3VzZSA9IGZhbHNlLFxuICAgICAgaWdub3JlQW5pbWF0aW9uID0gZmFsc2UsXG4gICAgICBpZ25vcmVEaW1lbnNpb25zID0gZmFsc2UsXG4gICAgICBpZ25vcmVDbGVhciA9IGZhbHNlLFxuICAgICAgZm9yY2VSZWRyYXcsXG4gICAgICBzY2FsZVdpZHRoLFxuICAgICAgc2NhbGVIZWlnaHQsXG4gICAgICBvZmZzZXRYLFxuICAgICAgb2Zmc2V0WVxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB7XG4gICAgICBGUkFNRVJBVEUsXG4gICAgICBtb3VzZVxuICAgIH0gPSB0aGlzO1xuICAgIHZhciBmcmFtZUR1cmF0aW9uID0gMTAwMCAvIEZSQU1FUkFURTtcbiAgICB0aGlzLmZyYW1lRHVyYXRpb24gPSBmcmFtZUR1cmF0aW9uO1xuICAgIHRoaXMucmVhZHlQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmVSZWFkeSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5pc1JlYWR5KCkpIHtcbiAgICAgIHRoaXMucmVuZGVyKGVsZW1lbnQsIGlnbm9yZURpbWVuc2lvbnMsIGlnbm9yZUNsZWFyLCBzY2FsZVdpZHRoLCBzY2FsZUhlaWdodCwgb2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgfVxuXG4gICAgaWYgKCFlbmFibGVSZWRyYXcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdGhlbiA9IG5vdztcbiAgICB2YXIgZGVsdGEgPSAwO1xuXG4gICAgdmFyIHRpY2sgPSAoKSA9PiB7XG4gICAgICBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgZGVsdGEgPSBub3cgLSB0aGVuO1xuXG4gICAgICBpZiAoZGVsdGEgPj0gZnJhbWVEdXJhdGlvbikge1xuICAgICAgICB0aGVuID0gbm93IC0gZGVsdGEgJSBmcmFtZUR1cmF0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZShpZ25vcmVBbmltYXRpb24sIGZvcmNlUmVkcmF3KSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKGVsZW1lbnQsIGlnbm9yZURpbWVuc2lvbnMsIGlnbm9yZUNsZWFyLCBzY2FsZVdpZHRoLCBzY2FsZUhlaWdodCwgb2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICAgICAgbW91c2UucnVuRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnRlcnZhbElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xuICAgIH07XG5cbiAgICBpZiAoIWlnbm9yZU1vdXNlKSB7XG4gICAgICBtb3VzZS5zdGFydCgpO1xuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWxJZCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmNhbmNlbCh0aGlzLmludGVydmFsSWQpO1xuICAgICAgdGhpcy5pbnRlcnZhbElkID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLm1vdXNlLnN0b3AoKTtcbiAgfVxuXG4gIHNob3VsZFVwZGF0ZShpZ25vcmVBbmltYXRpb24sIGZvcmNlUmVkcmF3KSB7XG4gICAgLy8gbmVlZCB1cGRhdGUgZnJvbSBhbmltYXRpb25zP1xuICAgIGlmICghaWdub3JlQW5pbWF0aW9uKSB7XG4gICAgICB2YXIge1xuICAgICAgICBmcmFtZUR1cmF0aW9uXG4gICAgICB9ID0gdGhpcztcbiAgICAgIHZhciBzaG91bGRVcGRhdGUgPSB0aGlzLmFuaW1hdGlvbnMucmVkdWNlKChzaG91bGRVcGRhdGUsIGFuaW1hdGlvbikgPT4gYW5pbWF0aW9uLnVwZGF0ZShmcmFtZUR1cmF0aW9uKSB8fCBzaG91bGRVcGRhdGUsIGZhbHNlKTtcblxuICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIG5lZWQgdXBkYXRlIGZyb20gcmVkcmF3P1xuXG5cbiAgICBpZiAodHlwZW9mIGZvcmNlUmVkcmF3ID09PSAnZnVuY3Rpb24nICYmIGZvcmNlUmVkcmF3KCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1JlYWR5TG9jayAmJiB0aGlzLmlzUmVhZHkoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBuZWVkIHVwZGF0ZSBmcm9tIG1vdXNlIGV2ZW50cz9cblxuXG4gICAgaWYgKHRoaXMubW91c2UuaGFzRXZlbnRzKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJlbmRlcihlbGVtZW50LCBpZ25vcmVEaW1lbnNpb25zLCBpZ25vcmVDbGVhciwgc2NhbGVXaWR0aCwgc2NhbGVIZWlnaHQsIG9mZnNldFgsIG9mZnNldFkpIHtcbiAgICB2YXIge1xuICAgICAgQ0xJRU5UX1dJRFRILFxuICAgICAgQ0xJRU5UX0hFSUdIVCxcbiAgICAgIHZpZXdQb3J0LFxuICAgICAgY3R4LFxuICAgICAgaXNGaXJzdFJlbmRlclxuICAgIH0gPSB0aGlzO1xuICAgIHZhciBjYW52YXMgPSBjdHguY2FudmFzO1xuICAgIHZpZXdQb3J0LmNsZWFyKCk7XG5cbiAgICBpZiAoY2FudmFzLndpZHRoICYmIGNhbnZhcy5oZWlnaHQpIHtcbiAgICAgIHZpZXdQb3J0LnNldEN1cnJlbnQoY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlld1BvcnQuc2V0Q3VycmVudChDTElFTlRfV0lEVEgsIENMSUVOVF9IRUlHSFQpO1xuICAgIH1cblxuICAgIHZhciB3aWR0aFN0eWxlID0gZWxlbWVudC5nZXRTdHlsZSgnd2lkdGgnKTtcbiAgICB2YXIgaGVpZ2h0U3R5bGUgPSBlbGVtZW50LmdldFN0eWxlKCdoZWlnaHQnKTtcblxuICAgIGlmICghaWdub3JlRGltZW5zaW9ucyAmJiAoaXNGaXJzdFJlbmRlciB8fCB0eXBlb2Ygc2NhbGVXaWR0aCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIHNjYWxlSGVpZ2h0ICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIC8vIHNldCBjYW52YXMgc2l6ZVxuICAgICAgaWYgKHdpZHRoU3R5bGUuaGFzVmFsdWUoKSkge1xuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aFN0eWxlLmdldFBpeGVscygneCcpO1xuXG4gICAgICAgIGlmIChjYW52YXMuc3R5bGUpIHtcbiAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdChjYW52YXMud2lkdGgsIFwicHhcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGhlaWdodFN0eWxlLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodFN0eWxlLmdldFBpeGVscygneScpO1xuXG4gICAgICAgIGlmIChjYW52YXMuc3R5bGUpIHtcbiAgICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQoY2FudmFzLmhlaWdodCwgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjV2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGggfHwgY2FudmFzLndpZHRoO1xuICAgIHZhciBjSGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodCB8fCBjYW52YXMuaGVpZ2h0O1xuXG4gICAgaWYgKGlnbm9yZURpbWVuc2lvbnMgJiYgd2lkdGhTdHlsZS5oYXNWYWx1ZSgpICYmIGhlaWdodFN0eWxlLmhhc1ZhbHVlKCkpIHtcbiAgICAgIGNXaWR0aCA9IHdpZHRoU3R5bGUuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgICBjSGVpZ2h0ID0gaGVpZ2h0U3R5bGUuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgfVxuXG4gICAgdmlld1BvcnQuc2V0Q3VycmVudChjV2lkdGgsIGNIZWlnaHQpO1xuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRYID09PSAnbnVtYmVyJykge1xuICAgICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3gnLCB0cnVlKS5zZXRWYWx1ZShvZmZzZXRYKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldFkgPT09ICdudW1iZXInKSB7XG4gICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgneScsIHRydWUpLnNldFZhbHVlKG9mZnNldFkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2NhbGVXaWR0aCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHNjYWxlSGVpZ2h0ID09PSAnbnVtYmVyJykge1xuICAgICAgdmFyIHZpZXdCb3ggPSB0b051bWJlcnMoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKS5nZXRTdHJpbmcoKSk7XG4gICAgICB2YXIgeFJhdGlvID0gMDtcbiAgICAgIHZhciB5UmF0aW8gPSAwO1xuXG4gICAgICBpZiAodHlwZW9mIHNjYWxlV2lkdGggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBfd2lkdGhTdHlsZSA9IGVsZW1lbnQuZ2V0U3R5bGUoJ3dpZHRoJyk7XG5cbiAgICAgICAgaWYgKF93aWR0aFN0eWxlLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICB4UmF0aW8gPSBfd2lkdGhTdHlsZS5nZXRQaXhlbHMoJ3gnKSAvIHNjYWxlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHZpZXdCb3hbMl0pKSB7XG4gICAgICAgICAgeFJhdGlvID0gdmlld0JveFsyXSAvIHNjYWxlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzY2FsZUhlaWdodCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIF9oZWlnaHRTdHlsZSA9IGVsZW1lbnQuZ2V0U3R5bGUoJ2hlaWdodCcpO1xuXG4gICAgICAgIGlmIChfaGVpZ2h0U3R5bGUuaGFzVmFsdWUoKSkge1xuICAgICAgICAgIHlSYXRpbyA9IF9oZWlnaHRTdHlsZS5nZXRQaXhlbHMoJ3knKSAvIHNjYWxlSGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKCFpc05hTih2aWV3Qm94WzNdKSkge1xuICAgICAgICAgIHlSYXRpbyA9IHZpZXdCb3hbM10gLyBzY2FsZUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXhSYXRpbykge1xuICAgICAgICB4UmF0aW8gPSB5UmF0aW87XG4gICAgICB9XG5cbiAgICAgIGlmICgheVJhdGlvKSB7XG4gICAgICAgIHlSYXRpbyA9IHhSYXRpbztcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdHJ1ZSkuc2V0VmFsdWUoc2NhbGVXaWR0aCk7XG4gICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdHJ1ZSkuc2V0VmFsdWUoc2NhbGVIZWlnaHQpO1xuICAgICAgdmFyIHRyYW5zZm9ybVN0eWxlID0gZWxlbWVudC5nZXRTdHlsZSgndHJhbnNmb3JtJywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB0cmFuc2Zvcm1TdHlsZS5zZXRWYWx1ZShcIlwiLmNvbmNhdCh0cmFuc2Zvcm1TdHlsZS5nZXRTdHJpbmcoKSwgXCIgc2NhbGUoXCIpLmNvbmNhdCgxLjAgLyB4UmF0aW8sIFwiLCBcIikuY29uY2F0KDEuMCAvIHlSYXRpbywgXCIpXCIpKTtcbiAgICB9IC8vIGNsZWFyIGFuZCByZW5kZXJcblxuXG4gICAgaWYgKCFpZ25vcmVDbGVhcikge1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjV2lkdGgsIGNIZWlnaHQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQucmVuZGVyKGN0eCk7XG5cbiAgICBpZiAoaXNGaXJzdFJlbmRlcikge1xuICAgICAgdGhpcy5pc0ZpcnN0UmVuZGVyID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbn1cblNjcmVlbi5kZWZhdWx0V2luZG93ID0gZGVmYXVsdFdpbmRvdztcblNjcmVlbi5kZWZhdWx0RmV0Y2ggPSBkZWZhdWx0RmV0Y2gkMTtcblxudmFyIHtcbiAgZGVmYXVsdEZldGNoXG59ID0gU2NyZWVuO1xudmFyIERlZmF1bHRET01QYXJzZXIgPSB0eXBlb2YgRE9NUGFyc2VyICE9PSAndW5kZWZpbmVkJyA/IERPTVBhcnNlciA6IG51bGw7XG5jbGFzcyBQYXJzZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB2YXIge1xuICAgICAgZmV0Y2ggPSBkZWZhdWx0RmV0Y2gsXG4gICAgICBET01QYXJzZXIgPSBEZWZhdWx0RE9NUGFyc2VyXG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdGhpcy5mZXRjaCA9IGZldGNoO1xuICAgIHRoaXMuRE9NUGFyc2VyID0gRE9NUGFyc2VyO1xuICB9XG5cbiAgcGFyc2UocmVzb3VyY2UpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBpZiAocmVzb3VyY2Uuc3RhcnRzV2l0aCgnPCcpKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wYXJzZUZyb21TdHJpbmcocmVzb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMubG9hZChyZXNvdXJjZSk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHBhcnNlRnJvbVN0cmluZyh4bWwpIHtcbiAgICB2YXIgcGFyc2VyID0gbmV3IHRoaXMuRE9NUGFyc2VyKCk7XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hlY2tEb2N1bWVudChwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbCwgJ2ltYWdlL3N2Zyt4bWwnKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGVja0RvY3VtZW50KHBhcnNlci5wYXJzZUZyb21TdHJpbmcoeG1sLCAndGV4dC94bWwnKSk7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tEb2N1bWVudChkb2N1bWVudCkge1xuICAgIHZhciBwYXJzZXJFcnJvciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwYXJzZXJlcnJvcicpWzBdO1xuXG4gICAgaWYgKHBhcnNlckVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocGFyc2VyRXJyb3IudGV4dENvbnRlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuXG4gIGxvYWQodXJsKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIHZhciByZXNwb25zZSA9IHlpZWxkIF90aGlzMi5mZXRjaCh1cmwpO1xuICAgICAgdmFyIHhtbCA9IHlpZWxkIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIHJldHVybiBfdGhpczIucGFyc2VGcm9tU3RyaW5nKHhtbCk7XG4gICAgfSkoKTtcbiAgfVxuXG59XG5cbmNsYXNzIFRyYW5zbGF0ZSB7XG4gIGNvbnN0cnVjdG9yKF8sIHBvaW50KSB7XG4gICAgdGhpcy50eXBlID0gJ3RyYW5zbGF0ZSc7XG4gICAgdGhpcy5wb2ludCA9IG51bGw7XG4gICAgdGhpcy5wb2ludCA9IFBvaW50LnBhcnNlKHBvaW50KTtcbiAgfVxuXG4gIGFwcGx5KGN0eCkge1xuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSB0aGlzLnBvaW50O1xuICAgIGN0eC50cmFuc2xhdGUoeCB8fCAwLjAsIHkgfHwgMC4wKTtcbiAgfVxuXG4gIHVuYXBwbHkoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IHRoaXMucG9pbnQ7XG4gICAgY3R4LnRyYW5zbGF0ZSgtMS4wICogeCB8fCAwLjAsIC0xLjAgKiB5IHx8IDAuMCk7XG4gIH1cblxuICBhcHBseVRvUG9pbnQocG9pbnQpIHtcbiAgICB2YXIge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9ID0gdGhpcy5wb2ludDtcbiAgICBwb2ludC5hcHBseVRyYW5zZm9ybShbMSwgMCwgMCwgMSwgeCB8fCAwLjAsIHkgfHwgMC4wXSk7XG4gIH1cblxufVxuXG5jbGFzcyBSb3RhdGUge1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgcm90YXRlLCB0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgICB0aGlzLnR5cGUgPSAncm90YXRlJztcbiAgICB0aGlzLmFuZ2xlID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpblggPSBudWxsO1xuICAgIHRoaXMub3JpZ2luWSA9IG51bGw7XG4gICAgdGhpcy5jeCA9IDA7XG4gICAgdGhpcy5jeSA9IDA7XG4gICAgdmFyIG51bWJlcnMgPSB0b051bWJlcnMocm90YXRlKTtcbiAgICB0aGlzLmFuZ2xlID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnYW5nbGUnLCBudW1iZXJzWzBdKTtcbiAgICB0aGlzLm9yaWdpblggPSB0cmFuc2Zvcm1PcmlnaW5bMF07XG4gICAgdGhpcy5vcmlnaW5ZID0gdHJhbnNmb3JtT3JpZ2luWzFdO1xuICAgIHRoaXMuY3ggPSBudW1iZXJzWzFdIHx8IDA7XG4gICAgdGhpcy5jeSA9IG51bWJlcnNbMl0gfHwgMDtcbiAgfVxuXG4gIGFwcGx5KGN0eCkge1xuICAgIHZhciB7XG4gICAgICBjeCxcbiAgICAgIGN5LFxuICAgICAgb3JpZ2luWCxcbiAgICAgIG9yaWdpblksXG4gICAgICBhbmdsZVxuICAgIH0gPSB0aGlzO1xuICAgIHZhciB0eCA9IGN4ICsgb3JpZ2luWC5nZXRQaXhlbHMoJ3gnKTtcbiAgICB2YXIgdHkgPSBjeSArIG9yaWdpblkuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0eCwgdHkpO1xuICAgIGN0eC5yb3RhdGUoYW5nbGUuZ2V0UmFkaWFucygpKTtcbiAgICBjdHgudHJhbnNsYXRlKC10eCwgLXR5KTtcbiAgfVxuXG4gIHVuYXBwbHkoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIGN4LFxuICAgICAgY3ksXG4gICAgICBvcmlnaW5YLFxuICAgICAgb3JpZ2luWSxcbiAgICAgIGFuZ2xlXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHR4ID0gY3ggKyBvcmlnaW5YLmdldFBpeGVscygneCcpO1xuICAgIHZhciB0eSA9IGN5ICsgb3JpZ2luWS5nZXRQaXhlbHMoJ3knKTtcbiAgICBjdHgudHJhbnNsYXRlKHR4LCB0eSk7XG4gICAgY3R4LnJvdGF0ZSgtMS4wICogYW5nbGUuZ2V0UmFkaWFucygpKTtcbiAgICBjdHgudHJhbnNsYXRlKC10eCwgLXR5KTtcbiAgfVxuXG4gIGFwcGx5VG9Qb2ludChwb2ludCkge1xuICAgIHZhciB7XG4gICAgICBjeCxcbiAgICAgIGN5LFxuICAgICAgYW5nbGVcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgcmFkID0gYW5nbGUuZ2V0UmFkaWFucygpO1xuICAgIHBvaW50LmFwcGx5VHJhbnNmb3JtKFsxLCAwLCAwLCAxLCBjeCB8fCAwLjAsIGN5IHx8IDAuMCAvLyB0aGlzLnAueVxuICAgIF0pO1xuICAgIHBvaW50LmFwcGx5VHJhbnNmb3JtKFtNYXRoLmNvcyhyYWQpLCBNYXRoLnNpbihyYWQpLCAtTWF0aC5zaW4ocmFkKSwgTWF0aC5jb3MocmFkKSwgMCwgMF0pO1xuICAgIHBvaW50LmFwcGx5VHJhbnNmb3JtKFsxLCAwLCAwLCAxLCAtY3ggfHwgMC4wLCAtY3kgfHwgMC4wIC8vIC10aGlzLnAueVxuICAgIF0pO1xuICB9XG5cbn1cblxuY2xhc3MgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihfLCBzY2FsZSwgdHJhbnNmb3JtT3JpZ2luKSB7XG4gICAgdGhpcy50eXBlID0gJ3NjYWxlJztcbiAgICB0aGlzLnNjYWxlID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpblggPSBudWxsO1xuICAgIHRoaXMub3JpZ2luWSA9IG51bGw7XG4gICAgdmFyIHNjYWxlU2l6ZSA9IFBvaW50LnBhcnNlU2NhbGUoc2NhbGUpOyAvLyBXb3JrYXJvdW5kIGZvciBub2RlLWNhbnZhc1xuXG4gICAgaWYgKHNjYWxlU2l6ZS54ID09PSAwIHx8IHNjYWxlU2l6ZS55ID09PSAwKSB7XG4gICAgICBzY2FsZVNpemUueCA9IFBTRVVET19aRVJPO1xuICAgICAgc2NhbGVTaXplLnkgPSBQU0VVRE9fWkVSTztcbiAgICB9XG5cbiAgICB0aGlzLnNjYWxlID0gc2NhbGVTaXplO1xuICAgIHRoaXMub3JpZ2luWCA9IHRyYW5zZm9ybU9yaWdpblswXTtcbiAgICB0aGlzLm9yaWdpblkgPSB0cmFuc2Zvcm1PcmlnaW5bMV07XG4gIH1cblxuICBhcHBseShjdHgpIHtcbiAgICB2YXIge1xuICAgICAgc2NhbGU6IHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfSxcbiAgICAgIG9yaWdpblgsXG4gICAgICBvcmlnaW5ZXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHR4ID0gb3JpZ2luWC5nZXRQaXhlbHMoJ3gnKTtcbiAgICB2YXIgdHkgPSBvcmlnaW5ZLmdldFBpeGVscygneScpO1xuICAgIGN0eC50cmFuc2xhdGUodHgsIHR5KTtcbiAgICBjdHguc2NhbGUoeCwgeSB8fCB4KTtcbiAgICBjdHgudHJhbnNsYXRlKC10eCwgLXR5KTtcbiAgfVxuXG4gIHVuYXBwbHkoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIHNjYWxlOiB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0sXG4gICAgICBvcmlnaW5YLFxuICAgICAgb3JpZ2luWVxuICAgIH0gPSB0aGlzO1xuICAgIHZhciB0eCA9IG9yaWdpblguZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIHR5ID0gb3JpZ2luWS5nZXRQaXhlbHMoJ3knKTtcbiAgICBjdHgudHJhbnNsYXRlKHR4LCB0eSk7XG4gICAgY3R4LnNjYWxlKDEuMCAvIHgsIDEuMCAvIHkgfHwgeCk7XG4gICAgY3R4LnRyYW5zbGF0ZSgtdHgsIC10eSk7XG4gIH1cblxuICBhcHBseVRvUG9pbnQocG9pbnQpIHtcbiAgICB2YXIge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9ID0gdGhpcy5zY2FsZTtcbiAgICBwb2ludC5hcHBseVRyYW5zZm9ybShbeCB8fCAwLjAsIDAsIDAsIHkgfHwgMC4wLCAwLCAwXSk7XG4gIH1cblxufVxuXG5jbGFzcyBNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihfLCBtYXRyaXgsIHRyYW5zZm9ybU9yaWdpbikge1xuICAgIHRoaXMudHlwZSA9ICdtYXRyaXgnO1xuICAgIHRoaXMubWF0cml4ID0gW107XG4gICAgdGhpcy5vcmlnaW5YID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpblkgPSBudWxsO1xuICAgIHRoaXMubWF0cml4ID0gdG9OdW1iZXJzKG1hdHJpeCk7XG4gICAgdGhpcy5vcmlnaW5YID0gdHJhbnNmb3JtT3JpZ2luWzBdO1xuICAgIHRoaXMub3JpZ2luWSA9IHRyYW5zZm9ybU9yaWdpblsxXTtcbiAgfVxuXG4gIGFwcGx5KGN0eCkge1xuICAgIHZhciB7XG4gICAgICBvcmlnaW5YLFxuICAgICAgb3JpZ2luWSxcbiAgICAgIG1hdHJpeFxuICAgIH0gPSB0aGlzO1xuICAgIHZhciB0eCA9IG9yaWdpblguZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIHR5ID0gb3JpZ2luWS5nZXRQaXhlbHMoJ3knKTtcbiAgICBjdHgudHJhbnNsYXRlKHR4LCB0eSk7XG4gICAgY3R4LnRyYW5zZm9ybShtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM10sIG1hdHJpeFs0XSwgbWF0cml4WzVdKTtcbiAgICBjdHgudHJhbnNsYXRlKC10eCwgLXR5KTtcbiAgfVxuXG4gIHVuYXBwbHkoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIG9yaWdpblgsXG4gICAgICBvcmlnaW5ZLFxuICAgICAgbWF0cml4XG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIGEgPSBtYXRyaXhbMF07XG4gICAgdmFyIGIgPSBtYXRyaXhbMl07XG4gICAgdmFyIGMgPSBtYXRyaXhbNF07XG4gICAgdmFyIGQgPSBtYXRyaXhbMV07XG4gICAgdmFyIGUgPSBtYXRyaXhbM107XG4gICAgdmFyIGYgPSBtYXRyaXhbNV07XG4gICAgdmFyIGcgPSAwLjA7XG4gICAgdmFyIGggPSAwLjA7XG4gICAgdmFyIGkgPSAxLjA7XG4gICAgdmFyIGRldCA9IDEgLyAoYSAqIChlICogaSAtIGYgKiBoKSAtIGIgKiAoZCAqIGkgLSBmICogZykgKyBjICogKGQgKiBoIC0gZSAqIGcpKTtcbiAgICB2YXIgdHggPSBvcmlnaW5YLmdldFBpeGVscygneCcpO1xuICAgIHZhciB0eSA9IG9yaWdpblkuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0eCwgdHkpO1xuICAgIGN0eC50cmFuc2Zvcm0oZGV0ICogKGUgKiBpIC0gZiAqIGgpLCBkZXQgKiAoZiAqIGcgLSBkICogaSksIGRldCAqIChjICogaCAtIGIgKiBpKSwgZGV0ICogKGEgKiBpIC0gYyAqIGcpLCBkZXQgKiAoYiAqIGYgLSBjICogZSksIGRldCAqIChjICogZCAtIGEgKiBmKSk7XG4gICAgY3R4LnRyYW5zbGF0ZSgtdHgsIC10eSk7XG4gIH1cblxuICBhcHBseVRvUG9pbnQocG9pbnQpIHtcbiAgICBwb2ludC5hcHBseVRyYW5zZm9ybSh0aGlzLm1hdHJpeCk7XG4gIH1cblxufVxuXG5jbGFzcyBTa2V3IGV4dGVuZHMgTWF0cml4IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHNrZXcsIHRyYW5zZm9ybU9yaWdpbikge1xuICAgIHN1cGVyKGRvY3VtZW50LCBza2V3LCB0cmFuc2Zvcm1PcmlnaW4pO1xuICAgIHRoaXMudHlwZSA9ICdza2V3JztcbiAgICB0aGlzLmFuZ2xlID0gbnVsbDtcbiAgICB0aGlzLmFuZ2xlID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnYW5nbGUnLCBza2V3KTtcbiAgfVxuXG59XG5cbmNsYXNzIFNrZXdYIGV4dGVuZHMgU2tldyB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBza2V3LCB0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgICBzdXBlcihkb2N1bWVudCwgc2tldywgdHJhbnNmb3JtT3JpZ2luKTtcbiAgICB0aGlzLnR5cGUgPSAnc2tld1gnO1xuICAgIHRoaXMubWF0cml4ID0gWzEsIDAsIE1hdGgudGFuKHRoaXMuYW5nbGUuZ2V0UmFkaWFucygpKSwgMSwgMCwgMF07XG4gIH1cblxufVxuXG5jbGFzcyBTa2V3WSBleHRlbmRzIFNrZXcge1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgc2tldywgdHJhbnNmb3JtT3JpZ2luKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIHNrZXcsIHRyYW5zZm9ybU9yaWdpbik7XG4gICAgdGhpcy50eXBlID0gJ3NrZXdZJztcbiAgICB0aGlzLm1hdHJpeCA9IFsxLCBNYXRoLnRhbih0aGlzLmFuZ2xlLmdldFJhZGlhbnMoKSksIDAsIDEsIDAsIDBdO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VUcmFuc2Zvcm1zKHRyYW5zZm9ybSkge1xuICByZXR1cm4gY29tcHJlc3NTcGFjZXModHJhbnNmb3JtKS50cmltKCkucmVwbGFjZSgvXFwpKFthLXpBLVpdKS9nLCAnKSAkMScpLnJlcGxhY2UoL1xcKShcXHM/LFxccz8pL2csICcpICcpLnNwbGl0KC9cXHMoPz1bYS16XSkvKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUcmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIHZhciBbdHlwZSwgdmFsdWVdID0gdHJhbnNmb3JtLnNwbGl0KCcoJyk7XG4gIHJldHVybiBbdHlwZS50cmltKCksIHZhbHVlLnRyaW0oKS5yZXBsYWNlKCcpJywgJycpXTtcbn1cblxuY2xhc3MgVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHRyYW5zZm9ybSwgdHJhbnNmb3JtT3JpZ2luKSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgIHRoaXMudHJhbnNmb3JtcyA9IFtdO1xuICAgIHZhciBkYXRhID0gcGFyc2VUcmFuc2Zvcm1zKHRyYW5zZm9ybSk7XG4gICAgZGF0YS5mb3JFYWNoKHRyYW5zZm9ybSA9PiB7XG4gICAgICBpZiAodHJhbnNmb3JtID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgW3R5cGUsIHZhbHVlXSA9IHBhcnNlVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICB2YXIgVHJhbnNmb3JtVHlwZSA9IFRyYW5zZm9ybS50cmFuc2Zvcm1UeXBlc1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBUcmFuc2Zvcm1UeXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybXMucHVzaChuZXcgVHJhbnNmb3JtVHlwZSh0aGlzLmRvY3VtZW50LCB2YWx1ZSwgdHJhbnNmb3JtT3JpZ2luKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUVsZW1lbnQoZG9jdW1lbnQsIGVsZW1lbnQpIHtcbiAgICB2YXIgdHJhbnNmb3JtU3R5bGUgPSBlbGVtZW50LmdldFN0eWxlKCd0cmFuc2Zvcm0nLCBmYWxzZSwgdHJ1ZSk7XG4gICAgdmFyIFt0cmFuc2Zvcm1PcmlnaW5YUHJvcGVydHksIHRyYW5zZm9ybU9yaWdpbllQcm9wZXJ0eSA9IHRyYW5zZm9ybU9yaWdpblhQcm9wZXJ0eV0gPSBlbGVtZW50LmdldFN0eWxlKCd0cmFuc2Zvcm0tb3JpZ2luJywgZmFsc2UsIHRydWUpLnNwbGl0KCk7XG4gICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IFt0cmFuc2Zvcm1PcmlnaW5YUHJvcGVydHksIHRyYW5zZm9ybU9yaWdpbllQcm9wZXJ0eV07XG5cbiAgICBpZiAodHJhbnNmb3JtU3R5bGUuaGFzVmFsdWUoKSkge1xuICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0oZG9jdW1lbnQsIHRyYW5zZm9ybVN0eWxlLmdldFN0cmluZygpLCB0cmFuc2Zvcm1PcmlnaW4pO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXBwbHkoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIHRyYW5zZm9ybXNcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgbGVuID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0cmFuc2Zvcm1zW2ldLmFwcGx5KGN0eCk7XG4gICAgfVxuICB9XG5cbiAgdW5hcHBseShjdHgpIHtcbiAgICB2YXIge1xuICAgICAgdHJhbnNmb3Jtc1xuICAgIH0gPSB0aGlzO1xuICAgIHZhciBsZW4gPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdHJhbnNmb3Jtc1tpXS51bmFwcGx5KGN0eCk7XG4gICAgfVxuICB9IC8vIFRPRE86IGFwcGx5VG9Qb2ludCB1bnVzZWQgLi4uIHJlbW92ZT9cblxuXG4gIGFwcGx5VG9Qb2ludChwb2ludCkge1xuICAgIHZhciB7XG4gICAgICB0cmFuc2Zvcm1zXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIGxlbiA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdHJhbnNmb3Jtc1tpXS5hcHBseVRvUG9pbnQocG9pbnQpO1xuICAgIH1cbiAgfVxuXG59XG5UcmFuc2Zvcm0udHJhbnNmb3JtVHlwZXMgPSB7XG4gIHRyYW5zbGF0ZTogVHJhbnNsYXRlLFxuICByb3RhdGU6IFJvdGF0ZSxcbiAgc2NhbGU6IFNjYWxlLFxuICBtYXRyaXg6IE1hdHJpeCxcbiAgc2tld1g6IFNrZXdYLFxuICBza2V3WTogU2tld1lcbn07XG5cbmNsYXNzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgbm9kZSkge1xuICAgIHZhciBjYXB0dXJlVGV4dE5vZGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLmNhcHR1cmVUZXh0Tm9kZXMgPSBjYXB0dXJlVGV4dE5vZGVzO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIHRoaXMuc3R5bGVzID0ge307XG4gICAgdGhpcy5zdHlsZXNTcGVjaWZpY2l0eSA9IHt9O1xuICAgIHRoaXMuYW5pbWF0aW9uRnJvemVuID0gZmFsc2U7XG4gICAgdGhpcy5hbmltYXRpb25Gcm96ZW5WYWx1ZSA9ICcnO1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICBpZiAoIW5vZGUgfHwgbm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gRUxFTUVOVF9OT0RFXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBhZGQgYXR0cmlidXRlc1xuXG5cbiAgICBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcykuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xuICAgICAgdmFyIG5vZGVOYW1lID0gbm9ybWFsaXplQXR0cmlidXRlTmFtZShhdHRyaWJ1dGUubm9kZU5hbWUpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzW25vZGVOYW1lXSA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgbm9kZU5hbWUsIGF0dHJpYnV0ZS52YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5hZGRTdHlsZXNGcm9tU3R5bGVEZWZpbml0aW9uKCk7IC8vIGFkZCBpbmxpbmUgc3R5bGVzXG5cbiAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykuaGFzVmFsdWUoKSkge1xuICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0QXR0cmlidXRlKCdzdHlsZScpLmdldFN0cmluZygpLnNwbGl0KCc7JykubWFwKF8gPT4gXy50cmltKCkpO1xuICAgICAgc3R5bGVzLmZvckVhY2goc3R5bGUgPT4ge1xuICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIFtuYW1lLCB2YWx1ZV0gPSBzdHlsZS5zcGxpdCgnOicpLm1hcChfID0+IF8udHJpbSgpKTtcbiAgICAgICAgdGhpcy5zdHlsZXNbbmFtZV0gPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciB7XG4gICAgICBkZWZpbml0aW9uc1xuICAgIH0gPSBkb2N1bWVudDtcbiAgICB2YXIgaWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKTsgLy8gYWRkIGlkXG5cbiAgICBpZiAoaWQuaGFzVmFsdWUoKSkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uc1tpZC5nZXRTdHJpbmcoKV0pIHtcbiAgICAgICAgZGVmaW5pdGlvbnNbaWQuZ2V0U3RyaW5nKCldID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheS5mcm9tKG5vZGUuY2hpbGROb2RlcykuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB0aGlzLmFkZENoaWxkKGNoaWxkTm9kZSk7IC8vIEVMRU1FTlRfTk9ERVxuICAgICAgfSBlbHNlIGlmIChjYXB0dXJlVGV4dE5vZGVzICYmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDMgfHwgY2hpbGROb2RlLm5vZGVUeXBlID09PSA0KSkge1xuICAgICAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZE5vZGUpO1xuXG4gICAgICAgIGlmICh0ZXh0Tm9kZS5nZXRUZXh0KCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuYWRkQ2hpbGQodGV4dE5vZGUpOyAvLyBURVhUX05PREVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlKG5hbWUpIHtcbiAgICB2YXIgY3JlYXRlSWZOb3RFeGlzdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgIHZhciBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgaWYgKCFhdHRyICYmIGNyZWF0ZUlmTm90RXhpc3RzKSB7XG4gICAgICB2YXIgX2F0dHIgPSBuZXcgUHJvcGVydHkodGhpcy5kb2N1bWVudCwgbmFtZSwgJycpO1xuXG4gICAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0gPSBfYXR0cjtcbiAgICAgIHJldHVybiBfYXR0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXR0ciB8fCBQcm9wZXJ0eS5lbXB0eSh0aGlzLmRvY3VtZW50KTtcbiAgfVxuXG4gIGdldEhyZWZBdHRyaWJ1dGUoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgaWYgKGtleSA9PT0gJ2hyZWYnIHx8IGtleS5lbmRzV2l0aCgnOmhyZWYnKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb3BlcnR5LmVtcHR5KHRoaXMuZG9jdW1lbnQpO1xuICB9XG5cbiAgZ2V0U3R5bGUobmFtZSkge1xuICAgIHZhciBjcmVhdGVJZk5vdEV4aXN0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgdmFyIHNraXBBbmNlc3RvcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGVzW25hbWVdO1xuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgdmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcblxuICAgIGlmIChhdHRyICE9PSBudWxsICYmIGF0dHIgIT09IHZvaWQgMCAmJiBhdHRyLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHRoaXMuc3R5bGVzW25hbWVdID0gYXR0cjsgLy8gbW92ZSB1cCB0byBtZSB0byBjYWNoZVxuXG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG5cbiAgICBpZiAoIXNraXBBbmNlc3RvcnMpIHtcbiAgICAgIHZhciB7XG4gICAgICAgIHBhcmVudFxuICAgICAgfSA9IHRoaXM7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIHBhcmVudFN0eWxlID0gcGFyZW50LmdldFN0eWxlKG5hbWUpO1xuXG4gICAgICAgIGlmIChwYXJlbnRTdHlsZSAhPT0gbnVsbCAmJiBwYXJlbnRTdHlsZSAhPT0gdm9pZCAwICYmIHBhcmVudFN0eWxlLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50U3R5bGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3JlYXRlSWZOb3RFeGlzdHMpIHtcbiAgICAgIHZhciBfc3R5bGUgPSBuZXcgUHJvcGVydHkodGhpcy5kb2N1bWVudCwgbmFtZSwgJycpO1xuXG4gICAgICB0aGlzLnN0eWxlc1tuYW1lXSA9IF9zdHlsZTtcbiAgICAgIHJldHVybiBfc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlIHx8IFByb3BlcnR5LmVtcHR5KHRoaXMuZG9jdW1lbnQpO1xuICB9XG5cbiAgcmVuZGVyKGN0eCkge1xuICAgIC8vIGRvbid0IHJlbmRlciBkaXNwbGF5PW5vbmVcbiAgICAvLyBkb24ndCByZW5kZXIgdmlzaWJpbGl0eT1oaWRkZW5cbiAgICBpZiAodGhpcy5nZXRTdHlsZSgnZGlzcGxheScpLmdldFN0cmluZygpID09PSAnbm9uZScgfHwgdGhpcy5nZXRTdHlsZSgndmlzaWJpbGl0eScpLmdldFN0cmluZygpID09PSAnaGlkZGVuJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN0eC5zYXZlKCk7XG5cbiAgICBpZiAodGhpcy5nZXRTdHlsZSgnbWFzaycpLmhhc1ZhbHVlKCkpIHtcbiAgICAgIC8vIG1hc2tcbiAgICAgIHZhciBtYXNrID0gdGhpcy5nZXRTdHlsZSgnbWFzaycpLmdldERlZmluaXRpb24oKTtcblxuICAgICAgaWYgKG1hc2spIHtcbiAgICAgICAgdGhpcy5hcHBseUVmZmVjdHMoY3R4KTtcbiAgICAgICAgbWFzay5hcHBseShjdHgsIHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5nZXRTdHlsZSgnZmlsdGVyJykuZ2V0VmFsdWUoJ25vbmUnKSAhPT0gJ25vbmUnKSB7XG4gICAgICAvLyBmaWx0ZXJcbiAgICAgIHZhciBmaWx0ZXIgPSB0aGlzLmdldFN0eWxlKCdmaWx0ZXInKS5nZXREZWZpbml0aW9uKCk7XG5cbiAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgdGhpcy5hcHBseUVmZmVjdHMoY3R4KTtcbiAgICAgICAgZmlsdGVyLmFwcGx5KGN0eCwgdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q29udGV4dChjdHgpO1xuICAgICAgdGhpcy5yZW5kZXJDaGlsZHJlbihjdHgpO1xuICAgICAgdGhpcy5jbGVhckNvbnRleHQoY3R4KTtcbiAgICB9XG5cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgc2V0Q29udGV4dChfKSB7Ly8gTk8gUkVOREVSXG4gIH1cblxuICBhcHBseUVmZmVjdHMoY3R4KSB7XG4gICAgLy8gdHJhbnNmb3JtXG4gICAgdmFyIHRyYW5zZm9ybSA9IFRyYW5zZm9ybS5mcm9tRWxlbWVudCh0aGlzLmRvY3VtZW50LCB0aGlzKTtcblxuICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgIHRyYW5zZm9ybS5hcHBseShjdHgpO1xuICAgIH0gLy8gY2xpcFxuXG5cbiAgICB2YXIgY2xpcFBhdGhTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdjbGlwLXBhdGgnLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAoY2xpcFBhdGhTdHlsZVByb3AuaGFzVmFsdWUoKSkge1xuICAgICAgdmFyIGNsaXAgPSBjbGlwUGF0aFN0eWxlUHJvcC5nZXREZWZpbml0aW9uKCk7XG5cbiAgICAgIGlmIChjbGlwKSB7XG4gICAgICAgIGNsaXAuYXBwbHkoY3R4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhckNvbnRleHQoXykgey8vIE5PIFJFTkRFUlxuICB9XG5cbiAgcmVuZGVyQ2hpbGRyZW4oY3R4KSB7XG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGNoaWxkLnJlbmRlcihjdHgpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkQ2hpbGQoY2hpbGROb2RlKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGROb2RlIGluc3RhbmNlb2YgRWxlbWVudCA/IGNoaWxkTm9kZSA6IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjaGlsZE5vZGUpO1xuICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG5cbiAgICBpZiAoIUVsZW1lbnQuaWdub3JlQ2hpbGRUeXBlcy5pbmNsdWRlcyhjaGlsZC50eXBlKSkge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cblxuICBtYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICB2YXIge1xuICAgICAgbm9kZVxuICAgIH0gPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBub2RlLm1hdGNoZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZUNsYXNzZXMgPSBub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcblxuICAgIGlmICghc3R5bGVDbGFzc2VzIHx8IHN0eWxlQ2xhc3NlcyA9PT0gJycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVDbGFzc2VzLnNwbGl0KCcgJykuc29tZShzdHlsZUNsYXNzID0+IFwiLlwiLmNvbmNhdChzdHlsZUNsYXNzKSA9PT0gc2VsZWN0b3IpO1xuICB9XG5cbiAgYWRkU3R5bGVzRnJvbVN0eWxlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIge1xuICAgICAgc3R5bGVzLFxuICAgICAgc3R5bGVzU3BlY2lmaWNpdHlcbiAgICB9ID0gdGhpcy5kb2N1bWVudDtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzZWxlY3Rvci5zdGFydHNXaXRoKCdAJykgJiYgdGhpcy5tYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHN0eWxlc1tzZWxlY3Rvcl07XG4gICAgICAgIHZhciBzcGVjaWZpY2l0eSA9IHN0eWxlc1NwZWNpZmljaXR5W3NlbGVjdG9yXTtcblxuICAgICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdTcGVjaWZpY2l0eSA9IHRoaXMuc3R5bGVzU3BlY2lmaWNpdHlbbmFtZV07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmdTcGVjaWZpY2l0eSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgZXhpc3RpbmdTcGVjaWZpY2l0eSA9ICcwMDAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3BlY2lmaWNpdHkgPj0gZXhpc3RpbmdTcGVjaWZpY2l0eSkge1xuICAgICAgICAgICAgICB0aGlzLnN0eWxlc1tuYW1lXSA9IHN0eWxlW25hbWVdO1xuICAgICAgICAgICAgICB0aGlzLnN0eWxlc1NwZWNpZmljaXR5W25hbWVdID0gc3BlY2lmaWNpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU3R5bGVzKGVsZW1lbnQsIGlnbm9yZVN0eWxlcykge1xuICAgIHZhciB0b1Jlc3RvcmUgPSBpZ25vcmVTdHlsZXMucmVkdWNlKCh0b1Jlc3RvcmUsIG5hbWUpID0+IHtcbiAgICAgIHZhciBzdHlsZVByb3AgPSBlbGVtZW50LmdldFN0eWxlKG5hbWUpO1xuXG4gICAgICBpZiAoIXN0eWxlUHJvcC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIHJldHVybiB0b1Jlc3RvcmU7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlUHJvcC5nZXRTdHJpbmcoKTtcbiAgICAgIHN0eWxlUHJvcC5zZXRWYWx1ZSgnJyk7XG4gICAgICByZXR1cm4gWy4uLnRvUmVzdG9yZSwgW25hbWUsIHZhbHVlXV07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB0b1Jlc3RvcmU7XG4gIH1cblxuICByZXN0b3JlU3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICAgIHN0eWxlcy5mb3JFYWNoKChfcmVmKSA9PiB7XG4gICAgICB2YXIgW25hbWUsIHZhbHVlXSA9IF9yZWY7XG4gICAgICBlbGVtZW50LmdldFN0eWxlKG5hbWUsIHRydWUpLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG59XG5FbGVtZW50Lmlnbm9yZUNoaWxkVHlwZXMgPSBbJ3RpdGxlJ107XG5cbmNsYXNzIFVua25vd25FbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gd3JhcEZvbnRGYW1pbHkoZm9udEZhbWlseSkge1xuICB2YXIgdHJpbW1lZCA9IGZvbnRGYW1pbHkudHJpbSgpO1xuICByZXR1cm4gL14oJ3xcIikvLnRlc3QodHJpbW1lZCkgPyB0cmltbWVkIDogXCJcXFwiXCIuY29uY2F0KHRyaW1tZWQsIFwiXFxcIlwiKTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZvbnRGYW1pbHkoZm9udEZhbWlseSkge1xuICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnID8gZm9udEZhbWlseSA6IGZvbnRGYW1pbHkudHJpbSgpLnNwbGl0KCcsJykubWFwKHdyYXBGb250RmFtaWx5KS5qb2luKCcsJyk7XG59XG4vKipcclxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtc3R5bGVcclxuICogQHBhcmFtIGZvbnRTdHlsZVxyXG4gKiBAcmV0dXJucyBDU1MgZm9udCBzdHlsZS5cclxuICovXG5cblxuZnVuY3Rpb24gcHJlcGFyZUZvbnRTdHlsZShmb250U3R5bGUpIHtcbiAgaWYgKCFmb250U3R5bGUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgdGFyZ2V0Rm9udFN0eWxlID0gZm9udFN0eWxlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gIHN3aXRjaCAodGFyZ2V0Rm9udFN0eWxlKSB7XG4gICAgY2FzZSAnbm9ybWFsJzpcbiAgICBjYXNlICdpdGFsaWMnOlxuICAgIGNhc2UgJ29ibGlxdWUnOlxuICAgIGNhc2UgJ2luaGVyaXQnOlxuICAgIGNhc2UgJ2luaXRpYWwnOlxuICAgIGNhc2UgJ3Vuc2V0JzpcbiAgICAgIHJldHVybiB0YXJnZXRGb250U3R5bGU7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKC9eb2JsaXF1ZVxccysoLXwpXFxkK2RlZyQvLnRlc3QodGFyZ2V0Rm9udFN0eWxlKSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0Rm9udFN0eWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn1cbi8qKlxyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC13ZWlnaHRcclxuICogQHBhcmFtIGZvbnRXZWlnaHRcclxuICogQHJldHVybnMgQ1NTIGZvbnQgd2VpZ2h0LlxyXG4gKi9cblxuXG5mdW5jdGlvbiBwcmVwYXJlRm9udFdlaWdodChmb250V2VpZ2h0KSB7XG4gIGlmICghZm9udFdlaWdodCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciB0YXJnZXRGb250V2VpZ2h0ID0gZm9udFdlaWdodC50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICBzd2l0Y2ggKHRhcmdldEZvbnRXZWlnaHQpIHtcbiAgICBjYXNlICdub3JtYWwnOlxuICAgIGNhc2UgJ2JvbGQnOlxuICAgIGNhc2UgJ2xpZ2h0ZXInOlxuICAgIGNhc2UgJ2JvbGRlcic6XG4gICAgY2FzZSAnaW5oZXJpdCc6XG4gICAgY2FzZSAnaW5pdGlhbCc6XG4gICAgY2FzZSAndW5zZXQnOlxuICAgICAgcmV0dXJuIHRhcmdldEZvbnRXZWlnaHQ7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKC9eW1xcZC5dKyQvLnRlc3QodGFyZ2V0Rm9udFdlaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldEZvbnRXZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5jbGFzcyBGb250IHtcbiAgY29uc3RydWN0b3IoZm9udFN0eWxlLCBmb250VmFyaWFudCwgZm9udFdlaWdodCwgZm9udFNpemUsIGZvbnRGYW1pbHksIGluaGVyaXQpIHtcbiAgICB2YXIgaW5oZXJpdEZvbnQgPSBpbmhlcml0ID8gdHlwZW9mIGluaGVyaXQgPT09ICdzdHJpbmcnID8gRm9udC5wYXJzZShpbmhlcml0KSA6IGluaGVyaXQgOiB7fTtcbiAgICB0aGlzLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5IHx8IGluaGVyaXRGb250LmZvbnRGYW1pbHk7XG4gICAgdGhpcy5mb250U2l6ZSA9IGZvbnRTaXplIHx8IGluaGVyaXRGb250LmZvbnRTaXplO1xuICAgIHRoaXMuZm9udFN0eWxlID0gZm9udFN0eWxlIHx8IGluaGVyaXRGb250LmZvbnRTdHlsZTtcbiAgICB0aGlzLmZvbnRXZWlnaHQgPSBmb250V2VpZ2h0IHx8IGluaGVyaXRGb250LmZvbnRXZWlnaHQ7XG4gICAgdGhpcy5mb250VmFyaWFudCA9IGZvbnRWYXJpYW50IHx8IGluaGVyaXRGb250LmZvbnRWYXJpYW50O1xuICB9XG5cbiAgc3RhdGljIHBhcnNlKCkge1xuICAgIHZhciBmb250ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgICB2YXIgaW5oZXJpdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBmb250U3R5bGUgPSAnJztcbiAgICB2YXIgZm9udFZhcmlhbnQgPSAnJztcbiAgICB2YXIgZm9udFdlaWdodCA9ICcnO1xuICAgIHZhciBmb250U2l6ZSA9ICcnO1xuICAgIHZhciBmb250RmFtaWx5ID0gJyc7XG4gICAgdmFyIHBhcnRzID0gY29tcHJlc3NTcGFjZXMoZm9udCkudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgdmFyIHNldCA9IHtcbiAgICAgIGZvbnRTaXplOiBmYWxzZSxcbiAgICAgIGZvbnRTdHlsZTogZmFsc2UsXG4gICAgICBmb250V2VpZ2h0OiBmYWxzZSxcbiAgICAgIGZvbnRWYXJpYW50OiBmYWxzZVxuICAgIH07XG4gICAgcGFydHMuZm9yRWFjaChwYXJ0ID0+IHtcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlICFzZXQuZm9udFN0eWxlICYmIEZvbnQuc3R5bGVzLmluY2x1ZGVzKHBhcnQpOlxuICAgICAgICAgIGlmIChwYXJ0ICE9PSAnaW5oZXJpdCcpIHtcbiAgICAgICAgICAgIGZvbnRTdHlsZSA9IHBhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0LmZvbnRTdHlsZSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAhc2V0LmZvbnRWYXJpYW50ICYmIEZvbnQudmFyaWFudHMuaW5jbHVkZXMocGFydCk6XG4gICAgICAgICAgaWYgKHBhcnQgIT09ICdpbmhlcml0Jykge1xuICAgICAgICAgICAgZm9udFZhcmlhbnQgPSBwYXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldC5mb250U3R5bGUgPSB0cnVlO1xuICAgICAgICAgIHNldC5mb250VmFyaWFudCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAhc2V0LmZvbnRXZWlnaHQgJiYgRm9udC53ZWlnaHRzLmluY2x1ZGVzKHBhcnQpOlxuICAgICAgICAgIGlmIChwYXJ0ICE9PSAnaW5oZXJpdCcpIHtcbiAgICAgICAgICAgIGZvbnRXZWlnaHQgPSBwYXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldC5mb250U3R5bGUgPSB0cnVlO1xuICAgICAgICAgIHNldC5mb250VmFyaWFudCA9IHRydWU7XG4gICAgICAgICAgc2V0LmZvbnRXZWlnaHQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgIXNldC5mb250U2l6ZTpcbiAgICAgICAgICBpZiAocGFydCAhPT0gJ2luaGVyaXQnKSB7XG4gICAgICAgICAgICBbZm9udFNpemVdID0gcGFydC5zcGxpdCgnLycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldC5mb250U3R5bGUgPSB0cnVlO1xuICAgICAgICAgIHNldC5mb250VmFyaWFudCA9IHRydWU7XG4gICAgICAgICAgc2V0LmZvbnRXZWlnaHQgPSB0cnVlO1xuICAgICAgICAgIHNldC5mb250U2l6ZSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAocGFydCAhPT0gJ2luaGVyaXQnKSB7XG4gICAgICAgICAgICBmb250RmFtaWx5ICs9IHBhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBGb250KGZvbnRTdHlsZSwgZm9udFZhcmlhbnQsIGZvbnRXZWlnaHQsIGZvbnRTaXplLCBmb250RmFtaWx5LCBpbmhlcml0KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBbcHJlcGFyZUZvbnRTdHlsZSh0aGlzLmZvbnRTdHlsZSksIHRoaXMuZm9udFZhcmlhbnQsIHByZXBhcmVGb250V2VpZ2h0KHRoaXMuZm9udFdlaWdodCksIHRoaXMuZm9udFNpemUsIC8vIFdyYXAgZm9udEZhbWlseSBvbmx5IG9uIG5vZGVqcyBhbmQgb25seSBmb3IgY2FudmFzLmN0eFxuICAgIHByZXBhcmVGb250RmFtaWx5KHRoaXMuZm9udEZhbWlseSldLmpvaW4oJyAnKS50cmltKCk7XG4gIH1cblxufVxuRm9udC5zdHlsZXMgPSAnbm9ybWFsfGl0YWxpY3xvYmxpcXVlfGluaGVyaXQnO1xuRm9udC52YXJpYW50cyA9ICdub3JtYWx8c21hbGwtY2Fwc3xpbmhlcml0JztcbkZvbnQud2VpZ2h0cyA9ICdub3JtYWx8Ym9sZHxib2xkZXJ8bGlnaHRlcnwxMDB8MjAwfDMwMHw0MDB8NTAwfDYwMHw3MDB8ODAwfDkwMHxpbmhlcml0JztcblxuY2xhc3MgQm91bmRpbmdCb3gge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB2YXIgeDEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IE51bWJlci5OYU47XG4gICAgdmFyIHkxID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBOdW1iZXIuTmFOO1xuICAgIHZhciB4MiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogTnVtYmVyLk5hTjtcbiAgICB2YXIgeTIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IE51bWJlci5OYU47XG4gICAgdGhpcy54MSA9IHgxO1xuICAgIHRoaXMueTEgPSB5MTtcbiAgICB0aGlzLngyID0geDI7XG4gICAgdGhpcy55MiA9IHkyO1xuICAgIHRoaXMuYWRkUG9pbnQoeDEsIHkxKTtcbiAgICB0aGlzLmFkZFBvaW50KHgyLCB5Mik7XG4gIH1cblxuICBnZXQgeCgpIHtcbiAgICByZXR1cm4gdGhpcy54MTtcbiAgfVxuXG4gIGdldCB5KCkge1xuICAgIHJldHVybiB0aGlzLnkxO1xuICB9XG5cbiAgZ2V0IHdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLngyIC0gdGhpcy54MTtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMueTIgLSB0aGlzLnkxO1xuICB9XG5cbiAgYWRkUG9pbnQoeCwgeSkge1xuICAgIGlmICh0eXBlb2YgeCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChpc05hTih0aGlzLngxKSB8fCBpc05hTih0aGlzLngyKSkge1xuICAgICAgICB0aGlzLngxID0geDtcbiAgICAgICAgdGhpcy54MiA9IHg7XG4gICAgICB9XG5cbiAgICAgIGlmICh4IDwgdGhpcy54MSkge1xuICAgICAgICB0aGlzLngxID0geDtcbiAgICAgIH1cblxuICAgICAgaWYgKHggPiB0aGlzLngyKSB7XG4gICAgICAgIHRoaXMueDIgPSB4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChpc05hTih0aGlzLnkxKSB8fCBpc05hTih0aGlzLnkyKSkge1xuICAgICAgICB0aGlzLnkxID0geTtcbiAgICAgICAgdGhpcy55MiA9IHk7XG4gICAgICB9XG5cbiAgICAgIGlmICh5IDwgdGhpcy55MSkge1xuICAgICAgICB0aGlzLnkxID0geTtcbiAgICAgIH1cblxuICAgICAgaWYgKHkgPiB0aGlzLnkyKSB7XG4gICAgICAgIHRoaXMueTIgPSB5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFkZFgoeCkge1xuICAgIHRoaXMuYWRkUG9pbnQoeCwgbnVsbCk7XG4gIH1cblxuICBhZGRZKHkpIHtcbiAgICB0aGlzLmFkZFBvaW50KG51bGwsIHkpO1xuICB9XG5cbiAgYWRkQm91bmRpbmdCb3goYm91bmRpbmdCb3gpIHtcbiAgICBpZiAoIWJvdW5kaW5nQm94KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHtcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyXG4gICAgfSA9IGJvdW5kaW5nQm94O1xuICAgIHRoaXMuYWRkUG9pbnQoeDEsIHkxKTtcbiAgICB0aGlzLmFkZFBvaW50KHgyLCB5Mik7XG4gIH1cblxuICBzdW1DdWJpYyh0LCBwMCwgcDEsIHAyLCBwMykge1xuICAgIHJldHVybiBNYXRoLnBvdygxIC0gdCwgMykgKiBwMCArIDMgKiBNYXRoLnBvdygxIC0gdCwgMikgKiB0ICogcDEgKyAzICogKDEgLSB0KSAqIE1hdGgucG93KHQsIDIpICogcDIgKyBNYXRoLnBvdyh0LCAzKSAqIHAzO1xuICB9XG5cbiAgYmV6aWVyQ3VydmVBZGQoZm9yWCwgcDAsIHAxLCBwMiwgcDMpIHtcbiAgICB2YXIgYiA9IDYgKiBwMCAtIDEyICogcDEgKyA2ICogcDI7XG4gICAgdmFyIGEgPSAtMyAqIHAwICsgOSAqIHAxIC0gOSAqIHAyICsgMyAqIHAzO1xuICAgIHZhciBjID0gMyAqIHAxIC0gMyAqIHAwO1xuXG4gICAgaWYgKGEgPT09IDApIHtcbiAgICAgIGlmIChiID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHQgPSAtYyAvIGI7XG5cbiAgICAgIGlmICgwIDwgdCAmJiB0IDwgMSkge1xuICAgICAgICBpZiAoZm9yWCkge1xuICAgICAgICAgIHRoaXMuYWRkWCh0aGlzLnN1bUN1YmljKHQsIHAwLCBwMSwgcDIsIHAzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hZGRZKHRoaXMuc3VtQ3ViaWModCwgcDAsIHAxLCBwMiwgcDMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGIyYWMgPSBNYXRoLnBvdyhiLCAyKSAtIDQgKiBjICogYTtcblxuICAgIGlmIChiMmFjIDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0MSA9ICgtYiArIE1hdGguc3FydChiMmFjKSkgLyAoMiAqIGEpO1xuXG4gICAgaWYgKDAgPCB0MSAmJiB0MSA8IDEpIHtcbiAgICAgIGlmIChmb3JYKSB7XG4gICAgICAgIHRoaXMuYWRkWCh0aGlzLnN1bUN1YmljKHQxLCBwMCwgcDEsIHAyLCBwMykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hZGRZKHRoaXMuc3VtQ3ViaWModDEsIHAwLCBwMSwgcDIsIHAzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHQyID0gKC1iIC0gTWF0aC5zcXJ0KGIyYWMpKSAvICgyICogYSk7XG5cbiAgICBpZiAoMCA8IHQyICYmIHQyIDwgMSkge1xuICAgICAgaWYgKGZvclgpIHtcbiAgICAgICAgdGhpcy5hZGRYKHRoaXMuc3VtQ3ViaWModDIsIHAwLCBwMSwgcDIsIHAzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkZFkodGhpcy5zdW1DdWJpYyh0MiwgcDAsIHAxLCBwMiwgcDMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gZnJvbSBodHRwOi8vYmxvZy5oYWNrZXJzLWNhZmUubmV0LzIwMDkvMDYvaG93LXRvLWNhbGN1bGF0ZS1iZXppZXItY3VydmVzLWJvdW5kaW5nLmh0bWxcblxuXG4gIGFkZEJlemllckN1cnZlKHAweCwgcDB5LCBwMXgsIHAxeSwgcDJ4LCBwMnksIHAzeCwgcDN5KSB7XG4gICAgdGhpcy5hZGRQb2ludChwMHgsIHAweSk7XG4gICAgdGhpcy5hZGRQb2ludChwM3gsIHAzeSk7XG4gICAgdGhpcy5iZXppZXJDdXJ2ZUFkZCh0cnVlLCBwMHgsIHAxeCwgcDJ4LCBwM3gpO1xuICAgIHRoaXMuYmV6aWVyQ3VydmVBZGQoZmFsc2UsIHAweSwgcDF5LCBwMnksIHAzeSk7XG4gIH1cblxuICBhZGRRdWFkcmF0aWNDdXJ2ZShwMHgsIHAweSwgcDF4LCBwMXksIHAyeCwgcDJ5KSB7XG4gICAgdmFyIGNwMXggPSBwMHggKyAyIC8gMyAqIChwMXggLSBwMHgpOyAvLyBDUDEgPSBRUDAgKyAyLzMgKihRUDEtUVAwKVxuXG4gICAgdmFyIGNwMXkgPSBwMHkgKyAyIC8gMyAqIChwMXkgLSBwMHkpOyAvLyBDUDEgPSBRUDAgKyAyLzMgKihRUDEtUVAwKVxuXG4gICAgdmFyIGNwMnggPSBjcDF4ICsgMSAvIDMgKiAocDJ4IC0gcDB4KTsgLy8gQ1AyID0gQ1AxICsgMS8zICooUVAyLVFQMClcblxuICAgIHZhciBjcDJ5ID0gY3AxeSArIDEgLyAzICogKHAyeSAtIHAweSk7IC8vIENQMiA9IENQMSArIDEvMyAqKFFQMi1RUDApXG5cbiAgICB0aGlzLmFkZEJlemllckN1cnZlKHAweCwgcDB5LCBjcDF4LCBjcDJ4LCBjcDF5LCBjcDJ5LCBwMngsIHAyeSk7XG4gIH1cblxuICBpc1BvaW50SW5Cb3goeCwgeSkge1xuICAgIHZhciB7XG4gICAgICB4MSxcbiAgICAgIHkxLFxuICAgICAgeDIsXG4gICAgICB5MlxuICAgIH0gPSB0aGlzO1xuICAgIHJldHVybiB4MSA8PSB4ICYmIHggPD0geDIgJiYgeTEgPD0geSAmJiB5IDw9IHkyO1xuICB9XG5cbn1cblxuY2xhc3MgUGF0aFBhcnNlciBleHRlbmRzIFNWR1BhdGhEYXRhIHtcbiAgY29uc3RydWN0b3IocGF0aCkge1xuICAgIHN1cGVyKHBhdGggLy8gRml4IHNwYWNlcyBhZnRlciBzaWducy5cbiAgICAucmVwbGFjZSgvKFsrXFwtLl0pXFxzKy9nbSwgJyQxJykgLy8gUmVtb3ZlIGludmFsaWQgcGFydC5cbiAgICAucmVwbGFjZSgvW15NbVp6TGxIaFZ2Q2NTc1FxVHRBYWVcXGRcXHMuLCstXS4qL2csICcnKSk7XG4gICAgdGhpcy5jb250cm9sID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0ID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgIHRoaXMuY29tbWFuZCA9IG51bGw7XG4gICAgdGhpcy5jb21tYW5kcyA9IHRoaXMuY29tbWFuZHM7XG4gICAgdGhpcy5pID0gLTE7XG4gICAgdGhpcy5wcmV2aW91c0NvbW1hbmQgPSBudWxsO1xuICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgdGhpcy5hbmdsZXMgPSBbXTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaSA9IC0xO1xuICAgIHRoaXMuY29tbWFuZCA9IG51bGw7XG4gICAgdGhpcy5wcmV2aW91c0NvbW1hbmQgPSBudWxsO1xuICAgIHRoaXMuc3RhcnQgPSBuZXcgUG9pbnQoMCwgMCk7XG4gICAgdGhpcy5jb250cm9sID0gbmV3IFBvaW50KDAsIDApO1xuICAgIHRoaXMuY3VycmVudCA9IG5ldyBQb2ludCgwLCAwKTtcbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMuYW5nbGVzID0gW107XG4gIH1cblxuICBpc0VuZCgpIHtcbiAgICB2YXIge1xuICAgICAgaSxcbiAgICAgIGNvbW1hbmRzXG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuIGkgPj0gY29tbWFuZHMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdmFyIGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRzWysrdGhpcy5pXTtcbiAgICB0aGlzLnByZXZpb3VzQ29tbWFuZCA9IHRoaXMuY29tbWFuZDtcbiAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgIHJldHVybiBjb21tYW5kO1xuICB9XG5cbiAgZ2V0UG9pbnQoKSB7XG4gICAgdmFyIHhQcm9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAneCc7XG4gICAgdmFyIHlQcm9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAneSc7XG4gICAgdmFyIHBvaW50ID0gbmV3IFBvaW50KHRoaXMuY29tbWFuZFt4UHJvcF0sIHRoaXMuY29tbWFuZFt5UHJvcF0pO1xuICAgIHJldHVybiB0aGlzLm1ha2VBYnNvbHV0ZShwb2ludCk7XG4gIH1cblxuICBnZXRBc0NvbnRyb2xQb2ludCh4UHJvcCwgeVByb3ApIHtcbiAgICB2YXIgcG9pbnQgPSB0aGlzLmdldFBvaW50KHhQcm9wLCB5UHJvcCk7XG4gICAgdGhpcy5jb250cm9sID0gcG9pbnQ7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgZ2V0QXNDdXJyZW50UG9pbnQoeFByb3AsIHlQcm9wKSB7XG4gICAgdmFyIHBvaW50ID0gdGhpcy5nZXRQb2ludCh4UHJvcCwgeVByb3ApO1xuICAgIHRoaXMuY3VycmVudCA9IHBvaW50O1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIGdldFJlZmxlY3RlZENvbnRyb2xQb2ludCgpIHtcbiAgICB2YXIgcHJldmlvdXNDb21tYW5kID0gdGhpcy5wcmV2aW91c0NvbW1hbmQudHlwZTtcblxuICAgIGlmIChwcmV2aW91c0NvbW1hbmQgIT09IFNWR1BhdGhEYXRhLkNVUlZFX1RPICYmIHByZXZpb3VzQ29tbWFuZCAhPT0gU1ZHUGF0aERhdGEuU01PT1RIX0NVUlZFX1RPICYmIHByZXZpb3VzQ29tbWFuZCAhPT0gU1ZHUGF0aERhdGEuUVVBRF9UTyAmJiBwcmV2aW91c0NvbW1hbmQgIT09IFNWR1BhdGhEYXRhLlNNT09USF9RVUFEX1RPKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50O1xuICAgIH0gLy8gcmVmbGVjdCBwb2ludFxuXG5cbiAgICB2YXIge1xuICAgICAgY3VycmVudDoge1xuICAgICAgICB4OiBjeCxcbiAgICAgICAgeTogY3lcbiAgICAgIH0sXG4gICAgICBjb250cm9sOiB7XG4gICAgICAgIHg6IG94LFxuICAgICAgICB5OiBveVxuICAgICAgfVxuICAgIH0gPSB0aGlzO1xuICAgIHZhciBwb2ludCA9IG5ldyBQb2ludCgyICogY3ggLSBveCwgMiAqIGN5IC0gb3kpO1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIG1ha2VBYnNvbHV0ZShwb2ludCkge1xuICAgIGlmICh0aGlzLmNvbW1hbmQucmVsYXRpdmUpIHtcbiAgICAgIHZhciB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSB0aGlzLmN1cnJlbnQ7XG4gICAgICBwb2ludC54ICs9IHg7XG4gICAgICBwb2ludC55ICs9IHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgYWRkTWFya2VyKHBvaW50LCBmcm9tLCBwcmlvclRvKSB7XG4gICAgdmFyIHtcbiAgICAgIHBvaW50cyxcbiAgICAgIGFuZ2xlc1xuICAgIH0gPSB0aGlzOyAvLyBpZiB0aGUgbGFzdCBhbmdsZSBpc24ndCBmaWxsZWQgaW4gYmVjYXVzZSB3ZSBkaWRuJ3QgaGF2ZSB0aGlzIHBvaW50IHlldCAuLi5cblxuICAgIGlmIChwcmlvclRvICYmIGFuZ2xlcy5sZW5ndGggPiAwICYmICFhbmdsZXNbYW5nbGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICBhbmdsZXNbYW5nbGVzLmxlbmd0aCAtIDFdID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS5hbmdsZVRvKHByaW9yVG8pO1xuICAgIH1cblxuICAgIHRoaXMuYWRkTWFya2VyQW5nbGUocG9pbnQsIGZyb20gPyBmcm9tLmFuZ2xlVG8ocG9pbnQpIDogbnVsbCk7XG4gIH1cblxuICBhZGRNYXJrZXJBbmdsZShwb2ludCwgYW5nbGUpIHtcbiAgICB0aGlzLnBvaW50cy5wdXNoKHBvaW50KTtcbiAgICB0aGlzLmFuZ2xlcy5wdXNoKGFuZ2xlKTtcbiAgfVxuXG4gIGdldE1hcmtlclBvaW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5wb2ludHM7XG4gIH1cblxuICBnZXRNYXJrZXJBbmdsZXMoKSB7XG4gICAgdmFyIHtcbiAgICAgIGFuZ2xlc1xuICAgIH0gPSB0aGlzO1xuICAgIHZhciBsZW4gPSBhbmdsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCFhbmdsZXNbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBpZiAoYW5nbGVzW2pdKSB7XG4gICAgICAgICAgICBhbmdsZXNbaV0gPSBhbmdsZXNbal07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYW5nbGVzO1xuICB9XG5cbn1cblxuY2xhc3MgUmVuZGVyZWRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5tb2RpZmllZEVtU2l6ZVN0YWNrID0gZmFsc2U7XG4gIH1cblxuICBjYWxjdWxhdGVPcGFjaXR5KCkge1xuICAgIHZhciBvcGFjaXR5ID0gMS4wOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMsIGNvbnNpc3RlbnQtdGhpc1xuXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvcGFjaXR5U3R5bGUgPSBlbGVtZW50LmdldFN0eWxlKCdvcGFjaXR5JywgZmFsc2UsIHRydWUpOyAvLyBubyBhbmNlc3RvcnMgb24gc3R5bGUgY2FsbFxuXG4gICAgICBpZiAob3BhY2l0eVN0eWxlLmhhc1ZhbHVlKHRydWUpKSB7XG4gICAgICAgIG9wYWNpdHkgKj0gb3BhY2l0eVN0eWxlLmdldE51bWJlcigpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wYWNpdHk7XG4gIH1cblxuICBzZXRDb250ZXh0KGN0eCkge1xuICAgIHZhciBmcm9tTWVhc3VyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICBpZiAoIWZyb21NZWFzdXJlKSB7XG4gICAgICAvLyBjYXVzZXMgc3RhY2sgb3ZlcmZsb3cgd2hlbiBtZWFzdXJpbmcgdGV4dCB3aXRoIGdyYWRpZW50c1xuICAgICAgLy8gZmlsbFxuICAgICAgdmFyIGZpbGxTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdmaWxsJyk7XG4gICAgICB2YXIgZmlsbE9wYWNpdHlTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdmaWxsLW9wYWNpdHknKTtcbiAgICAgIHZhciBzdHJva2VTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdzdHJva2UnKTtcbiAgICAgIHZhciBzdHJva2VPcGFjaXR5UHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ3N0cm9rZS1vcGFjaXR5Jyk7XG5cbiAgICAgIGlmIChmaWxsU3R5bGVQcm9wLmlzVXJsRGVmaW5pdGlvbigpKSB7XG4gICAgICAgIHZhciBmaWxsU3R5bGUgPSBmaWxsU3R5bGVQcm9wLmdldEZpbGxTdHlsZURlZmluaXRpb24odGhpcywgZmlsbE9wYWNpdHlTdHlsZVByb3ApO1xuXG4gICAgICAgIGlmIChmaWxsU3R5bGUpIHtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbFN0eWxlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpbGxTdHlsZVByb3AuaGFzVmFsdWUoKSkge1xuICAgICAgICBpZiAoZmlsbFN0eWxlUHJvcC5nZXRTdHJpbmcoKSA9PT0gJ2N1cnJlbnRDb2xvcicpIHtcbiAgICAgICAgICBmaWxsU3R5bGVQcm9wLnNldFZhbHVlKHRoaXMuZ2V0U3R5bGUoJ2NvbG9yJykuZ2V0Q29sb3IoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2ZpbGxTdHlsZSA9IGZpbGxTdHlsZVByb3AuZ2V0Q29sb3IoKTtcblxuICAgICAgICBpZiAoX2ZpbGxTdHlsZSAhPT0gJ2luaGVyaXQnKSB7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IF9maWxsU3R5bGUgPT09ICdub25lJyA/ICdyZ2JhKDAsMCwwLDApJyA6IF9maWxsU3R5bGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbGxPcGFjaXR5U3R5bGVQcm9wLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgdmFyIF9maWxsU3R5bGUyID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdmaWxsJywgY3R4LmZpbGxTdHlsZSkuYWRkT3BhY2l0eShmaWxsT3BhY2l0eVN0eWxlUHJvcCkuZ2V0Q29sb3IoKTtcblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gX2ZpbGxTdHlsZTI7XG4gICAgICB9IC8vIHN0cm9rZVxuXG5cbiAgICAgIGlmIChzdHJva2VTdHlsZVByb3AuaXNVcmxEZWZpbml0aW9uKCkpIHtcbiAgICAgICAgdmFyIHN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGVQcm9wLmdldEZpbGxTdHlsZURlZmluaXRpb24odGhpcywgc3Ryb2tlT3BhY2l0eVByb3ApO1xuXG4gICAgICAgIGlmIChzdHJva2VTdHlsZSkge1xuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cm9rZVN0eWxlUHJvcC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGlmIChzdHJva2VTdHlsZVByb3AuZ2V0U3RyaW5nKCkgPT09ICdjdXJyZW50Q29sb3InKSB7XG4gICAgICAgICAgc3Ryb2tlU3R5bGVQcm9wLnNldFZhbHVlKHRoaXMuZ2V0U3R5bGUoJ2NvbG9yJykuZ2V0Q29sb3IoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGVQcm9wLmdldFN0cmluZygpO1xuXG4gICAgICAgIGlmIChfc3Ryb2tlU3R5bGUgIT09ICdpbmhlcml0Jykge1xuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IF9zdHJva2VTdHlsZSA9PT0gJ25vbmUnID8gJ3JnYmEoMCwwLDAsMCknIDogX3N0cm9rZVN0eWxlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHJva2VPcGFjaXR5UHJvcC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIHZhciBfc3Ryb2tlU3R5bGUyID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdzdHJva2UnLCBjdHguc3Ryb2tlU3R5bGUpLmFkZE9wYWNpdHkoc3Ryb2tlT3BhY2l0eVByb3ApLmdldFN0cmluZygpO1xuXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IF9zdHJva2VTdHlsZTI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHJva2VXaWR0aFN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ3N0cm9rZS13aWR0aCcpO1xuXG4gICAgICBpZiAoc3Ryb2tlV2lkdGhTdHlsZVByb3AuaGFzVmFsdWUoKSkge1xuICAgICAgICB2YXIgbmV3TGluZVdpZHRoID0gc3Ryb2tlV2lkdGhTdHlsZVByb3AuZ2V0UGl4ZWxzKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAhbmV3TGluZVdpZHRoID8gUFNFVURPX1pFUk8gLy8gYnJvd3NlcnMgZG9uJ3QgcmVzcGVjdCAwIChvciBub2RlLWNhbnZhcz8gOi0pXG4gICAgICAgIDogbmV3TGluZVdpZHRoO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3Ryb2tlTGluZWNhcFN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ3N0cm9rZS1saW5lY2FwJyk7XG4gICAgICB2YXIgc3Ryb2tlTGluZWpvaW5TdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdzdHJva2UtbGluZWpvaW4nKTtcbiAgICAgIHZhciBzdHJva2VNaXRlcmxpbWl0UHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ3N0cm9rZS1taXRlcmxpbWl0Jyk7IC8vIE5FRUQgVEVTVFxuICAgICAgLy8gY29uc3QgcG9pbnRPcmRlclN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ3BhaW50LW9yZGVyJyk7XG5cbiAgICAgIHZhciBzdHJva2VEYXNoYXJyYXlTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdzdHJva2UtZGFzaGFycmF5Jyk7XG4gICAgICB2YXIgc3Ryb2tlRGFzaG9mZnNldFByb3AgPSB0aGlzLmdldFN0eWxlKCdzdHJva2UtZGFzaG9mZnNldCcpO1xuXG4gICAgICBpZiAoc3Ryb2tlTGluZWNhcFN0eWxlUHJvcC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGN0eC5saW5lQ2FwID0gc3Ryb2tlTGluZWNhcFN0eWxlUHJvcC5nZXRTdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0cm9rZUxpbmVqb2luU3R5bGVQcm9wLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gc3Ryb2tlTGluZWpvaW5TdHlsZVByb3AuZ2V0U3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHJva2VNaXRlcmxpbWl0UHJvcC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGN0eC5taXRlckxpbWl0ID0gc3Ryb2tlTWl0ZXJsaW1pdFByb3AuZ2V0TnVtYmVyKCk7XG4gICAgICB9IC8vIE5FRUQgVEVTVFxuICAgICAgLy8gaWYgKHBvaW50T3JkZXJTdHlsZVByb3AuaGFzVmFsdWUoKSkge1xuICAgICAgLy8gXHQvLyA/XG4gICAgICAvLyBcdGN0eC5wYWludE9yZGVyID0gcG9pbnRPcmRlclN0eWxlUHJvcC5nZXRWYWx1ZSgpO1xuICAgICAgLy8gfVxuXG5cbiAgICAgIGlmIChzdHJva2VEYXNoYXJyYXlTdHlsZVByb3AuaGFzVmFsdWUoKSAmJiBzdHJva2VEYXNoYXJyYXlTdHlsZVByb3AuZ2V0U3RyaW5nKCkgIT09ICdub25lJykge1xuICAgICAgICB2YXIgZ2FwcyA9IHRvTnVtYmVycyhzdHJva2VEYXNoYXJyYXlTdHlsZVByb3AuZ2V0U3RyaW5nKCkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY3R4LnNldExpbmVEYXNoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChnYXBzKTtcbiAgICAgICAgfSBlbHNlIC8vIEB0cy1leHBlY3QtZXJyb3IgSGFuZGxlIGJyb3dzZXIgcHJlZml4LlxuICAgICAgICAgIGlmICh0eXBlb2YgY3R4LndlYmtpdExpbmVEYXNoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBIYW5kbGUgYnJvd3NlciBwcmVmaXguXG4gICAgICAgICAgICBjdHgud2Via2l0TGluZURhc2ggPSBnYXBzO1xuICAgICAgICAgIH0gZWxzZSAvLyBAdHMtZXhwZWN0LWVycm9yIEhhbmRsZSBicm93c2VyIHByZWZpeC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3R4Lm1vekRhc2ggIT09ICd1bmRlZmluZWQnICYmICEoZ2Fwcy5sZW5ndGggPT09IDEgJiYgZ2Fwc1swXSA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBIYW5kbGUgYnJvd3NlciBwcmVmaXguXG4gICAgICAgICAgICAgIGN0eC5tb3pEYXNoID0gZ2FwcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gc3Ryb2tlRGFzaG9mZnNldFByb3AuZ2V0UGl4ZWxzKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjdHgubGluZURhc2hPZmZzZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2UgLy8gQHRzLWV4cGVjdC1lcnJvciBIYW5kbGUgYnJvd3NlciBwcmVmaXguXG4gICAgICAgICAgaWYgKHR5cGVvZiBjdHgud2Via2l0TGluZURhc2hPZmZzZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEhhbmRsZSBicm93c2VyIHByZWZpeC5cbiAgICAgICAgICAgIGN0eC53ZWJraXRMaW5lRGFzaE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICB9IGVsc2UgLy8gQHRzLWV4cGVjdC1lcnJvciBIYW5kbGUgYnJvd3NlciBwcmVmaXguXG4gICAgICAgICAgICBpZiAodHlwZW9mIGN0eC5tb3pEYXNoT2Zmc2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEhhbmRsZSBicm93c2VyIHByZWZpeC5cbiAgICAgICAgICAgICAgY3R4Lm1vekRhc2hPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBmb250XG5cblxuICAgIHRoaXMubW9kaWZpZWRFbVNpemVTdGFjayA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiBjdHguZm9udCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBmb250U3R5bGVQcm9wID0gdGhpcy5nZXRTdHlsZSgnZm9udCcpO1xuICAgICAgdmFyIGZvbnRTdHlsZVN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ2ZvbnQtc3R5bGUnKTtcbiAgICAgIHZhciBmb250VmFyaWFudFN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ2ZvbnQtdmFyaWFudCcpO1xuICAgICAgdmFyIGZvbnRXZWlnaHRTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdmb250LXdlaWdodCcpO1xuICAgICAgdmFyIGZvbnRTaXplU3R5bGVQcm9wID0gdGhpcy5nZXRTdHlsZSgnZm9udC1zaXplJyk7XG4gICAgICB2YXIgZm9udEZhbWlseVN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgICB2YXIgZm9udCA9IG5ldyBGb250KGZvbnRTdHlsZVN0eWxlUHJvcC5nZXRTdHJpbmcoKSwgZm9udFZhcmlhbnRTdHlsZVByb3AuZ2V0U3RyaW5nKCksIGZvbnRXZWlnaHRTdHlsZVByb3AuZ2V0U3RyaW5nKCksIGZvbnRTaXplU3R5bGVQcm9wLmhhc1ZhbHVlKCkgPyBcIlwiLmNvbmNhdChmb250U2l6ZVN0eWxlUHJvcC5nZXRQaXhlbHModHJ1ZSksIFwicHhcIikgOiAnJywgZm9udEZhbWlseVN0eWxlUHJvcC5nZXRTdHJpbmcoKSwgRm9udC5wYXJzZShmb250U3R5bGVQcm9wLmdldFN0cmluZygpLCBjdHguZm9udCkpO1xuICAgICAgZm9udFN0eWxlU3R5bGVQcm9wLnNldFZhbHVlKGZvbnQuZm9udFN0eWxlKTtcbiAgICAgIGZvbnRWYXJpYW50U3R5bGVQcm9wLnNldFZhbHVlKGZvbnQuZm9udFZhcmlhbnQpO1xuICAgICAgZm9udFdlaWdodFN0eWxlUHJvcC5zZXRWYWx1ZShmb250LmZvbnRXZWlnaHQpO1xuICAgICAgZm9udFNpemVTdHlsZVByb3Auc2V0VmFsdWUoZm9udC5mb250U2l6ZSk7XG4gICAgICBmb250RmFtaWx5U3R5bGVQcm9wLnNldFZhbHVlKGZvbnQuZm9udEZhbWlseSk7XG4gICAgICBjdHguZm9udCA9IGZvbnQudG9TdHJpbmcoKTtcblxuICAgICAgaWYgKGZvbnRTaXplU3R5bGVQcm9wLmlzUGl4ZWxzKCkpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudC5lbVNpemUgPSBmb250U2l6ZVN0eWxlUHJvcC5nZXRQaXhlbHMoKTtcbiAgICAgICAgdGhpcy5tb2RpZmllZEVtU2l6ZVN0YWNrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZyb21NZWFzdXJlKSB7XG4gICAgICAvLyBlZmZlY3RzXG4gICAgICB0aGlzLmFwcGx5RWZmZWN0cyhjdHgpOyAvLyBvcGFjaXR5XG5cbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY2FsY3VsYXRlT3BhY2l0eSgpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyQ29udGV4dChjdHgpIHtcbiAgICBzdXBlci5jbGVhckNvbnRleHQoY3R4KTtcblxuICAgIGlmICh0aGlzLm1vZGlmaWVkRW1TaXplU3RhY2spIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQucG9wRW1TaXplKCk7XG4gICAgfVxuICB9XG5cbn1cblxuY2xhc3MgUGF0aEVsZW1lbnQgZXh0ZW5kcyBSZW5kZXJlZEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcykge1xuICAgIHN1cGVyKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKTtcbiAgICB0aGlzLnR5cGUgPSAncGF0aCc7XG4gICAgdGhpcy5wYXRoUGFyc2VyID0gbnVsbDtcbiAgICB0aGlzLnBhdGhQYXJzZXIgPSBuZXcgUGF0aFBhcnNlcih0aGlzLmdldEF0dHJpYnV0ZSgnZCcpLmdldFN0cmluZygpKTtcbiAgfVxuXG4gIHBhdGgoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgYm91bmRpbmdCb3ggPSBuZXcgQm91bmRpbmdCb3goKTtcbiAgICBwYXRoUGFyc2VyLnJlc2V0KCk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKCFwYXRoUGFyc2VyLmlzRW5kKCkpIHtcbiAgICAgIHN3aXRjaCAocGF0aFBhcnNlci5uZXh0KCkudHlwZSkge1xuICAgICAgICBjYXNlIFBhdGhQYXJzZXIuTU9WRV9UTzpcbiAgICAgICAgICB0aGlzLnBhdGhNKGN0eCwgYm91bmRpbmdCb3gpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5MSU5FX1RPOlxuICAgICAgICAgIHRoaXMucGF0aEwoY3R4LCBib3VuZGluZ0JveCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkhPUklaX0xJTkVfVE86XG4gICAgICAgICAgdGhpcy5wYXRoSChjdHgsIGJvdW5kaW5nQm94KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhdGhQYXJzZXIuVkVSVF9MSU5FX1RPOlxuICAgICAgICAgIHRoaXMucGF0aFYoY3R4LCBib3VuZGluZ0JveCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkNVUlZFX1RPOlxuICAgICAgICAgIHRoaXMucGF0aEMoY3R4LCBib3VuZGluZ0JveCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLlNNT09USF9DVVJWRV9UTzpcbiAgICAgICAgICB0aGlzLnBhdGhTKGN0eCwgYm91bmRpbmdCb3gpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5RVUFEX1RPOlxuICAgICAgICAgIHRoaXMucGF0aFEoY3R4LCBib3VuZGluZ0JveCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLlNNT09USF9RVUFEX1RPOlxuICAgICAgICAgIHRoaXMucGF0aFQoY3R4LCBib3VuZGluZ0JveCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkFSQzpcbiAgICAgICAgICB0aGlzLnBhdGhBKGN0eCwgYm91bmRpbmdCb3gpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5DTE9TRV9QQVRIOlxuICAgICAgICAgIHRoaXMucGF0aFooY3R4LCBib3VuZGluZ0JveCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kaW5nQm94O1xuICB9XG5cbiAgZ2V0Qm91bmRpbmdCb3goXykge1xuICAgIHJldHVybiB0aGlzLnBhdGgoKTtcbiAgfVxuXG4gIGdldE1hcmtlcnMoKSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgcG9pbnRzID0gcGF0aFBhcnNlci5nZXRNYXJrZXJQb2ludHMoKTtcbiAgICB2YXIgYW5nbGVzID0gcGF0aFBhcnNlci5nZXRNYXJrZXJBbmdsZXMoKTtcbiAgICB2YXIgbWFya2VycyA9IHBvaW50cy5tYXAoKHBvaW50LCBpKSA9PiBbcG9pbnQsIGFuZ2xlc1tpXV0pO1xuICAgIHJldHVybiBtYXJrZXJzO1xuICB9XG5cbiAgcmVuZGVyQ2hpbGRyZW4oY3R4KSB7XG4gICAgdGhpcy5wYXRoKGN0eCk7XG4gICAgdGhpcy5kb2N1bWVudC5zY3JlZW4ubW91c2UuY2hlY2tQYXRoKHRoaXMsIGN0eCk7XG4gICAgdmFyIGZpbGxSdWxlU3R5bGVQcm9wID0gdGhpcy5nZXRTdHlsZSgnZmlsbC1ydWxlJyk7XG5cbiAgICBpZiAoY3R4LmZpbGxTdHlsZSAhPT0gJycpIHtcbiAgICAgIGlmIChmaWxsUnVsZVN0eWxlUHJvcC5nZXRTdHJpbmcoJ2luaGVyaXQnKSAhPT0gJ2luaGVyaXQnKSB7XG4gICAgICAgIGN0eC5maWxsKGZpbGxSdWxlU3R5bGVQcm9wLmdldFN0cmluZygpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGN0eC5zdHJva2VTdHlsZSAhPT0gJycpIHtcbiAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgndmVjdG9yLWVmZmVjdCcpLmdldFN0cmluZygpID09PSAnbm9uLXNjYWxpbmctc3Ryb2tlJykge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1hcmtlcnMgPSB0aGlzLmdldE1hcmtlcnMoKTtcblxuICAgIGlmIChtYXJrZXJzKSB7XG4gICAgICB2YXIgbWFya2Vyc0xhc3RJbmRleCA9IG1hcmtlcnMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBtYXJrZXJTdGFydFN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ21hcmtlci1zdGFydCcpO1xuICAgICAgdmFyIG1hcmtlck1pZFN0eWxlUHJvcCA9IHRoaXMuZ2V0U3R5bGUoJ21hcmtlci1taWQnKTtcbiAgICAgIHZhciBtYXJrZXJFbmRTdHlsZVByb3AgPSB0aGlzLmdldFN0eWxlKCdtYXJrZXItZW5kJyk7XG5cbiAgICAgIGlmIChtYXJrZXJTdGFydFN0eWxlUHJvcC5pc1VybERlZmluaXRpb24oKSkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyU3RhcnRTdHlsZVByb3AuZ2V0RGVmaW5pdGlvbigpO1xuICAgICAgICB2YXIgW3BvaW50LCBhbmdsZV0gPSBtYXJrZXJzWzBdO1xuICAgICAgICBtYXJrZXIucmVuZGVyKGN0eCwgcG9pbnQsIGFuZ2xlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hcmtlck1pZFN0eWxlUHJvcC5pc1VybERlZmluaXRpb24oKSkge1xuICAgICAgICB2YXIgX21hcmtlciA9IG1hcmtlck1pZFN0eWxlUHJvcC5nZXREZWZpbml0aW9uKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXJrZXJzTGFzdEluZGV4OyBpKyspIHtcbiAgICAgICAgICB2YXIgW19wb2ludCwgX2FuZ2xlXSA9IG1hcmtlcnNbaV07XG5cbiAgICAgICAgICBfbWFya2VyLnJlbmRlcihjdHgsIF9wb2ludCwgX2FuZ2xlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWFya2VyRW5kU3R5bGVQcm9wLmlzVXJsRGVmaW5pdGlvbigpKSB7XG4gICAgICAgIHZhciBfbWFya2VyMiA9IG1hcmtlckVuZFN0eWxlUHJvcC5nZXREZWZpbml0aW9uKCk7XG5cbiAgICAgICAgdmFyIFtfcG9pbnQyLCBfYW5nbGUyXSA9IG1hcmtlcnNbbWFya2Vyc0xhc3RJbmRleF07XG5cbiAgICAgICAgX21hcmtlcjIucmVuZGVyKGN0eCwgX3BvaW50MiwgX2FuZ2xlMik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBhdGhNKHBhdGhQYXJzZXIpIHtcbiAgICB2YXIgcG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ3VycmVudFBvaW50KCk7XG4gICAgcGF0aFBhcnNlci5zdGFydCA9IHBhdGhQYXJzZXIuY3VycmVudDtcbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnRcbiAgICB9O1xuICB9XG5cbiAgcGF0aE0oY3R4LCBib3VuZGluZ0JveCkge1xuICAgIHZhciB7XG4gICAgICBwYXRoUGFyc2VyXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHtcbiAgICAgIHBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhNKHBhdGhQYXJzZXIpO1xuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSBwb2ludDtcbiAgICBwYXRoUGFyc2VyLmFkZE1hcmtlcihwb2ludCk7XG4gICAgYm91bmRpbmdCb3guYWRkUG9pbnQoeCwgeSk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwYXRoTChwYXRoUGFyc2VyKSB7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnRcbiAgICB9ID0gcGF0aFBhcnNlcjtcbiAgICB2YXIgcG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ3VycmVudFBvaW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH1cblxuICBwYXRoTChjdHgsIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgY3VycmVudCxcbiAgICAgIHBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhMKHBhdGhQYXJzZXIpO1xuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSBwb2ludDtcbiAgICBwYXRoUGFyc2VyLmFkZE1hcmtlcihwb2ludCwgY3VycmVudCk7XG4gICAgYm91bmRpbmdCb3guYWRkUG9pbnQoeCwgeSk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwYXRoSChwYXRoUGFyc2VyKSB7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBjb21tYW5kXG4gICAgfSA9IHBhdGhQYXJzZXI7XG4gICAgdmFyIHBvaW50ID0gbmV3IFBvaW50KChjb21tYW5kLnJlbGF0aXZlID8gY3VycmVudC54IDogMCkgKyBjb21tYW5kLngsIGN1cnJlbnQueSk7XG4gICAgcGF0aFBhcnNlci5jdXJyZW50ID0gcG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH1cblxuICBwYXRoSChjdHgsIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgY3VycmVudCxcbiAgICAgIHBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhIKHBhdGhQYXJzZXIpO1xuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSBwb2ludDtcbiAgICBwYXRoUGFyc2VyLmFkZE1hcmtlcihwb2ludCwgY3VycmVudCk7XG4gICAgYm91bmRpbmdCb3guYWRkUG9pbnQoeCwgeSk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwYXRoVihwYXRoUGFyc2VyKSB7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBjb21tYW5kXG4gICAgfSA9IHBhdGhQYXJzZXI7XG4gICAgdmFyIHBvaW50ID0gbmV3IFBvaW50KGN1cnJlbnQueCwgKGNvbW1hbmQucmVsYXRpdmUgPyBjdXJyZW50LnkgOiAwKSArIGNvbW1hbmQueSk7XG4gICAgcGF0aFBhcnNlci5jdXJyZW50ID0gcG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH1cblxuICBwYXRoVihjdHgsIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgY3VycmVudCxcbiAgICAgIHBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhWKHBhdGhQYXJzZXIpO1xuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSBwb2ludDtcbiAgICBwYXRoUGFyc2VyLmFkZE1hcmtlcihwb2ludCwgY3VycmVudCk7XG4gICAgYm91bmRpbmdCb3guYWRkUG9pbnQoeCwgeSk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwYXRoQyhwYXRoUGFyc2VyKSB7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnRcbiAgICB9ID0gcGF0aFBhcnNlcjtcbiAgICB2YXIgcG9pbnQgPSBwYXRoUGFyc2VyLmdldFBvaW50KCd4MScsICd5MScpO1xuICAgIHZhciBjb250cm9sUG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ29udHJvbFBvaW50KCd4MicsICd5MicpO1xuICAgIHZhciBjdXJyZW50UG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ3VycmVudFBvaW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBwb2ludCxcbiAgICAgIGNvbnRyb2xQb2ludCxcbiAgICAgIGN1cnJlbnRQb2ludFxuICAgIH07XG4gIH1cblxuICBwYXRoQyhjdHgsIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgY3VycmVudCxcbiAgICAgIHBvaW50LFxuICAgICAgY29udHJvbFBvaW50LFxuICAgICAgY3VycmVudFBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhDKHBhdGhQYXJzZXIpO1xuICAgIHBhdGhQYXJzZXIuYWRkTWFya2VyKGN1cnJlbnRQb2ludCwgY29udHJvbFBvaW50LCBwb2ludCk7XG4gICAgYm91bmRpbmdCb3guYWRkQmV6aWVyQ3VydmUoY3VycmVudC54LCBjdXJyZW50LnksIHBvaW50LngsIHBvaW50LnksIGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHBvaW50LngsIHBvaW50LnksIGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcGF0aFMocGF0aFBhcnNlcikge1xuICAgIHZhciB7XG4gICAgICBjdXJyZW50XG4gICAgfSA9IHBhdGhQYXJzZXI7XG4gICAgdmFyIHBvaW50ID0gcGF0aFBhcnNlci5nZXRSZWZsZWN0ZWRDb250cm9sUG9pbnQoKTtcbiAgICB2YXIgY29udHJvbFBvaW50ID0gcGF0aFBhcnNlci5nZXRBc0NvbnRyb2xQb2ludCgneDInLCAneTInKTtcbiAgICB2YXIgY3VycmVudFBvaW50ID0gcGF0aFBhcnNlci5nZXRBc0N1cnJlbnRQb2ludCgpO1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50LFxuICAgICAgcG9pbnQsXG4gICAgICBjb250cm9sUG9pbnQsXG4gICAgICBjdXJyZW50UG9pbnRcbiAgICB9O1xuICB9XG5cbiAgcGF0aFMoY3R4LCBib3VuZGluZ0JveCkge1xuICAgIHZhciB7XG4gICAgICBwYXRoUGFyc2VyXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBwb2ludCxcbiAgICAgIGNvbnRyb2xQb2ludCxcbiAgICAgIGN1cnJlbnRQb2ludFxuICAgIH0gPSBQYXRoRWxlbWVudC5wYXRoUyhwYXRoUGFyc2VyKTtcbiAgICBwYXRoUGFyc2VyLmFkZE1hcmtlcihjdXJyZW50UG9pbnQsIGNvbnRyb2xQb2ludCwgcG9pbnQpO1xuICAgIGJvdW5kaW5nQm94LmFkZEJlemllckN1cnZlKGN1cnJlbnQueCwgY3VycmVudC55LCBwb2ludC54LCBwb2ludC55LCBjb250cm9sUG9pbnQueCwgY29udHJvbFBvaW50LnksIGN1cnJlbnRQb2ludC54LCBjdXJyZW50UG9pbnQueSk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHguYmV6aWVyQ3VydmVUbyhwb2ludC54LCBwb2ludC55LCBjb250cm9sUG9pbnQueCwgY29udHJvbFBvaW50LnksIGN1cnJlbnRQb2ludC54LCBjdXJyZW50UG9pbnQueSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBhdGhRKHBhdGhQYXJzZXIpIHtcbiAgICB2YXIge1xuICAgICAgY3VycmVudFxuICAgIH0gPSBwYXRoUGFyc2VyO1xuICAgIHZhciBjb250cm9sUG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ29udHJvbFBvaW50KCd4MScsICd5MScpO1xuICAgIHZhciBjdXJyZW50UG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ3VycmVudFBvaW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBjb250cm9sUG9pbnQsXG4gICAgICBjdXJyZW50UG9pbnRcbiAgICB9O1xuICB9XG5cbiAgcGF0aFEoY3R4LCBib3VuZGluZ0JveCkge1xuICAgIHZhciB7XG4gICAgICBwYXRoUGFyc2VyXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBjb250cm9sUG9pbnQsXG4gICAgICBjdXJyZW50UG9pbnRcbiAgICB9ID0gUGF0aEVsZW1lbnQucGF0aFEocGF0aFBhcnNlcik7XG4gICAgcGF0aFBhcnNlci5hZGRNYXJrZXIoY3VycmVudFBvaW50LCBjb250cm9sUG9pbnQsIGNvbnRyb2xQb2ludCk7XG4gICAgYm91bmRpbmdCb3guYWRkUXVhZHJhdGljQ3VydmUoY3VycmVudC54LCBjdXJyZW50LnksIGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcGF0aFQocGF0aFBhcnNlcikge1xuICAgIHZhciB7XG4gICAgICBjdXJyZW50XG4gICAgfSA9IHBhdGhQYXJzZXI7XG4gICAgdmFyIGNvbnRyb2xQb2ludCA9IHBhdGhQYXJzZXIuZ2V0UmVmbGVjdGVkQ29udHJvbFBvaW50KCk7XG4gICAgcGF0aFBhcnNlci5jb250cm9sID0gY29udHJvbFBvaW50O1xuICAgIHZhciBjdXJyZW50UG9pbnQgPSBwYXRoUGFyc2VyLmdldEFzQ3VycmVudFBvaW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBjb250cm9sUG9pbnQsXG4gICAgICBjdXJyZW50UG9pbnRcbiAgICB9O1xuICB9XG5cbiAgcGF0aFQoY3R4LCBib3VuZGluZ0JveCkge1xuICAgIHZhciB7XG4gICAgICBwYXRoUGFyc2VyXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBjb250cm9sUG9pbnQsXG4gICAgICBjdXJyZW50UG9pbnRcbiAgICB9ID0gUGF0aEVsZW1lbnQucGF0aFQocGF0aFBhcnNlcik7XG4gICAgcGF0aFBhcnNlci5hZGRNYXJrZXIoY3VycmVudFBvaW50LCBjb250cm9sUG9pbnQsIGNvbnRyb2xQb2ludCk7XG4gICAgYm91bmRpbmdCb3guYWRkUXVhZHJhdGljQ3VydmUoY3VycmVudC54LCBjdXJyZW50LnksIGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcGF0aEEocGF0aFBhcnNlcikge1xuICAgIHZhciB7XG4gICAgICBjdXJyZW50LFxuICAgICAgY29tbWFuZFxuICAgIH0gPSBwYXRoUGFyc2VyO1xuICAgIHZhciB7XG4gICAgICByWCxcbiAgICAgIHJZLFxuICAgICAgeFJvdCxcbiAgICAgIGxBcmNGbGFnLFxuICAgICAgc3dlZXBGbGFnXG4gICAgfSA9IGNvbW1hbmQ7XG4gICAgdmFyIHhBeGlzUm90YXRpb24gPSB4Um90ICogKE1hdGguUEkgLyAxODAuMCk7XG4gICAgdmFyIGN1cnJlbnRQb2ludCA9IHBhdGhQYXJzZXIuZ2V0QXNDdXJyZW50UG9pbnQoKTsgLy8gQ29udmVyc2lvbiBmcm9tIGVuZHBvaW50IHRvIGNlbnRlciBwYXJhbWV0ZXJpemF0aW9uXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvaW1wbG5vdGUuaHRtbCNBcmNJbXBsZW1lbnRhdGlvbk5vdGVzXG4gICAgLy8geDEnLCB5MSdcblxuICAgIHZhciBjdXJycCA9IG5ldyBQb2ludChNYXRoLmNvcyh4QXhpc1JvdGF0aW9uKSAqIChjdXJyZW50LnggLSBjdXJyZW50UG9pbnQueCkgLyAyLjAgKyBNYXRoLnNpbih4QXhpc1JvdGF0aW9uKSAqIChjdXJyZW50LnkgLSBjdXJyZW50UG9pbnQueSkgLyAyLjAsIC1NYXRoLnNpbih4QXhpc1JvdGF0aW9uKSAqIChjdXJyZW50LnggLSBjdXJyZW50UG9pbnQueCkgLyAyLjAgKyBNYXRoLmNvcyh4QXhpc1JvdGF0aW9uKSAqIChjdXJyZW50LnkgLSBjdXJyZW50UG9pbnQueSkgLyAyLjApOyAvLyBhZGp1c3QgcmFkaWlcblxuICAgIHZhciBsID0gTWF0aC5wb3coY3VycnAueCwgMikgLyBNYXRoLnBvdyhyWCwgMikgKyBNYXRoLnBvdyhjdXJycC55LCAyKSAvIE1hdGgucG93KHJZLCAyKTtcblxuICAgIGlmIChsID4gMSkge1xuICAgICAgclggKj0gTWF0aC5zcXJ0KGwpO1xuICAgICAgclkgKj0gTWF0aC5zcXJ0KGwpO1xuICAgIH0gLy8gY3gnLCBjeSdcblxuXG4gICAgdmFyIHMgPSAobEFyY0ZsYWcgPT09IHN3ZWVwRmxhZyA/IC0xIDogMSkgKiBNYXRoLnNxcnQoKE1hdGgucG93KHJYLCAyKSAqIE1hdGgucG93KHJZLCAyKSAtIE1hdGgucG93KHJYLCAyKSAqIE1hdGgucG93KGN1cnJwLnksIDIpIC0gTWF0aC5wb3coclksIDIpICogTWF0aC5wb3coY3VycnAueCwgMikpIC8gKE1hdGgucG93KHJYLCAyKSAqIE1hdGgucG93KGN1cnJwLnksIDIpICsgTWF0aC5wb3coclksIDIpICogTWF0aC5wb3coY3VycnAueCwgMikpKTtcblxuICAgIGlmIChpc05hTihzKSkge1xuICAgICAgcyA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNwcCA9IG5ldyBQb2ludChzICogclggKiBjdXJycC55IC8gclksIHMgKiAtclkgKiBjdXJycC54IC8gclgpOyAvLyBjeCwgY3lcblxuICAgIHZhciBjZW50cCA9IG5ldyBQb2ludCgoY3VycmVudC54ICsgY3VycmVudFBvaW50LngpIC8gMi4wICsgTWF0aC5jb3MoeEF4aXNSb3RhdGlvbikgKiBjcHAueCAtIE1hdGguc2luKHhBeGlzUm90YXRpb24pICogY3BwLnksIChjdXJyZW50LnkgKyBjdXJyZW50UG9pbnQueSkgLyAyLjAgKyBNYXRoLnNpbih4QXhpc1JvdGF0aW9uKSAqIGNwcC54ICsgTWF0aC5jb3MoeEF4aXNSb3RhdGlvbikgKiBjcHAueSk7IC8vIGluaXRpYWwgYW5nbGVcblxuICAgIHZhciBhMSA9IHZlY3RvcnNBbmdsZShbMSwgMF0sIFsoY3VycnAueCAtIGNwcC54KSAvIHJYLCAoY3VycnAueSAtIGNwcC55KSAvIHJZXSk7IC8vIM64MVxuICAgIC8vIGFuZ2xlIGRlbHRhXG5cbiAgICB2YXIgdSA9IFsoY3VycnAueCAtIGNwcC54KSAvIHJYLCAoY3VycnAueSAtIGNwcC55KSAvIHJZXTtcbiAgICB2YXIgdiA9IFsoLWN1cnJwLnggLSBjcHAueCkgLyByWCwgKC1jdXJycC55IC0gY3BwLnkpIC8gclldO1xuICAgIHZhciBhZCA9IHZlY3RvcnNBbmdsZSh1LCB2KTsgLy8gzpTOuFxuXG4gICAgaWYgKHZlY3RvcnNSYXRpbyh1LCB2KSA8PSAtMSkge1xuICAgICAgYWQgPSBNYXRoLlBJO1xuICAgIH1cblxuICAgIGlmICh2ZWN0b3JzUmF0aW8odSwgdikgPj0gMSkge1xuICAgICAgYWQgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50UG9pbnQsXG4gICAgICByWCxcbiAgICAgIHJZLFxuICAgICAgc3dlZXBGbGFnLFxuICAgICAgeEF4aXNSb3RhdGlvbixcbiAgICAgIGNlbnRwLFxuICAgICAgYTEsXG4gICAgICBhZFxuICAgIH07XG4gIH1cblxuICBwYXRoQShjdHgsIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgY3VycmVudFBvaW50LFxuICAgICAgclgsXG4gICAgICByWSxcbiAgICAgIHN3ZWVwRmxhZyxcbiAgICAgIHhBeGlzUm90YXRpb24sXG4gICAgICBjZW50cCxcbiAgICAgIGExLFxuICAgICAgYWRcbiAgICB9ID0gUGF0aEVsZW1lbnQucGF0aEEocGF0aFBhcnNlcik7IC8vIGZvciBtYXJrZXJzXG5cbiAgICB2YXIgZGlyID0gMSAtIHN3ZWVwRmxhZyA/IDEuMCA6IC0xLjA7XG4gICAgdmFyIGFoID0gYTEgKyBkaXIgKiAoYWQgLyAyLjApO1xuICAgIHZhciBoYWxmV2F5ID0gbmV3IFBvaW50KGNlbnRwLnggKyByWCAqIE1hdGguY29zKGFoKSwgY2VudHAueSArIHJZICogTWF0aC5zaW4oYWgpKTtcbiAgICBwYXRoUGFyc2VyLmFkZE1hcmtlckFuZ2xlKGhhbGZXYXksIGFoIC0gZGlyICogTWF0aC5QSSAvIDIpO1xuICAgIHBhdGhQYXJzZXIuYWRkTWFya2VyQW5nbGUoY3VycmVudFBvaW50LCBhaCAtIGRpciAqIE1hdGguUEkpO1xuICAgIGJvdW5kaW5nQm94LmFkZFBvaW50KGN1cnJlbnRQb2ludC54LCBjdXJyZW50UG9pbnQueSk7IC8vIFRPRE86IHRoaXMgaXMgdG9vIG5haXZlLCBtYWtlIGl0IGJldHRlclxuXG4gICAgaWYgKGN0eCAmJiAhaXNOYU4oYTEpICYmICFpc05hTihhZCkpIHtcbiAgICAgIHZhciByID0gclggPiByWSA/IHJYIDogclk7XG4gICAgICB2YXIgc3ggPSByWCA+IHJZID8gMSA6IHJYIC8gclk7XG4gICAgICB2YXIgc3kgPSByWCA+IHJZID8gclkgLyByWCA6IDE7XG4gICAgICBjdHgudHJhbnNsYXRlKGNlbnRwLngsIGNlbnRwLnkpO1xuICAgICAgY3R4LnJvdGF0ZSh4QXhpc1JvdGF0aW9uKTtcbiAgICAgIGN0eC5zY2FsZShzeCwgc3kpO1xuICAgICAgY3R4LmFyYygwLCAwLCByLCBhMSwgYTEgKyBhZCwgQm9vbGVhbigxIC0gc3dlZXBGbGFnKSk7XG4gICAgICBjdHguc2NhbGUoMSAvIHN4LCAxIC8gc3kpO1xuICAgICAgY3R4LnJvdGF0ZSgteEF4aXNSb3RhdGlvbik7XG4gICAgICBjdHgudHJhbnNsYXRlKC1jZW50cC54LCAtY2VudHAueSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBhdGhaKHBhdGhQYXJzZXIpIHtcbiAgICBwYXRoUGFyc2VyLmN1cnJlbnQgPSBwYXRoUGFyc2VyLnN0YXJ0O1xuICB9XG5cbiAgcGF0aFooY3R4LCBib3VuZGluZ0JveCkge1xuICAgIFBhdGhFbGVtZW50LnBhdGhaKHRoaXMucGF0aFBhcnNlcik7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICAvLyBvbmx5IGNsb3NlIHBhdGggaWYgaXQgaXMgbm90IGEgc3RyYWlnaHQgbGluZVxuICAgICAgaWYgKGJvdW5kaW5nQm94LngxICE9PSBib3VuZGluZ0JveC54MiAmJiBib3VuZGluZ0JveC55MSAhPT0gYm91bmRpbmdCb3gueTIpIHtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbmNsYXNzIEdseXBoRWxlbWVudCBleHRlbmRzIFBhdGhFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ2dseXBoJztcbiAgICB0aGlzLmhvcml6QWR2WCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdob3Jpei1hZHYteCcpLmdldE51bWJlcigpO1xuICAgIHRoaXMudW5pY29kZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd1bmljb2RlJykuZ2V0U3RyaW5nKCk7XG4gICAgdGhpcy5hcmFiaWNGb3JtID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyYWJpYy1mb3JtJykuZ2V0U3RyaW5nKCk7XG4gIH1cblxufVxuXG5jbGFzcyBUZXh0RWxlbWVudCBleHRlbmRzIFJlbmRlcmVkRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIG5ldy50YXJnZXQgPT09IFRleHRFbGVtZW50ID8gdHJ1ZSA6IGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICd0ZXh0JztcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy5tZWFzdXJlQ2FjaGUgPSAtMTtcbiAgfVxuXG4gIHNldENvbnRleHQoY3R4KSB7XG4gICAgdmFyIGZyb21NZWFzdXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICBzdXBlci5zZXRDb250ZXh0KGN0eCwgZnJvbU1lYXN1cmUpO1xuICAgIHZhciB0ZXh0QmFzZWxpbmUgPSB0aGlzLmdldFN0eWxlKCdkb21pbmFudC1iYXNlbGluZScpLmdldFRleHRCYXNlbGluZSgpIHx8IHRoaXMuZ2V0U3R5bGUoJ2FsaWdubWVudC1iYXNlbGluZScpLmdldFRleHRCYXNlbGluZSgpO1xuXG4gICAgaWYgKHRleHRCYXNlbGluZSkge1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9IHRleHRCYXNlbGluZTtcbiAgICB9XG4gIH1cblxuICBpbml0aWFsaXplQ29vcmRpbmF0ZXMoY3R4KSB7XG4gICAgdGhpcy54ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3gnKS5nZXRQaXhlbHMoJ3gnKTtcbiAgICB0aGlzLnkgPSB0aGlzLmdldEF0dHJpYnV0ZSgneScpLmdldFBpeGVscygneScpO1xuICAgIHZhciBkeEF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZHgnKTtcbiAgICB2YXIgZHlBdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2R5Jyk7XG5cbiAgICBpZiAoZHhBdHRyLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHRoaXMueCArPSBkeEF0dHIuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgfVxuXG4gICAgaWYgKGR5QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLnkgKz0gZHlBdHRyLmdldFBpeGVscygneScpO1xuICAgIH1cblxuICAgIHRoaXMueCArPSB0aGlzLmdldEFuY2hvckRlbHRhKGN0eCwgdGhpcywgMCk7XG4gIH1cblxuICBnZXRCb3VuZGluZ0JveChjdHgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAndGV4dCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRFbGVtZW50Qm91bmRpbmdCb3goY3R4KTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVDb29yZGluYXRlcyhjdHgpO1xuICAgIHZhciBib3VuZGluZ0JveCA9IG51bGw7XG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChfLCBpKSA9PiB7XG4gICAgICB2YXIgY2hpbGRCb3VuZGluZ0JveCA9IHRoaXMuZ2V0Q2hpbGRCb3VuZGluZ0JveChjdHgsIHRoaXMsIHRoaXMsIGkpO1xuXG4gICAgICBpZiAoIWJvdW5kaW5nQm94KSB7XG4gICAgICAgIGJvdW5kaW5nQm94ID0gY2hpbGRCb3VuZGluZ0JveDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvdW5kaW5nQm94LmFkZEJvdW5kaW5nQm94KGNoaWxkQm91bmRpbmdCb3gpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBib3VuZGluZ0JveDtcbiAgfVxuXG4gIGdldEZvbnRTaXplKCkge1xuICAgIHZhciB7XG4gICAgICBkb2N1bWVudCxcbiAgICAgIHBhcmVudFxuICAgIH0gPSB0aGlzO1xuICAgIHZhciBpbmhlcml0Rm9udFNpemUgPSBGb250LnBhcnNlKGRvY3VtZW50LmN0eC5mb250KS5mb250U2l6ZTtcbiAgICB2YXIgZm9udFNpemUgPSBwYXJlbnQuZ2V0U3R5bGUoJ2ZvbnQtc2l6ZScpLmdldE51bWJlcihpbmhlcml0Rm9udFNpemUpO1xuICAgIHJldHVybiBmb250U2l6ZTtcbiAgfVxuXG4gIGdldFRFbGVtZW50Qm91bmRpbmdCb3goY3R4KSB7XG4gICAgdmFyIGZvbnRTaXplID0gdGhpcy5nZXRGb250U2l6ZSgpO1xuICAgIHJldHVybiBuZXcgQm91bmRpbmdCb3godGhpcy54LCB0aGlzLnkgLSBmb250U2l6ZSwgdGhpcy54ICsgdGhpcy5tZWFzdXJlVGV4dChjdHgpLCB0aGlzLnkpO1xuICB9XG5cbiAgZ2V0R2x5cGgoZm9udCwgdGV4dCwgaSkge1xuICAgIHZhciBjaGFyID0gdGV4dFtpXTtcbiAgICB2YXIgZ2x5cGggPSBudWxsO1xuXG4gICAgaWYgKGZvbnQuaXNBcmFiaWMpIHtcbiAgICAgIHZhciBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgICAgIHZhciBwcmV2Q2hhciA9IHRleHRbaSAtIDFdO1xuICAgICAgdmFyIG5leHRDaGFyID0gdGV4dFtpICsgMV07XG4gICAgICB2YXIgYXJhYmljRm9ybSA9ICdpc29sYXRlZCc7XG5cbiAgICAgIGlmICgoaSA9PT0gMCB8fCBwcmV2Q2hhciA9PT0gJyAnKSAmJiBpIDwgbGVuIC0gMiAmJiBuZXh0Q2hhciAhPT0gJyAnKSB7XG4gICAgICAgIGFyYWJpY0Zvcm0gPSAndGVybWluYWwnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA+IDAgJiYgcHJldkNoYXIgIT09ICcgJyAmJiBpIDwgbGVuIC0gMiAmJiBuZXh0Q2hhciAhPT0gJyAnKSB7XG4gICAgICAgIGFyYWJpY0Zvcm0gPSAnbWVkaWFsJztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPiAwICYmIHByZXZDaGFyICE9PSAnICcgJiYgKGkgPT09IGxlbiAtIDEgfHwgbmV4dENoYXIgPT09ICcgJykpIHtcbiAgICAgICAgYXJhYmljRm9ybSA9ICdpbml0aWFsJztcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBmb250LmdseXBoc1tjaGFyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gTkVFRCBURVNUXG4gICAgICAgIHZhciBtYXliZUdseXBoID0gZm9udC5nbHlwaHNbY2hhcl07XG4gICAgICAgIGdseXBoID0gbWF5YmVHbHlwaCBpbnN0YW5jZW9mIEdseXBoRWxlbWVudCA/IG1heWJlR2x5cGggOiBtYXliZUdseXBoW2FyYWJpY0Zvcm1dO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBnbHlwaCA9IGZvbnQuZ2x5cGhzW2NoYXJdO1xuICAgIH1cblxuICAgIGlmICghZ2x5cGgpIHtcbiAgICAgIGdseXBoID0gZm9udC5taXNzaW5nR2x5cGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdseXBoO1xuICB9XG5cbiAgZ2V0VGV4dCgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBnZXRUZXh0RnJvbU5vZGUobm9kZSkge1xuICAgIHZhciB0ZXh0Tm9kZSA9IG5vZGUgfHwgdGhpcy5ub2RlO1xuICAgIHZhciBjaGlsZE5vZGVzID0gQXJyYXkuZnJvbSh0ZXh0Tm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMpO1xuICAgIHZhciBpbmRleCA9IGNoaWxkTm9kZXMuaW5kZXhPZih0ZXh0Tm9kZSk7XG4gICAgdmFyIGxhc3RJbmRleCA9IGNoaWxkTm9kZXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgdGV4dCA9IGNvbXByZXNzU3BhY2VzKCAvLyB0ZXh0Tm9kZS52YWx1ZVxuICAgIC8vIHx8IHRleHROb2RlLnRleHRcbiAgICB0ZXh0Tm9kZS50ZXh0Q29udGVudCB8fCAnJyk7XG5cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIHRleHQgPSB0cmltTGVmdCh0ZXh0KTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgdGV4dCA9IHRyaW1SaWdodCh0ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHJlbmRlckNoaWxkcmVuKGN0eCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgdGhpcy5yZW5kZXJURWxlbWVudENoaWxkcmVuKGN0eCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplQ29vcmRpbmF0ZXMoY3R4KTtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKF8sIGkpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyQ2hpbGQoY3R4LCB0aGlzLCB0aGlzLCBpKTtcbiAgICB9KTtcbiAgICB2YXIge1xuICAgICAgbW91c2VcbiAgICB9ID0gdGhpcy5kb2N1bWVudC5zY3JlZW47IC8vIERvIG5vdCBjYWxjIGJvdW5kaW5nIGJveCBpZiBtb3VzZSBpcyBub3Qgd29ya2luZy5cblxuICAgIGlmIChtb3VzZS5pc1dvcmtpbmcoKSkge1xuICAgICAgbW91c2UuY2hlY2tCb3VuZGluZ0JveCh0aGlzLCB0aGlzLmdldEJvdW5kaW5nQm94KGN0eCkpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclRFbGVtZW50Q2hpbGRyZW4oY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIGRvY3VtZW50LFxuICAgICAgcGFyZW50XG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHJlbmRlclRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgICB2YXIgY3VzdG9tRm9udCA9IHBhcmVudC5nZXRTdHlsZSgnZm9udC1mYW1pbHknKS5nZXREZWZpbml0aW9uKCk7XG5cbiAgICBpZiAoY3VzdG9tRm9udCkge1xuICAgICAgdmFyIHtcbiAgICAgICAgdW5pdHNQZXJFbVxuICAgICAgfSA9IGN1c3RvbUZvbnQuZm9udEZhY2U7XG4gICAgICB2YXIgY3R4Rm9udCA9IEZvbnQucGFyc2UoZG9jdW1lbnQuY3R4LmZvbnQpO1xuICAgICAgdmFyIGZvbnRTaXplID0gcGFyZW50LmdldFN0eWxlKCdmb250LXNpemUnKS5nZXROdW1iZXIoY3R4Rm9udC5mb250U2l6ZSk7XG4gICAgICB2YXIgZm9udFN0eWxlID0gcGFyZW50LmdldFN0eWxlKCdmb250LXN0eWxlJykuZ2V0U3RyaW5nKGN0eEZvbnQuZm9udFN0eWxlKTtcbiAgICAgIHZhciBzY2FsZSA9IGZvbnRTaXplIC8gdW5pdHNQZXJFbTtcbiAgICAgIHZhciB0ZXh0ID0gY3VzdG9tRm9udC5pc1JUTCA/IHJlbmRlclRleHQuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKSA6IHJlbmRlclRleHQ7XG4gICAgICB2YXIgZHggPSB0b051bWJlcnMocGFyZW50LmdldEF0dHJpYnV0ZSgnZHgnKS5nZXRTdHJpbmcoKSk7XG4gICAgICB2YXIgbGVuID0gdGV4dC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGdseXBoID0gdGhpcy5nZXRHbHlwaChjdXN0b21Gb250LCB0ZXh0LCBpKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XG4gICAgICAgIGN0eC5zY2FsZShzY2FsZSwgLXNjYWxlKTtcbiAgICAgICAgdmFyIGx3ID0gY3R4LmxpbmVXaWR0aDtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGN0eC5saW5lV2lkdGggKiB1bml0c1BlckVtIC8gZm9udFNpemU7XG5cbiAgICAgICAgaWYgKGZvbnRTdHlsZSA9PT0gJ2l0YWxpYycpIHtcbiAgICAgICAgICBjdHgudHJhbnNmb3JtKDEsIDAsIC40LCAxLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdseXBoLnJlbmRlcihjdHgpO1xuXG4gICAgICAgIGlmIChmb250U3R5bGUgPT09ICdpdGFsaWMnKSB7XG4gICAgICAgICAgY3R4LnRyYW5zZm9ybSgxLCAwLCAtLjQsIDEsIDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGx3O1xuICAgICAgICBjdHguc2NhbGUoMSAvIHNjYWxlLCAtMSAvIHNjYWxlKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcbiAgICAgICAgdGhpcy54ICs9IGZvbnRTaXplICogKGdseXBoLmhvcml6QWR2WCB8fCBjdXN0b21Gb250Lmhvcml6QWR2WCkgLyB1bml0c1BlckVtO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZHhbaV0gIT09ICd1bmRlZmluZWQnICYmICFpc05hTihkeFtpXSkpIHtcbiAgICAgICAgICB0aGlzLnggKz0gZHhbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSB0aGlzOyAvLyBORUVEIFRFU1RcbiAgICAvLyBpZiAoY3R4LnBhaW50T3JkZXIgPT09ICdzdHJva2UnKSB7XG4gICAgLy8gXHRpZiAoY3R4LnN0cm9rZVN0eWxlKSB7XG4gICAgLy8gXHRcdGN0eC5zdHJva2VUZXh0KHJlbmRlclRleHQsIHgsIHkpO1xuICAgIC8vIFx0fVxuICAgIC8vIFx0aWYgKGN0eC5maWxsU3R5bGUpIHtcbiAgICAvLyBcdFx0Y3R4LmZpbGxUZXh0KHJlbmRlclRleHQsIHgsIHkpO1xuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoY3R4LmZpbGxTdHlsZSkge1xuICAgICAgY3R4LmZpbGxUZXh0KHJlbmRlclRleHQsIHgsIHkpO1xuICAgIH1cblxuICAgIGlmIChjdHguc3Ryb2tlU3R5bGUpIHtcbiAgICAgIGN0eC5zdHJva2VUZXh0KHJlbmRlclRleHQsIHgsIHkpO1xuICAgIH0gLy8gfVxuXG4gIH1cblxuICBnZXRBbmNob3JEZWx0YShjdHgsIHBhcmVudCwgc3RhcnRJKSB7XG4gICAgdmFyIHRleHRBbmNob3IgPSB0aGlzLmdldFN0eWxlKCd0ZXh0LWFuY2hvcicpLmdldFN0cmluZygnc3RhcnQnKTtcblxuICAgIGlmICh0ZXh0QW5jaG9yICE9PSAnc3RhcnQnKSB7XG4gICAgICB2YXIge1xuICAgICAgICBjaGlsZHJlblxuICAgICAgfSA9IHBhcmVudDtcbiAgICAgIHZhciBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICB2YXIgY2hpbGQgPSBudWxsO1xuICAgICAgdmFyIHdpZHRoID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0STsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgICAgaWYgKGkgPiBzdGFydEkgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKCd4JykuaGFzVmFsdWUoKSB8fCBjaGlsZC5nZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJykuaGFzVmFsdWUoKSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBuZXcgZ3JvdXBcbiAgICAgICAgfVxuXG4gICAgICAgIHdpZHRoICs9IGNoaWxkLm1lYXN1cmVUZXh0UmVjdXJzaXZlKGN0eCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMSAqICh0ZXh0QW5jaG9yID09PSAnZW5kJyA/IHdpZHRoIDogd2lkdGggLyAyLjApO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgYWRqdXN0Q2hpbGRDb29yZGluYXRlcyhjdHgsIHRleHRQYXJlbnQsIHBhcmVudCwgaSkge1xuICAgIHZhciBjaGlsZCA9IHBhcmVudC5jaGlsZHJlbltpXTtcblxuICAgIGlmICh0eXBlb2YgY2hpbGQubWVhc3VyZVRleHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICBjdHguc2F2ZSgpO1xuICAgIGNoaWxkLnNldENvbnRleHQoY3R4LCB0cnVlKTtcbiAgICB2YXIgeEF0dHIgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoJ3gnKTtcbiAgICB2YXIgeUF0dHIgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoJ3knKTtcbiAgICB2YXIgZHhBdHRyID0gY2hpbGQuZ2V0QXR0cmlidXRlKCdkeCcpO1xuICAgIHZhciBkeUF0dHIgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoJ2R5Jyk7XG4gICAgdmFyIHRleHRBbmNob3IgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJykuZ2V0U3RyaW5nKCdzdGFydCcpO1xuXG4gICAgaWYgKGkgPT09IDAgJiYgY2hpbGQudHlwZSAhPT0gJ3RleHROb2RlJykge1xuICAgICAgaWYgKCF4QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIHhBdHRyLnNldFZhbHVlKHRleHRQYXJlbnQuZ2V0QXR0cmlidXRlKCd4JykuZ2V0VmFsdWUoJzAnKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgheUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgICB5QXR0ci5zZXRWYWx1ZSh0ZXh0UGFyZW50LmdldEF0dHJpYnV0ZSgneScpLmdldFZhbHVlKCcwJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWR4QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGR4QXR0ci5zZXRWYWx1ZSh0ZXh0UGFyZW50LmdldEF0dHJpYnV0ZSgnZHgnKS5nZXRWYWx1ZSgnMCcpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkeUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgICBkeUF0dHIuc2V0VmFsdWUodGV4dFBhcmVudC5nZXRBdHRyaWJ1dGUoJ2R5JykuZ2V0VmFsdWUoJzAnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHhBdHRyLmhhc1ZhbHVlKCkpIHtcbiAgICAgIGNoaWxkLnggPSB4QXR0ci5nZXRQaXhlbHMoJ3gnKSArIHRleHRQYXJlbnQuZ2V0QW5jaG9yRGVsdGEoY3R4LCBwYXJlbnQsIGkpO1xuXG4gICAgICBpZiAodGV4dEFuY2hvciAhPT0gJ3N0YXJ0Jykge1xuICAgICAgICB2YXIgd2lkdGggPSBjaGlsZC5tZWFzdXJlVGV4dFJlY3Vyc2l2ZShjdHgpO1xuICAgICAgICBjaGlsZC54ICs9IC0xICogKHRleHRBbmNob3IgPT09ICdlbmQnID8gd2lkdGggOiB3aWR0aCAvIDIuMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeEF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgICBjaGlsZC54ICs9IGR4QXR0ci5nZXRQaXhlbHMoJ3gnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRleHRBbmNob3IgIT09ICdzdGFydCcpIHtcbiAgICAgICAgdmFyIF93aWR0aCA9IGNoaWxkLm1lYXN1cmVUZXh0UmVjdXJzaXZlKGN0eCk7XG5cbiAgICAgICAgdGV4dFBhcmVudC54ICs9IC0xICogKHRleHRBbmNob3IgPT09ICdlbmQnID8gX3dpZHRoIDogX3dpZHRoIC8gMi4wKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIHRleHRQYXJlbnQueCArPSBkeEF0dHIuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkLnggPSB0ZXh0UGFyZW50Lng7XG4gICAgfVxuXG4gICAgdGV4dFBhcmVudC54ID0gY2hpbGQueCArIGNoaWxkLm1lYXN1cmVUZXh0KGN0eCk7XG5cbiAgICBpZiAoeUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgY2hpbGQueSA9IHlBdHRyLmdldFBpeGVscygneScpO1xuXG4gICAgICBpZiAoZHlBdHRyLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY2hpbGQueSArPSBkeUF0dHIuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChkeUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgICB0ZXh0UGFyZW50LnkgKz0gZHlBdHRyLmdldFBpeGVscygneScpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZC55ID0gdGV4dFBhcmVudC55O1xuICAgIH1cblxuICAgIHRleHRQYXJlbnQueSA9IGNoaWxkLnk7XG4gICAgY2hpbGQuY2xlYXJDb250ZXh0KGN0eCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICBnZXRDaGlsZEJvdW5kaW5nQm94KGN0eCwgdGV4dFBhcmVudCwgcGFyZW50LCBpKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5hZGp1c3RDaGlsZENvb3JkaW5hdGVzKGN0eCwgdGV4dFBhcmVudCwgcGFyZW50LCBpKTsgLy8gbm90IGEgdGV4dCBub2RlP1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZC5nZXRCb3VuZGluZ0JveCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGJvdW5kaW5nQm94ID0gY2hpbGQuZ2V0Qm91bmRpbmdCb3goY3R4KTtcblxuICAgIGlmICghYm91bmRpbmdCb3gpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNoaWxkLmNoaWxkcmVuLmZvckVhY2goKF8sIGkpID0+IHtcbiAgICAgIHZhciBjaGlsZEJvdW5kaW5nQm94ID0gdGV4dFBhcmVudC5nZXRDaGlsZEJvdW5kaW5nQm94KGN0eCwgdGV4dFBhcmVudCwgY2hpbGQsIGkpO1xuICAgICAgYm91bmRpbmdCb3guYWRkQm91bmRpbmdCb3goY2hpbGRCb3VuZGluZ0JveCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJvdW5kaW5nQm94O1xuICB9XG5cbiAgcmVuZGVyQ2hpbGQoY3R4LCB0ZXh0UGFyZW50LCBwYXJlbnQsIGkpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLmFkanVzdENoaWxkQ29vcmRpbmF0ZXMoY3R4LCB0ZXh0UGFyZW50LCBwYXJlbnQsIGkpO1xuICAgIGNoaWxkLnJlbmRlcihjdHgpO1xuICAgIGNoaWxkLmNoaWxkcmVuLmZvckVhY2goKF8sIGkpID0+IHtcbiAgICAgIHRleHRQYXJlbnQucmVuZGVyQ2hpbGQoY3R4LCB0ZXh0UGFyZW50LCBjaGlsZCwgaSk7XG4gICAgfSk7XG4gIH1cblxuICBtZWFzdXJlVGV4dFJlY3Vyc2l2ZShjdHgpIHtcbiAgICB2YXIgd2lkdGggPSB0aGlzLmNoaWxkcmVuLnJlZHVjZSgod2lkdGgsIGNoaWxkKSA9PiB3aWR0aCArIGNoaWxkLm1lYXN1cmVUZXh0UmVjdXJzaXZlKGN0eCksIHRoaXMubWVhc3VyZVRleHQoY3R4KSk7XG4gICAgcmV0dXJuIHdpZHRoO1xuICB9XG5cbiAgbWVhc3VyZVRleHQoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIG1lYXN1cmVDYWNoZVxuICAgIH0gPSB0aGlzO1xuXG4gICAgaWYgKH5tZWFzdXJlQ2FjaGUpIHtcbiAgICAgIHJldHVybiBtZWFzdXJlQ2FjaGU7XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlclRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgICB2YXIgbWVhc3VyZSA9IHRoaXMubWVhc3VyZVRhcmdldFRleHQoY3R4LCByZW5kZXJUZXh0KTtcbiAgICB0aGlzLm1lYXN1cmVDYWNoZSA9IG1lYXN1cmU7XG4gICAgcmV0dXJuIG1lYXN1cmU7XG4gIH1cblxuICBtZWFzdXJlVGFyZ2V0VGV4dChjdHgsIHRhcmdldFRleHQpIHtcbiAgICBpZiAoIXRhcmdldFRleHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIge1xuICAgICAgcGFyZW50XG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIGN1c3RvbUZvbnQgPSBwYXJlbnQuZ2V0U3R5bGUoJ2ZvbnQtZmFtaWx5JykuZ2V0RGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGN1c3RvbUZvbnQpIHtcbiAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuZ2V0Rm9udFNpemUoKTtcbiAgICAgIHZhciB0ZXh0ID0gY3VzdG9tRm9udC5pc1JUTCA/IHRhcmdldFRleHQuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKSA6IHRhcmdldFRleHQ7XG4gICAgICB2YXIgZHggPSB0b051bWJlcnMocGFyZW50LmdldEF0dHJpYnV0ZSgnZHgnKS5nZXRTdHJpbmcoKSk7XG4gICAgICB2YXIgbGVuID0gdGV4dC5sZW5ndGg7XG4gICAgICB2YXIgX21lYXN1cmUgPSAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IHRoaXMuZ2V0R2x5cGgoY3VzdG9tRm9udCwgdGV4dCwgaSk7XG4gICAgICAgIF9tZWFzdXJlICs9IChnbHlwaC5ob3JpekFkdlggfHwgY3VzdG9tRm9udC5ob3JpekFkdlgpICogZm9udFNpemUgLyBjdXN0b21Gb250LmZvbnRGYWNlLnVuaXRzUGVyRW07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkeFtpXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIWlzTmFOKGR4W2ldKSkge1xuICAgICAgICAgIF9tZWFzdXJlICs9IGR4W2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfbWVhc3VyZTtcbiAgICB9XG5cbiAgICBpZiAoIWN0eC5tZWFzdXJlVGV4dCkge1xuICAgICAgcmV0dXJuIHRhcmdldFRleHQubGVuZ3RoICogMTA7XG4gICAgfVxuXG4gICAgY3R4LnNhdmUoKTtcbiAgICB0aGlzLnNldENvbnRleHQoY3R4LCB0cnVlKTtcbiAgICB2YXIge1xuICAgICAgd2lkdGg6IG1lYXN1cmVcbiAgICB9ID0gY3R4Lm1lYXN1cmVUZXh0KHRhcmdldFRleHQpO1xuICAgIHRoaXMuY2xlYXJDb250ZXh0KGN0eCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICByZXR1cm4gbWVhc3VyZTtcbiAgfVxuXG59XG5cbmNsYXNzIFRTcGFuRWxlbWVudCBleHRlbmRzIFRleHRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgbmV3LnRhcmdldCA9PT0gVFNwYW5FbGVtZW50ID8gdHJ1ZSA6IGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICd0c3Bhbic7IC8vIGlmIHRoaXMgbm9kZSBoYXMgY2hpbGRyZW4sIHRoZW4gdGhleSBvd24gdGhlIHRleHRcblxuICAgIHRoaXMudGV4dCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCA/ICcnIDogdGhpcy5nZXRUZXh0RnJvbU5vZGUoKTtcbiAgfVxuXG4gIGdldFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgfVxuXG59XG5cbmNsYXNzIFRleHROb2RlIGV4dGVuZHMgVFNwYW5FbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnR5cGUgPSAndGV4dE5vZGUnO1xuICB9XG5cbn1cblxuY2xhc3MgU1ZHRWxlbWVudCBleHRlbmRzIFJlbmRlcmVkRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ3N2Zyc7XG4gICAgdGhpcy5yb290ID0gZmFsc2U7XG4gIH1cblxuICBzZXRDb250ZXh0KGN0eCkge1xuICAgIHZhciBfdGhpcyRub2RlJHBhcmVudE5vZGU7XG5cbiAgICB2YXIge1xuICAgICAgZG9jdW1lbnRcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgc2NyZWVuLFxuICAgICAgd2luZG93XG4gICAgfSA9IGRvY3VtZW50O1xuICAgIHZhciBjYW52YXMgPSBjdHguY2FudmFzO1xuICAgIHNjcmVlbi5zZXREZWZhdWx0cyhjdHgpO1xuXG4gICAgaWYgKGNhbnZhcy5zdHlsZSAmJiB0eXBlb2YgY3R4LmZvbnQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdyAmJiB0eXBlb2Ygd2luZG93LmdldENvbXB1dGVkU3R5bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdHguZm9udCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNhbnZhcykuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udCcpO1xuICAgICAgdmFyIGZvbnRTaXplUHJvcCA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgJ2ZvbnRTaXplJywgRm9udC5wYXJzZShjdHguZm9udCkuZm9udFNpemUpO1xuXG4gICAgICBpZiAoZm9udFNpemVQcm9wLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgZG9jdW1lbnQucm9vdEVtU2l6ZSA9IGZvbnRTaXplUHJvcC5nZXRQaXhlbHMoJ3knKTtcbiAgICAgICAgZG9jdW1lbnQuZW1TaXplID0gZG9jdW1lbnQucm9vdEVtU2l6ZTtcbiAgICAgIH1cbiAgICB9IC8vIGNyZWF0ZSBuZXcgdmlldyBwb3J0XG5cblxuICAgIGlmICghdGhpcy5nZXRBdHRyaWJ1dGUoJ3gnKS5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmdldEF0dHJpYnV0ZSgneCcsIHRydWUpLnNldFZhbHVlKDApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5nZXRBdHRyaWJ1dGUoJ3knKS5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmdldEF0dHJpYnV0ZSgneScsIHRydWUpLnNldFZhbHVlKDApO1xuICAgIH1cblxuICAgIHZhciB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBzY3JlZW4udmlld1BvcnQ7XG5cbiAgICBpZiAoIXRoaXMuZ2V0U3R5bGUoJ3dpZHRoJykuaGFzVmFsdWUoKSkge1xuICAgICAgdGhpcy5nZXRTdHlsZSgnd2lkdGgnLCB0cnVlKS5zZXRWYWx1ZSgnMTAwJScpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5nZXRTdHlsZSgnaGVpZ2h0JykuaGFzVmFsdWUoKSkge1xuICAgICAgdGhpcy5nZXRTdHlsZSgnaGVpZ2h0JywgdHJ1ZSkuc2V0VmFsdWUoJzEwMCUnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZ2V0U3R5bGUoJ2NvbG9yJykuaGFzVmFsdWUoKSkge1xuICAgICAgdGhpcy5nZXRTdHlsZSgnY29sb3InLCB0cnVlKS5zZXRWYWx1ZSgnYmxhY2snKTtcbiAgICB9XG5cbiAgICB2YXIgcmVmWEF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgncmVmWCcpO1xuICAgIHZhciByZWZZQXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCdyZWZZJyk7XG4gICAgdmFyIHZpZXdCb3hBdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKTtcbiAgICB2YXIgdmlld0JveCA9IHZpZXdCb3hBdHRyLmhhc1ZhbHVlKCkgPyB0b051bWJlcnModmlld0JveEF0dHIuZ2V0U3RyaW5nKCkpIDogbnVsbDtcbiAgICB2YXIgY2xpcCA9ICF0aGlzLnJvb3QgJiYgdGhpcy5nZXRTdHlsZSgnb3ZlcmZsb3cnKS5nZXRWYWx1ZSgnaGlkZGVuJykgIT09ICd2aXNpYmxlJztcbiAgICB2YXIgbWluWCA9IDA7XG4gICAgdmFyIG1pblkgPSAwO1xuICAgIHZhciBjbGlwWCA9IDA7XG4gICAgdmFyIGNsaXBZID0gMDtcblxuICAgIGlmICh2aWV3Qm94KSB7XG4gICAgICBtaW5YID0gdmlld0JveFswXTtcbiAgICAgIG1pblkgPSB2aWV3Qm94WzFdO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5yb290KSB7XG4gICAgICB3aWR0aCA9IHRoaXMuZ2V0U3R5bGUoJ3dpZHRoJykuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgICBoZWlnaHQgPSB0aGlzLmdldFN0eWxlKCdoZWlnaHQnKS5nZXRQaXhlbHMoJ3knKTtcblxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ21hcmtlcicpIHtcbiAgICAgICAgY2xpcFggPSBtaW5YO1xuICAgICAgICBjbGlwWSA9IG1pblk7XG4gICAgICAgIG1pblggPSAwO1xuICAgICAgICBtaW5ZID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY3JlZW4udmlld1BvcnQuc2V0Q3VycmVudCh3aWR0aCwgaGVpZ2h0KTsgLy8gRGVmYXVsdCB2YWx1ZSBvZiB0cmFuc2Zvcm0tb3JpZ2luIGlzIGNlbnRlciBvbmx5IGZvciByb290IFNWRyBlbGVtZW50c1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvdHJhbnNmb3JtLW9yaWdpblxuXG4gICAgaWYgKHRoaXMubm9kZSAvLyBpcyBub3QgdGVtcG9yYXJ5IFNWR0VsZW1lbnRcbiAgICAmJiAoIXRoaXMucGFyZW50IHx8ICgoX3RoaXMkbm9kZSRwYXJlbnROb2RlID0gdGhpcy5ub2RlLnBhcmVudE5vZGUpID09PSBudWxsIHx8IF90aGlzJG5vZGUkcGFyZW50Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkbm9kZSRwYXJlbnROb2RlLm5vZGVOYW1lKSA9PT0gJ2ZvcmVpZ25PYmplY3QnKSAmJiB0aGlzLmdldFN0eWxlKCd0cmFuc2Zvcm0nLCBmYWxzZSwgdHJ1ZSkuaGFzVmFsdWUoKSAmJiAhdGhpcy5nZXRTdHlsZSgndHJhbnNmb3JtLW9yaWdpbicsIGZhbHNlLCB0cnVlKS5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmdldFN0eWxlKCd0cmFuc2Zvcm0tb3JpZ2luJywgdHJ1ZSwgdHJ1ZSkuc2V0VmFsdWUoJzUwJSA1MCUnKTtcbiAgICB9XG5cbiAgICBzdXBlci5zZXRDb250ZXh0KGN0eCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLmdldEF0dHJpYnV0ZSgneCcpLmdldFBpeGVscygneCcpLCB0aGlzLmdldEF0dHJpYnV0ZSgneScpLmdldFBpeGVscygneScpKTtcblxuICAgIGlmICh2aWV3Qm94KSB7XG4gICAgICB3aWR0aCA9IHZpZXdCb3hbMl07XG4gICAgICBoZWlnaHQgPSB2aWV3Qm94WzNdO1xuICAgIH1cblxuICAgIGRvY3VtZW50LnNldFZpZXdCb3goe1xuICAgICAgY3R4LFxuICAgICAgYXNwZWN0UmF0aW86IHRoaXMuZ2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJykuZ2V0U3RyaW5nKCksXG4gICAgICB3aWR0aDogc2NyZWVuLnZpZXdQb3J0LndpZHRoLFxuICAgICAgZGVzaXJlZFdpZHRoOiB3aWR0aCxcbiAgICAgIGhlaWdodDogc2NyZWVuLnZpZXdQb3J0LmhlaWdodCxcbiAgICAgIGRlc2lyZWRIZWlnaHQ6IGhlaWdodCxcbiAgICAgIG1pblgsXG4gICAgICBtaW5ZLFxuICAgICAgcmVmWDogcmVmWEF0dHIuZ2V0VmFsdWUoKSxcbiAgICAgIHJlZlk6IHJlZllBdHRyLmdldFZhbHVlKCksXG4gICAgICBjbGlwLFxuICAgICAgY2xpcFgsXG4gICAgICBjbGlwWVxuICAgIH0pO1xuXG4gICAgaWYgKHZpZXdCb3gpIHtcbiAgICAgIHNjcmVlbi52aWV3UG9ydC5yZW1vdmVDdXJyZW50KCk7XG4gICAgICBzY3JlZW4udmlld1BvcnQuc2V0Q3VycmVudCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gIH1cblxuICBjbGVhckNvbnRleHQoY3R4KSB7XG4gICAgc3VwZXIuY2xlYXJDb250ZXh0KGN0eCk7XG4gICAgdGhpcy5kb2N1bWVudC5zY3JlZW4udmlld1BvcnQucmVtb3ZlQ3VycmVudCgpO1xuICB9XG4gIC8qKlxyXG4gICAqIFJlc2l6ZSBTVkcgdG8gZml0IGluIGdpdmVuIHNpemUuXHJcbiAgICogQHBhcmFtIHdpZHRoXHJcbiAgICogQHBhcmFtIGhlaWdodFxyXG4gICAqIEBwYXJhbSBwcmVzZXJ2ZUFzcGVjdFJhdGlvXHJcbiAgICovXG5cblxuICByZXNpemUod2lkdGgpIHtcbiAgICB2YXIgaGVpZ2h0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB3aWR0aDtcbiAgICB2YXIgcHJlc2VydmVBc3BlY3RSYXRpbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgdmFyIHdpZHRoQXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcsIHRydWUpO1xuICAgIHZhciBoZWlnaHRBdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRydWUpO1xuICAgIHZhciB2aWV3Qm94QXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCd2aWV3Qm94Jyk7XG4gICAgdmFyIHN0eWxlQXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuICAgIHZhciBvcmlnaW5XaWR0aCA9IHdpZHRoQXR0ci5nZXROdW1iZXIoMCk7XG4gICAgdmFyIG9yaWdpbkhlaWdodCA9IGhlaWdodEF0dHIuZ2V0TnVtYmVyKDApO1xuXG4gICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW8pIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlc2VydmVBc3BlY3RSYXRpbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCB0cnVlKS5zZXRWYWx1ZShwcmVzZXJ2ZUFzcGVjdFJhdGlvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyk7XG5cbiAgICAgICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW9BdHRyLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0ci5zZXRWYWx1ZShwcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0ci5nZXRTdHJpbmcoKS5yZXBsYWNlKC9eXFxzKihcXFMuKlxcUylcXHMqJC8sICckMScpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHdpZHRoQXR0ci5zZXRWYWx1ZSh3aWR0aCk7XG4gICAgaGVpZ2h0QXR0ci5zZXRWYWx1ZShoZWlnaHQpO1xuXG4gICAgaWYgKCF2aWV3Qm94QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICB2aWV3Qm94QXR0ci5zZXRWYWx1ZShcIjAgMCBcIi5jb25jYXQob3JpZ2luV2lkdGggfHwgd2lkdGgsIFwiIFwiKS5jb25jYXQob3JpZ2luSGVpZ2h0IHx8IGhlaWdodCkpO1xuICAgIH1cblxuICAgIGlmIChzdHlsZUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgdmFyIHdpZHRoU3R5bGUgPSB0aGlzLmdldFN0eWxlKCd3aWR0aCcpO1xuICAgICAgdmFyIGhlaWdodFN0eWxlID0gdGhpcy5nZXRTdHlsZSgnaGVpZ2h0Jyk7XG5cbiAgICAgIGlmICh3aWR0aFN0eWxlLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgd2lkdGhTdHlsZS5zZXRWYWx1ZShcIlwiLmNvbmNhdCh3aWR0aCwgXCJweFwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoZWlnaHRTdHlsZS5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGhlaWdodFN0eWxlLnNldFZhbHVlKFwiXCIuY29uY2F0KGhlaWdodCwgXCJweFwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxuY2xhc3MgUmVjdEVsZW1lbnQgZXh0ZW5kcyBQYXRoRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ3JlY3QnO1xuICB9XG5cbiAgcGF0aChjdHgpIHtcbiAgICB2YXIgeCA9IHRoaXMuZ2V0QXR0cmlidXRlKCd4JykuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIHkgPSB0aGlzLmdldEF0dHJpYnV0ZSgneScpLmdldFBpeGVscygneScpO1xuICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0U3R5bGUoJ3dpZHRoJywgZmFsc2UsIHRydWUpLmdldFBpeGVscygneCcpO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmdldFN0eWxlKCdoZWlnaHQnLCBmYWxzZSwgdHJ1ZSkuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgdmFyIHJ4QXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCdyeCcpO1xuICAgIHZhciByeUF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgncnknKTtcbiAgICB2YXIgcnggPSByeEF0dHIuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIHJ5ID0gcnlBdHRyLmdldFBpeGVscygneScpO1xuXG4gICAgaWYgKHJ4QXR0ci5oYXNWYWx1ZSgpICYmICFyeUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgcnkgPSByeDtcbiAgICB9XG5cbiAgICBpZiAocnlBdHRyLmhhc1ZhbHVlKCkgJiYgIXJ4QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICByeCA9IHJ5O1xuICAgIH1cblxuICAgIHJ4ID0gTWF0aC5taW4ocngsIHdpZHRoIC8gMi4wKTtcbiAgICByeSA9IE1hdGgubWluKHJ5LCBoZWlnaHQgLyAyLjApO1xuXG4gICAgaWYgKGN0eCkge1xuICAgICAgdmFyIEtBUFBBID0gNCAqICgoTWF0aC5zcXJ0KDIpIC0gMSkgLyAzKTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTsgLy8gYWx3YXlzIHN0YXJ0IHRoZSBwYXRoIHNvIHdlIGRvbid0IGZpbGwgcHJpb3IgcGF0aHNcblxuICAgICAgaWYgKGhlaWdodCA+IDAgJiYgd2lkdGggPiAwKSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCArIHJ4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSByeCwgeSk7XG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyB3aWR0aCAtIHJ4ICsgS0FQUEEgKiByeCwgeSwgeCArIHdpZHRoLCB5ICsgcnkgLSBLQVBQQSAqIHJ5LCB4ICsgd2lkdGgsIHkgKyByeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcnkpO1xuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByeSArIEtBUFBBICogcnksIHggKyB3aWR0aCAtIHJ4ICsgS0FQUEEgKiByeCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcngsIHkgKyBoZWlnaHQpO1xuICAgICAgICBjdHgubGluZVRvKHggKyByeCwgeSArIGhlaWdodCk7XG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyByeCAtIEtBUFBBICogcngsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByeSArIEtBUFBBICogcnksIHgsIHkgKyBoZWlnaHQgLSByeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCwgeSArIHJ5KTtcbiAgICAgICAgY3R4LmJlemllckN1cnZlVG8oeCwgeSArIHJ5IC0gS0FQUEEgKiByeSwgeCArIHJ4IC0gS0FQUEEgKiByeCwgeSwgeCArIHJ4LCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQm91bmRpbmdCb3goeCwgeSwgeCArIHdpZHRoLCB5ICsgaGVpZ2h0KTtcbiAgfVxuXG4gIGdldE1hcmtlcnMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufVxuXG5jbGFzcyBDaXJjbGVFbGVtZW50IGV4dGVuZHMgUGF0aEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdjaXJjbGUnO1xuICB9XG5cbiAgcGF0aChjdHgpIHtcbiAgICB2YXIgY3ggPSB0aGlzLmdldEF0dHJpYnV0ZSgnY3gnKS5nZXRQaXhlbHMoJ3gnKTtcbiAgICB2YXIgY3kgPSB0aGlzLmdldEF0dHJpYnV0ZSgnY3knKS5nZXRQaXhlbHMoJ3knKTtcbiAgICB2YXIgciA9IHRoaXMuZ2V0QXR0cmlidXRlKCdyJykuZ2V0UGl4ZWxzKCk7XG5cbiAgICBpZiAoY3R4ICYmIHIgPiAwKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKGN4LCBjeSwgciwgMCwgTWF0aC5QSSAqIDIsIGZhbHNlKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEJvdW5kaW5nQm94KGN4IC0gciwgY3kgLSByLCBjeCArIHIsIGN5ICsgcik7XG4gIH1cblxuICBnZXRNYXJrZXJzKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuY2xhc3MgRWxsaXBzZUVsZW1lbnQgZXh0ZW5kcyBQYXRoRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ2VsbGlwc2UnO1xuICB9XG5cbiAgcGF0aChjdHgpIHtcbiAgICB2YXIgS0FQUEEgPSA0ICogKChNYXRoLnNxcnQoMikgLSAxKSAvIDMpO1xuICAgIHZhciByeCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdyeCcpLmdldFBpeGVscygneCcpO1xuICAgIHZhciByeSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdyeScpLmdldFBpeGVscygneScpO1xuICAgIHZhciBjeCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdjeCcpLmdldFBpeGVscygneCcpO1xuICAgIHZhciBjeSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdjeScpLmdldFBpeGVscygneScpO1xuXG4gICAgaWYgKGN0eCAmJiByeCA+IDAgJiYgcnkgPiAwKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKGN4ICsgcngsIGN5KTtcbiAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGN4ICsgcngsIGN5ICsgS0FQUEEgKiByeSwgY3ggKyBLQVBQQSAqIHJ4LCBjeSArIHJ5LCBjeCwgY3kgKyByeSk7XG4gICAgICBjdHguYmV6aWVyQ3VydmVUbyhjeCAtIEtBUFBBICogcngsIGN5ICsgcnksIGN4IC0gcngsIGN5ICsgS0FQUEEgKiByeSwgY3ggLSByeCwgY3kpO1xuICAgICAgY3R4LmJlemllckN1cnZlVG8oY3ggLSByeCwgY3kgLSBLQVBQQSAqIHJ5LCBjeCAtIEtBUFBBICogcngsIGN5IC0gcnksIGN4LCBjeSAtIHJ5KTtcbiAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGN4ICsgS0FQUEEgKiByeCwgY3kgLSByeSwgY3ggKyByeCwgY3kgLSBLQVBQQSAqIHJ5LCBjeCArIHJ4LCBjeSk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCb3VuZGluZ0JveChjeCAtIHJ4LCBjeSAtIHJ5LCBjeCArIHJ4LCBjeSArIHJ5KTtcbiAgfVxuXG4gIGdldE1hcmtlcnMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufVxuXG5jbGFzcyBMaW5lRWxlbWVudCBleHRlbmRzIFBhdGhFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnR5cGUgPSAnbGluZSc7XG4gIH1cblxuICBnZXRQb2ludHMoKSB7XG4gICAgcmV0dXJuIFtuZXcgUG9pbnQodGhpcy5nZXRBdHRyaWJ1dGUoJ3gxJykuZ2V0UGl4ZWxzKCd4JyksIHRoaXMuZ2V0QXR0cmlidXRlKCd5MScpLmdldFBpeGVscygneScpKSwgbmV3IFBvaW50KHRoaXMuZ2V0QXR0cmlidXRlKCd4MicpLmdldFBpeGVscygneCcpLCB0aGlzLmdldEF0dHJpYnV0ZSgneTInKS5nZXRQaXhlbHMoJ3knKSldO1xuICB9XG5cbiAgcGF0aChjdHgpIHtcbiAgICB2YXIgW3tcbiAgICAgIHg6IHgwLFxuICAgICAgeTogeTBcbiAgICB9LCB7XG4gICAgICB4OiB4MSxcbiAgICAgIHk6IHkxXG4gICAgfV0gPSB0aGlzLmdldFBvaW50cygpO1xuXG4gICAgaWYgKGN0eCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyh4MCwgeTApO1xuICAgICAgY3R4LmxpbmVUbyh4MSwgeTEpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQm91bmRpbmdCb3goeDAsIHkwLCB4MSwgeTEpO1xuICB9XG5cbiAgZ2V0TWFya2VycygpIHtcbiAgICB2YXIgW3AwLCBwMV0gPSB0aGlzLmdldFBvaW50cygpO1xuICAgIHZhciBhID0gcDAuYW5nbGVUbyhwMSk7XG4gICAgcmV0dXJuIFtbcDAsIGFdLCBbcDEsIGFdXTtcbiAgfVxuXG59XG5cbmNsYXNzIFBvbHlsaW5lRWxlbWVudCBleHRlbmRzIFBhdGhFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ3BvbHlsaW5lJztcbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMucG9pbnRzID0gUG9pbnQucGFyc2VQYXRoKHRoaXMuZ2V0QXR0cmlidXRlKCdwb2ludHMnKS5nZXRTdHJpbmcoKSk7XG4gIH1cblxuICBwYXRoKGN0eCkge1xuICAgIHZhciB7XG4gICAgICBwb2ludHNcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgW3tcbiAgICAgIHg6IHgwLFxuICAgICAgeTogeTBcbiAgICB9XSA9IHBvaW50cztcbiAgICB2YXIgYm91bmRpbmdCb3ggPSBuZXcgQm91bmRpbmdCb3goeDAsIHkwKTtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oeDAsIHkwKTtcbiAgICB9XG5cbiAgICBwb2ludHMuZm9yRWFjaCgoX3JlZikgPT4ge1xuICAgICAgdmFyIHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfSA9IF9yZWY7XG4gICAgICBib3VuZGluZ0JveC5hZGRQb2ludCh4LCB5KTtcblxuICAgICAgaWYgKGN0eCkge1xuICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBib3VuZGluZ0JveDtcbiAgfVxuXG4gIGdldE1hcmtlcnMoKSB7XG4gICAgdmFyIHtcbiAgICAgIHBvaW50c1xuICAgIH0gPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXggPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICB2YXIgbWFya2VycyA9IFtdO1xuICAgIHBvaW50cy5mb3JFYWNoKChwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPT09IGxhc3RJbmRleCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hcmtlcnMucHVzaChbcG9pbnQsIHBvaW50LmFuZ2xlVG8ocG9pbnRzW2kgKyAxXSldKTtcbiAgICB9KTtcblxuICAgIGlmIChtYXJrZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIG1hcmtlcnMucHVzaChbcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSwgbWFya2Vyc1ttYXJrZXJzLmxlbmd0aCAtIDFdWzFdXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtlcnM7XG4gIH1cblxufVxuXG5jbGFzcyBQb2x5Z29uRWxlbWVudCBleHRlbmRzIFBvbHlsaW5lRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ3BvbHlnb24nO1xuICB9XG5cbiAgcGF0aChjdHgpIHtcbiAgICB2YXIgYm91bmRpbmdCb3ggPSBzdXBlci5wYXRoKGN0eCk7XG4gICAgdmFyIFt7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH1dID0gdGhpcy5wb2ludHM7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZGluZ0JveDtcbiAgfVxuXG59XG5cbmNsYXNzIFBhdHRlcm5FbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ3BhdHRlcm4nO1xuICB9XG5cbiAgY3JlYXRlUGF0dGVybihjdHgsIF8sIHBhcmVudE9wYWNpdHlQcm9wKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy5nZXRTdHlsZSgnd2lkdGgnKS5nZXRQaXhlbHMoJ3gnLCB0cnVlKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5nZXRTdHlsZSgnaGVpZ2h0JykuZ2V0UGl4ZWxzKCd5JywgdHJ1ZSk7IC8vIHJlbmRlciBtZSB1c2luZyBhIHRlbXBvcmFyeSBzdmcgZWxlbWVudFxuXG4gICAgdmFyIHBhdHRlcm5TdmcgPSBuZXcgU1ZHRWxlbWVudCh0aGlzLmRvY3VtZW50LCBudWxsKTtcbiAgICBwYXR0ZXJuU3ZnLmF0dHJpYnV0ZXMudmlld0JveCA9IG5ldyBQcm9wZXJ0eSh0aGlzLmRvY3VtZW50LCAndmlld0JveCcsIHRoaXMuZ2V0QXR0cmlidXRlKCd2aWV3Qm94JykuZ2V0VmFsdWUoKSk7XG4gICAgcGF0dGVyblN2Zy5hdHRyaWJ1dGVzLndpZHRoID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICd3aWR0aCcsIFwiXCIuY29uY2F0KHdpZHRoLCBcInB4XCIpKTtcbiAgICBwYXR0ZXJuU3ZnLmF0dHJpYnV0ZXMuaGVpZ2h0ID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdoZWlnaHQnLCBcIlwiLmNvbmNhdChoZWlnaHQsIFwicHhcIikpO1xuICAgIHBhdHRlcm5TdmcuYXR0cmlidXRlcy50cmFuc2Zvcm0gPSBuZXcgUHJvcGVydHkodGhpcy5kb2N1bWVudCwgJ3RyYW5zZm9ybScsIHRoaXMuZ2V0QXR0cmlidXRlKCdwYXR0ZXJuVHJhbnNmb3JtJykuZ2V0VmFsdWUoKSk7XG4gICAgcGF0dGVyblN2Zy5jaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHBhdHRlcm5DYW52YXMgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB2YXIgcGF0dGVybkN0eCA9IHBhdHRlcm5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB2YXIgeEF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgneCcpO1xuICAgIHZhciB5QXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCd5Jyk7XG5cbiAgICBpZiAoeEF0dHIuaGFzVmFsdWUoKSAmJiB5QXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICBwYXR0ZXJuQ3R4LnRyYW5zbGF0ZSh4QXR0ci5nZXRQaXhlbHMoJ3gnLCB0cnVlKSwgeUF0dHIuZ2V0UGl4ZWxzKCd5JywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnRPcGFjaXR5UHJvcC5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLnN0eWxlc1snZmlsbC1vcGFjaXR5J10gPSBwYXJlbnRPcGFjaXR5UHJvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0aGlzLnN0eWxlcywgJ2ZpbGwtb3BhY2l0eScpO1xuICAgIH0gLy8gcmVuZGVyIDN4MyBncmlkIHNvIHdoZW4gd2UgdHJhbnNmb3JtIHRoZXJlJ3Mgbm8gd2hpdGUgc3BhY2Ugb24gZWRnZXNcblxuXG4gICAgZm9yICh2YXIgeCA9IC0xOyB4IDw9IDE7IHgrKykge1xuICAgICAgZm9yICh2YXIgeSA9IC0xOyB5IDw9IDE7IHkrKykge1xuICAgICAgICBwYXR0ZXJuQ3R4LnNhdmUoKTtcbiAgICAgICAgcGF0dGVyblN2Zy5hdHRyaWJ1dGVzLnggPSBuZXcgUHJvcGVydHkodGhpcy5kb2N1bWVudCwgJ3gnLCB4ICogcGF0dGVybkNhbnZhcy53aWR0aCk7XG4gICAgICAgIHBhdHRlcm5TdmcuYXR0cmlidXRlcy55ID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICd5JywgeSAqIHBhdHRlcm5DYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgcGF0dGVyblN2Zy5yZW5kZXIocGF0dGVybkN0eCk7XG4gICAgICAgIHBhdHRlcm5DdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwYXR0ZXJuID0gY3R4LmNyZWF0ZVBhdHRlcm4ocGF0dGVybkNhbnZhcywgJ3JlcGVhdCcpO1xuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG5cbn1cblxuY2xhc3MgTWFya2VyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdtYXJrZXInO1xuICB9XG5cbiAgcmVuZGVyKGN0eCwgcG9pbnQsIGFuZ2xlKSB7XG4gICAgaWYgKCFwb2ludCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSBwb2ludDtcbiAgICB2YXIgb3JpZW50ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ29yaWVudCcpLmdldFN0cmluZygnYXV0bycpO1xuICAgIHZhciBtYXJrZXJVbml0cyA9IHRoaXMuZ2V0QXR0cmlidXRlKCdtYXJrZXJVbml0cycpLmdldFN0cmluZygnc3Ryb2tlV2lkdGgnKTtcbiAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuXG4gICAgaWYgKG9yaWVudCA9PT0gJ2F1dG8nKSB7XG4gICAgICBjdHgucm90YXRlKGFuZ2xlKTtcbiAgICB9XG5cbiAgICBpZiAobWFya2VyVW5pdHMgPT09ICdzdHJva2VXaWR0aCcpIHtcbiAgICAgIGN0eC5zY2FsZShjdHgubGluZVdpZHRoLCBjdHgubGluZVdpZHRoKTtcbiAgICB9XG5cbiAgICBjdHguc2F2ZSgpOyAvLyByZW5kZXIgbWUgdXNpbmcgYSB0ZW1wb3Jhcnkgc3ZnIGVsZW1lbnRcblxuICAgIHZhciBtYXJrZXJTdmcgPSBuZXcgU1ZHRWxlbWVudCh0aGlzLmRvY3VtZW50LCBudWxsKTtcbiAgICBtYXJrZXJTdmcudHlwZSA9IHRoaXMudHlwZTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy52aWV3Qm94ID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICd2aWV3Qm94JywgdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKS5nZXRWYWx1ZSgpKTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy5yZWZYID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdyZWZYJywgdGhpcy5nZXRBdHRyaWJ1dGUoJ3JlZlgnKS5nZXRWYWx1ZSgpKTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy5yZWZZID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdyZWZZJywgdGhpcy5nZXRBdHRyaWJ1dGUoJ3JlZlknKS5nZXRWYWx1ZSgpKTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy53aWR0aCA9IG5ldyBQcm9wZXJ0eSh0aGlzLmRvY3VtZW50LCAnd2lkdGgnLCB0aGlzLmdldEF0dHJpYnV0ZSgnbWFya2VyV2lkdGgnKS5nZXRWYWx1ZSgpKTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy5oZWlnaHQgPSBuZXcgUHJvcGVydHkodGhpcy5kb2N1bWVudCwgJ2hlaWdodCcsIHRoaXMuZ2V0QXR0cmlidXRlKCdtYXJrZXJIZWlnaHQnKS5nZXRWYWx1ZSgpKTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy5vdmVyZmxvdyA9IG5ldyBQcm9wZXJ0eSh0aGlzLmRvY3VtZW50LCAnb3ZlcmZsb3cnLCB0aGlzLmdldEF0dHJpYnV0ZSgnb3ZlcmZsb3cnKS5nZXRWYWx1ZSgpKTtcbiAgICBtYXJrZXJTdmcuYXR0cmlidXRlcy5maWxsID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdmaWxsJywgdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZpbGwnKS5nZXRDb2xvcignYmxhY2snKSk7XG4gICAgbWFya2VyU3ZnLmF0dHJpYnV0ZXMuc3Ryb2tlID0gbmV3IFByb3BlcnR5KHRoaXMuZG9jdW1lbnQsICdzdHJva2UnLCB0aGlzLmdldEF0dHJpYnV0ZSgnc3Ryb2tlJykuZ2V0VmFsdWUoJ25vbmUnKSk7XG4gICAgbWFya2VyU3ZnLmNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBtYXJrZXJTdmcucmVuZGVyKGN0eCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcblxuICAgIGlmIChtYXJrZXJVbml0cyA9PT0gJ3N0cm9rZVdpZHRoJykge1xuICAgICAgY3R4LnNjYWxlKDEgLyBjdHgubGluZVdpZHRoLCAxIC8gY3R4LmxpbmVXaWR0aCk7XG4gICAgfVxuXG4gICAgaWYgKG9yaWVudCA9PT0gJ2F1dG8nKSB7XG4gICAgICBjdHgucm90YXRlKC1hbmdsZSk7XG4gICAgfVxuXG4gICAgY3R4LnRyYW5zbGF0ZSgteCwgLXkpO1xuICB9XG5cbn1cblxuY2xhc3MgRGVmc0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnR5cGUgPSAnZGVmcyc7XG4gIH1cblxuICByZW5kZXIoKSB7Ly8gTk9PUFxuICB9XG5cbn1cblxuY2xhc3MgR0VsZW1lbnQgZXh0ZW5kcyBSZW5kZXJlZEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdnJztcbiAgfVxuXG4gIGdldEJvdW5kaW5nQm94KGN0eCkge1xuICAgIHZhciBib3VuZGluZ0JveCA9IG5ldyBCb3VuZGluZ0JveCgpO1xuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBib3VuZGluZ0JveC5hZGRCb3VuZGluZ0JveChjaGlsZC5nZXRCb3VuZGluZ0JveChjdHgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm91bmRpbmdCb3g7XG4gIH1cblxufVxuXG5jbGFzcyBHcmFkaWVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy5hdHRyaWJ1dGVzVG9Jbmhlcml0ID0gWydncmFkaWVudFVuaXRzJ107XG4gICAgdGhpcy5zdG9wcyA9IFtdO1xuICAgIHZhciB7XG4gICAgICBzdG9wcyxcbiAgICAgIGNoaWxkcmVuXG4gICAgfSA9IHRoaXM7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ3N0b3AnKSB7XG4gICAgICAgIHN0b3BzLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0R3JhZGllbnRVbml0cygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2dyYWRpZW50VW5pdHMnKS5nZXRTdHJpbmcoJ29iamVjdEJvdW5kaW5nQm94Jyk7XG4gIH1cblxuICBjcmVhdGVHcmFkaWVudChjdHgsIGVsZW1lbnQsIHBhcmVudE9wYWNpdHlQcm9wKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzLCBjb25zaXN0ZW50LXRoaXNcbiAgICB2YXIgc3RvcHNDb250YWluZXIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuZ2V0SHJlZkF0dHJpYnV0ZSgpLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHN0b3BzQ29udGFpbmVyID0gdGhpcy5nZXRIcmVmQXR0cmlidXRlKCkuZ2V0RGVmaW5pdGlvbigpO1xuICAgICAgdGhpcy5pbmhlcml0U3RvcENvbnRhaW5lcihzdG9wc0NvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgdmFyIHtcbiAgICAgIHN0b3BzXG4gICAgfSA9IHN0b3BzQ29udGFpbmVyO1xuICAgIHZhciBncmFkaWVudCA9IHRoaXMuZ2V0R3JhZGllbnQoY3R4LCBlbGVtZW50KTtcblxuICAgIGlmICghZ3JhZGllbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZFBhcmVudE9wYWNpdHkocGFyZW50T3BhY2l0eVByb3AsIHN0b3BzW3N0b3BzLmxlbmd0aCAtIDFdLmNvbG9yKTtcbiAgICB9XG5cbiAgICBzdG9wcy5mb3JFYWNoKHN0b3AgPT4ge1xuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKHN0b3Aub2Zmc2V0LCB0aGlzLmFkZFBhcmVudE9wYWNpdHkocGFyZW50T3BhY2l0eVByb3AsIHN0b3AuY29sb3IpKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnZ3JhZGllbnRUcmFuc2Zvcm0nKS5oYXNWYWx1ZSgpKSB7XG4gICAgICAvLyByZW5kZXIgYXMgdHJhbnNmb3JtZWQgcGF0dGVybiBvbiB0ZW1wb3JhcnkgY2FudmFzXG4gICAgICB2YXIge1xuICAgICAgICBkb2N1bWVudFxuICAgICAgfSA9IHRoaXM7XG4gICAgICB2YXIge1xuICAgICAgICBNQVhfVklSVFVBTF9QSVhFTFMsXG4gICAgICAgIHZpZXdQb3J0XG4gICAgICB9ID0gZG9jdW1lbnQuc2NyZWVuO1xuICAgICAgdmFyIFtyb290Vmlld10gPSB2aWV3UG9ydC52aWV3UG9ydHM7XG4gICAgICB2YXIgcmVjdCA9IG5ldyBSZWN0RWxlbWVudChkb2N1bWVudCwgbnVsbCk7XG4gICAgICByZWN0LmF0dHJpYnV0ZXMueCA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgJ3gnLCAtTUFYX1ZJUlRVQUxfUElYRUxTIC8gMy4wKTtcbiAgICAgIHJlY3QuYXR0cmlidXRlcy55ID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAneScsIC1NQVhfVklSVFVBTF9QSVhFTFMgLyAzLjApO1xuICAgICAgcmVjdC5hdHRyaWJ1dGVzLndpZHRoID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnd2lkdGgnLCBNQVhfVklSVFVBTF9QSVhFTFMpO1xuICAgICAgcmVjdC5hdHRyaWJ1dGVzLmhlaWdodCA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgJ2hlaWdodCcsIE1BWF9WSVJUVUFMX1BJWEVMUyk7XG4gICAgICB2YXIgZ3JvdXAgPSBuZXcgR0VsZW1lbnQoZG9jdW1lbnQsIG51bGwpO1xuICAgICAgZ3JvdXAuYXR0cmlidXRlcy50cmFuc2Zvcm0gPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICd0cmFuc2Zvcm0nLCB0aGlzLmdldEF0dHJpYnV0ZSgnZ3JhZGllbnRUcmFuc2Zvcm0nKS5nZXRWYWx1ZSgpKTtcbiAgICAgIGdyb3VwLmNoaWxkcmVuID0gW3JlY3RdO1xuICAgICAgdmFyIHBhdHRlcm5TdmcgPSBuZXcgU1ZHRWxlbWVudChkb2N1bWVudCwgbnVsbCk7XG4gICAgICBwYXR0ZXJuU3ZnLmF0dHJpYnV0ZXMueCA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgJ3gnLCAwKTtcbiAgICAgIHBhdHRlcm5TdmcuYXR0cmlidXRlcy55ID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAneScsIDApO1xuICAgICAgcGF0dGVyblN2Zy5hdHRyaWJ1dGVzLndpZHRoID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnd2lkdGgnLCByb290Vmlldy53aWR0aCk7XG4gICAgICBwYXR0ZXJuU3ZnLmF0dHJpYnV0ZXMuaGVpZ2h0ID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnaGVpZ2h0Jywgcm9vdFZpZXcuaGVpZ2h0KTtcbiAgICAgIHBhdHRlcm5TdmcuY2hpbGRyZW4gPSBbZ3JvdXBdO1xuICAgICAgdmFyIHBhdHRlcm5DYW52YXMgPSBkb2N1bWVudC5jcmVhdGVDYW52YXMocm9vdFZpZXcud2lkdGgsIHJvb3RWaWV3LmhlaWdodCk7XG4gICAgICB2YXIgcGF0dGVybkN0eCA9IHBhdHRlcm5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIHBhdHRlcm5DdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgICBwYXR0ZXJuU3ZnLnJlbmRlcihwYXR0ZXJuQ3R4KTtcbiAgICAgIHJldHVybiBwYXR0ZXJuQ3R4LmNyZWF0ZVBhdHRlcm4ocGF0dGVybkNhbnZhcywgJ25vLXJlcGVhdCcpO1xuICAgIH1cblxuICAgIHJldHVybiBncmFkaWVudDtcbiAgfVxuXG4gIGluaGVyaXRTdG9wQ29udGFpbmVyKHN0b3BzQ29udGFpbmVyKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzVG9Jbmhlcml0LmZvckVhY2goYXR0cmlidXRlVG9Jbmhlcml0ID0+IHtcbiAgICAgIGlmICghdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlVG9Jbmhlcml0KS5oYXNWYWx1ZSgpICYmIHN0b3BzQ29udGFpbmVyLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVUb0luaGVyaXQpLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlVG9Jbmhlcml0LCB0cnVlKS5zZXRWYWx1ZShzdG9wc0NvbnRhaW5lci5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlVG9Jbmhlcml0KS5nZXRWYWx1ZSgpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZFBhcmVudE9wYWNpdHkocGFyZW50T3BhY2l0eVByb3AsIGNvbG9yKSB7XG4gICAgaWYgKHBhcmVudE9wYWNpdHlQcm9wLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHZhciBjb2xvclByb3AgPSBuZXcgUHJvcGVydHkodGhpcy5kb2N1bWVudCwgJ2NvbG9yJywgY29sb3IpO1xuICAgICAgcmV0dXJuIGNvbG9yUHJvcC5hZGRPcGFjaXR5KHBhcmVudE9wYWNpdHlQcm9wKS5nZXRDb2xvcigpO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG59XG5cbmNsYXNzIExpbmVhckdyYWRpZW50RWxlbWVudCBleHRlbmRzIEdyYWRpZW50RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICdsaW5lYXJHcmFkaWVudCc7XG4gICAgdGhpcy5hdHRyaWJ1dGVzVG9Jbmhlcml0LnB1c2goJ3gxJywgJ3kxJywgJ3gyJywgJ3kyJyk7XG4gIH1cblxuICBnZXRHcmFkaWVudChjdHgsIGVsZW1lbnQpIHtcbiAgICB2YXIgaXNCb3VuZGluZ0JveFVuaXRzID0gdGhpcy5nZXRHcmFkaWVudFVuaXRzKCkgPT09ICdvYmplY3RCb3VuZGluZ0JveCc7XG4gICAgdmFyIGJvdW5kaW5nQm94ID0gaXNCb3VuZGluZ0JveFVuaXRzID8gZWxlbWVudC5nZXRCb3VuZGluZ0JveChjdHgpIDogbnVsbDtcblxuICAgIGlmIChpc0JvdW5kaW5nQm94VW5pdHMgJiYgIWJvdW5kaW5nQm94KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZ2V0QXR0cmlidXRlKCd4MScpLmhhc1ZhbHVlKCkgJiYgIXRoaXMuZ2V0QXR0cmlidXRlKCd5MScpLmhhc1ZhbHVlKCkgJiYgIXRoaXMuZ2V0QXR0cmlidXRlKCd4MicpLmhhc1ZhbHVlKCkgJiYgIXRoaXMuZ2V0QXR0cmlidXRlKCd5MicpLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHRoaXMuZ2V0QXR0cmlidXRlKCd4MScsIHRydWUpLnNldFZhbHVlKDApO1xuICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoJ3kxJywgdHJ1ZSkuc2V0VmFsdWUoMCk7XG4gICAgICB0aGlzLmdldEF0dHJpYnV0ZSgneDInLCB0cnVlKS5zZXRWYWx1ZSgxKTtcbiAgICAgIHRoaXMuZ2V0QXR0cmlidXRlKCd5MicsIHRydWUpLnNldFZhbHVlKDApO1xuICAgIH1cblxuICAgIHZhciB4MSA9IGlzQm91bmRpbmdCb3hVbml0cyA/IGJvdW5kaW5nQm94LnggKyBib3VuZGluZ0JveC53aWR0aCAqIHRoaXMuZ2V0QXR0cmlidXRlKCd4MScpLmdldE51bWJlcigpIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ3gxJykuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIHkxID0gaXNCb3VuZGluZ0JveFVuaXRzID8gYm91bmRpbmdCb3gueSArIGJvdW5kaW5nQm94LmhlaWdodCAqIHRoaXMuZ2V0QXR0cmlidXRlKCd5MScpLmdldE51bWJlcigpIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ3kxJykuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgdmFyIHgyID0gaXNCb3VuZGluZ0JveFVuaXRzID8gYm91bmRpbmdCb3gueCArIGJvdW5kaW5nQm94LndpZHRoICogdGhpcy5nZXRBdHRyaWJ1dGUoJ3gyJykuZ2V0TnVtYmVyKCkgOiB0aGlzLmdldEF0dHJpYnV0ZSgneDInKS5nZXRQaXhlbHMoJ3gnKTtcbiAgICB2YXIgeTIgPSBpc0JvdW5kaW5nQm94VW5pdHMgPyBib3VuZGluZ0JveC55ICsgYm91bmRpbmdCb3guaGVpZ2h0ICogdGhpcy5nZXRBdHRyaWJ1dGUoJ3kyJykuZ2V0TnVtYmVyKCkgOiB0aGlzLmdldEF0dHJpYnV0ZSgneTInKS5nZXRQaXhlbHMoJ3knKTtcblxuICAgIGlmICh4MSA9PT0geDIgJiYgeTEgPT09IHkyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHgxLCB5MSwgeDIsIHkyKTtcbiAgfVxuXG59XG5cbmNsYXNzIFJhZGlhbEdyYWRpZW50RWxlbWVudCBleHRlbmRzIEdyYWRpZW50RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICdyYWRpYWxHcmFkaWVudCc7XG4gICAgdGhpcy5hdHRyaWJ1dGVzVG9Jbmhlcml0LnB1c2goJ2N4JywgJ2N5JywgJ3InLCAnZngnLCAnZnknLCAnZnInKTtcbiAgfVxuXG4gIGdldEdyYWRpZW50KGN0eCwgZWxlbWVudCkge1xuICAgIHZhciBpc0JvdW5kaW5nQm94VW5pdHMgPSB0aGlzLmdldEdyYWRpZW50VW5pdHMoKSA9PT0gJ29iamVjdEJvdW5kaW5nQm94JztcbiAgICB2YXIgYm91bmRpbmdCb3ggPSBlbGVtZW50LmdldEJvdW5kaW5nQm94KGN0eCk7XG5cbiAgICBpZiAoaXNCb3VuZGluZ0JveFVuaXRzICYmICFib3VuZGluZ0JveCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmdldEF0dHJpYnV0ZSgnY3gnKS5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmdldEF0dHJpYnV0ZSgnY3gnLCB0cnVlKS5zZXRWYWx1ZSgnNTAlJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmdldEF0dHJpYnV0ZSgnY3knKS5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmdldEF0dHJpYnV0ZSgnY3knLCB0cnVlKS5zZXRWYWx1ZSgnNTAlJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmdldEF0dHJpYnV0ZSgncicpLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHRoaXMuZ2V0QXR0cmlidXRlKCdyJywgdHJ1ZSkuc2V0VmFsdWUoJzUwJScpO1xuICAgIH1cblxuICAgIHZhciBjeCA9IGlzQm91bmRpbmdCb3hVbml0cyA/IGJvdW5kaW5nQm94LnggKyBib3VuZGluZ0JveC53aWR0aCAqIHRoaXMuZ2V0QXR0cmlidXRlKCdjeCcpLmdldE51bWJlcigpIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ2N4JykuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIGN5ID0gaXNCb3VuZGluZ0JveFVuaXRzID8gYm91bmRpbmdCb3gueSArIGJvdW5kaW5nQm94LmhlaWdodCAqIHRoaXMuZ2V0QXR0cmlidXRlKCdjeScpLmdldE51bWJlcigpIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ2N5JykuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgdmFyIGZ4ID0gY3g7XG4gICAgdmFyIGZ5ID0gY3k7XG5cbiAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoJ2Z4JykuaGFzVmFsdWUoKSkge1xuICAgICAgZnggPSBpc0JvdW5kaW5nQm94VW5pdHMgPyBib3VuZGluZ0JveC54ICsgYm91bmRpbmdCb3gud2lkdGggKiB0aGlzLmdldEF0dHJpYnV0ZSgnZngnKS5nZXROdW1iZXIoKSA6IHRoaXMuZ2V0QXR0cmlidXRlKCdmeCcpLmdldFBpeGVscygneCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnZnknKS5oYXNWYWx1ZSgpKSB7XG4gICAgICBmeSA9IGlzQm91bmRpbmdCb3hVbml0cyA/IGJvdW5kaW5nQm94LnkgKyBib3VuZGluZ0JveC5oZWlnaHQgKiB0aGlzLmdldEF0dHJpYnV0ZSgnZnknKS5nZXROdW1iZXIoKSA6IHRoaXMuZ2V0QXR0cmlidXRlKCdmeScpLmdldFBpeGVscygneScpO1xuICAgIH1cblxuICAgIHZhciByID0gaXNCb3VuZGluZ0JveFVuaXRzID8gKGJvdW5kaW5nQm94LndpZHRoICsgYm91bmRpbmdCb3guaGVpZ2h0KSAvIDIuMCAqIHRoaXMuZ2V0QXR0cmlidXRlKCdyJykuZ2V0TnVtYmVyKCkgOiB0aGlzLmdldEF0dHJpYnV0ZSgncicpLmdldFBpeGVscygpO1xuICAgIHZhciBmciA9IHRoaXMuZ2V0QXR0cmlidXRlKCdmcicpLmdldFBpeGVscygpO1xuICAgIHJldHVybiBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoZngsIGZ5LCBmciwgY3gsIGN5LCByKTtcbiAgfVxuXG59XG5cbmNsYXNzIFN0b3BFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICdzdG9wJztcbiAgICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdGhpcy5nZXRBdHRyaWJ1dGUoJ29mZnNldCcpLmdldE51bWJlcigpKSk7XG4gICAgdmFyIHN0b3BPcGFjaXR5ID0gdGhpcy5nZXRTdHlsZSgnc3RvcC1vcGFjaXR5Jyk7XG4gICAgdmFyIHN0b3BDb2xvciA9IHRoaXMuZ2V0U3R5bGUoJ3N0b3AtY29sb3InLCB0cnVlKTtcblxuICAgIGlmIChzdG9wQ29sb3IuZ2V0U3RyaW5nKCkgPT09ICcnKSB7XG4gICAgICBzdG9wQ29sb3Iuc2V0VmFsdWUoJyMwMDAnKTtcbiAgICB9XG5cbiAgICBpZiAoc3RvcE9wYWNpdHkuaGFzVmFsdWUoKSkge1xuICAgICAgc3RvcENvbG9yID0gc3RvcENvbG9yLmFkZE9wYWNpdHkoc3RvcE9wYWNpdHkpO1xuICAgIH1cblxuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIHRoaXMuY29sb3IgPSBzdG9wQ29sb3IuZ2V0Q29sb3IoKTtcbiAgfVxuXG59XG5cbmNsYXNzIEFuaW1hdGVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICdhbmltYXRlJztcbiAgICB0aGlzLmR1cmF0aW9uID0gMDtcbiAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IG51bGw7XG4gICAgdGhpcy5pbml0aWFsVW5pdHMgPSAnJztcbiAgICB0aGlzLnJlbW92ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZyb3plbiA9IGZhbHNlO1xuICAgIGRvY3VtZW50LnNjcmVlbi5hbmltYXRpb25zLnB1c2godGhpcyk7XG4gICAgdGhpcy5iZWdpbiA9IHRoaXMuZ2V0QXR0cmlidXRlKCdiZWdpbicpLmdldE1pbGxpc2Vjb25kcygpO1xuICAgIHRoaXMubWF4RHVyYXRpb24gPSB0aGlzLmJlZ2luICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ2R1cicpLmdldE1pbGxpc2Vjb25kcygpO1xuICAgIHRoaXMuZnJvbSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdmcm9tJyk7XG4gICAgdGhpcy50byA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0bycpO1xuICAgIHRoaXMudmFsdWVzID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAndmFsdWVzJywgbnVsbCk7XG4gICAgdmFyIHZhbHVlc0F0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgndmFsdWVzJyk7XG5cbiAgICBpZiAodmFsdWVzQXR0ci5oYXNWYWx1ZSgpKSB7XG4gICAgICB0aGlzLnZhbHVlcy5zZXRWYWx1ZSh2YWx1ZXNBdHRyLmdldFN0cmluZygpLnNwbGl0KCc7JykpO1xuICAgIH1cbiAgfVxuXG4gIGdldFByb3BlcnR5KCkge1xuICAgIHZhciBhdHRyaWJ1dGVUeXBlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2F0dHJpYnV0ZVR5cGUnKS5nZXRTdHJpbmcoKTtcbiAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdhdHRyaWJ1dGVOYW1lJykuZ2V0U3RyaW5nKCk7XG5cbiAgICBpZiAoYXR0cmlidXRlVHlwZSA9PT0gJ0NTUycpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRTdHlsZShhdHRyaWJ1dGVOYW1lLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIHRydWUpO1xuICB9XG5cbiAgY2FsY1ZhbHVlKCkge1xuICAgIHZhciB7XG4gICAgICBpbml0aWFsVW5pdHNcbiAgICB9ID0gdGhpcztcbiAgICB2YXIge1xuICAgICAgcHJvZ3Jlc3MsXG4gICAgICBmcm9tLFxuICAgICAgdG9cbiAgICB9ID0gdGhpcy5nZXRQcm9ncmVzcygpOyAvLyB0d2VlbiB2YWx1ZSBsaW5lYXJseVxuXG4gICAgdmFyIG5ld1ZhbHVlID0gZnJvbS5nZXROdW1iZXIoKSArICh0by5nZXROdW1iZXIoKSAtIGZyb20uZ2V0TnVtYmVyKCkpICogcHJvZ3Jlc3M7XG5cbiAgICBpZiAoaW5pdGlhbFVuaXRzID09PSAnJScpIHtcbiAgICAgIG5ld1ZhbHVlICo9IDEwMC4wOyAvLyBudW1WYWx1ZSgpIHJldHVybnMgMC0xIHdoZXJlYXMgcHJvcGVydGllcyBhcmUgMC0xMDBcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQobmV3VmFsdWUpLmNvbmNhdChpbml0aWFsVW5pdHMpO1xuICB9XG5cbiAgdXBkYXRlKGRlbHRhKSB7XG4gICAgdmFyIHtcbiAgICAgIHBhcmVudFxuICAgIH0gPSB0aGlzO1xuICAgIHZhciBwcm9wID0gdGhpcy5nZXRQcm9wZXJ0eSgpOyAvLyBzZXQgaW5pdGlhbCB2YWx1ZVxuXG4gICAgaWYgKCF0aGlzLmluaXRpYWxWYWx1ZSkge1xuICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSBwcm9wLmdldFN0cmluZygpO1xuICAgICAgdGhpcy5pbml0aWFsVW5pdHMgPSBwcm9wLmdldFVuaXRzKCk7XG4gICAgfSAvLyBpZiB3ZSdyZSBwYXN0IHRoZSBlbmQgdGltZVxuXG5cbiAgICBpZiAodGhpcy5kdXJhdGlvbiA+IHRoaXMubWF4RHVyYXRpb24pIHtcbiAgICAgIHZhciBmaWxsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZpbGwnKS5nZXRTdHJpbmcoJ3JlbW92ZScpOyAvLyBsb29wIGZvciBpbmRlZmluaXRlbHkgcmVwZWF0aW5nIGFuaW1hdGlvbnNcblxuICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCdyZXBlYXRDb3VudCcpLmdldFN0cmluZygpID09PSAnaW5kZWZpbml0ZScgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoJ3JlcGVhdER1cicpLmdldFN0cmluZygpID09PSAnaW5kZWZpbml0ZScpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdmcmVlemUnICYmICF0aGlzLmZyb3plbikge1xuICAgICAgICB0aGlzLmZyb3plbiA9IHRydWU7XG4gICAgICAgIHBhcmVudC5hbmltYXRpb25Gcm96ZW4gPSB0cnVlO1xuICAgICAgICBwYXJlbnQuYW5pbWF0aW9uRnJvemVuVmFsdWUgPSBwcm9wLmdldFN0cmluZygpO1xuICAgICAgfSBlbHNlIGlmIChmaWxsID09PSAncmVtb3ZlJyAmJiAhdGhpcy5yZW1vdmVkKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgIHByb3Auc2V0VmFsdWUocGFyZW50LmFuaW1hdGlvbkZyb3plbiA/IHBhcmVudC5hbmltYXRpb25Gcm96ZW5WYWx1ZSA6IHRoaXMuaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmR1cmF0aW9uICs9IGRlbHRhOyAvLyBpZiB3ZSdyZSBwYXN0IHRoZSBiZWdpbiB0aW1lXG5cbiAgICB2YXIgdXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuYmVnaW4gPCB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLmNhbGNWYWx1ZSgpOyAvLyB0d2VlblxuXG4gICAgICB2YXIgdHlwZUF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuXG4gICAgICBpZiAodHlwZUF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgICAvLyBmb3IgdHJhbnNmb3JtLCBldGMuXG4gICAgICAgIHZhciB0eXBlID0gdHlwZUF0dHIuZ2V0U3RyaW5nKCk7XG4gICAgICAgIG5ld1ZhbHVlID0gXCJcIi5jb25jYXQodHlwZSwgXCIoXCIpLmNvbmNhdChuZXdWYWx1ZSwgXCIpXCIpO1xuICAgICAgfVxuXG4gICAgICBwcm9wLnNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkO1xuICB9XG5cbiAgZ2V0UHJvZ3Jlc3MoKSB7XG4gICAgdmFyIHtcbiAgICAgIGRvY3VtZW50LFxuICAgICAgdmFsdWVzXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHByb2dyZXNzOiAodGhpcy5kdXJhdGlvbiAtIHRoaXMuYmVnaW4pIC8gKHRoaXMubWF4RHVyYXRpb24gLSB0aGlzLmJlZ2luKVxuICAgIH07XG5cbiAgICBpZiAodmFsdWVzLmhhc1ZhbHVlKCkpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnByb2dyZXNzICogKHZhbHVlcy5nZXRWYWx1ZSgpLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIGxiID0gTWF0aC5mbG9vcihwKTtcbiAgICAgIHZhciB1YiA9IE1hdGguY2VpbChwKTtcbiAgICAgIHJlc3VsdC5mcm9tID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnZnJvbScsIHBhcnNlRmxvYXQodmFsdWVzLmdldFZhbHVlKClbbGJdKSk7XG4gICAgICByZXN1bHQudG8gPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICd0bycsIHBhcnNlRmxvYXQodmFsdWVzLmdldFZhbHVlKClbdWJdKSk7XG4gICAgICByZXN1bHQucHJvZ3Jlc3MgPSAocCAtIGxiKSAvICh1YiAtIGxiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmZyb20gPSB0aGlzLmZyb207XG4gICAgICByZXN1bHQudG8gPSB0aGlzLnRvO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufVxuXG5jbGFzcyBBbmltYXRlQ29sb3JFbGVtZW50IGV4dGVuZHMgQW5pbWF0ZUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdhbmltYXRlQ29sb3InO1xuICB9XG5cbiAgY2FsY1ZhbHVlKCkge1xuICAgIHZhciB7XG4gICAgICBwcm9ncmVzcyxcbiAgICAgIGZyb20sXG4gICAgICB0b1xuICAgIH0gPSB0aGlzLmdldFByb2dyZXNzKCk7XG4gICAgdmFyIGNvbG9yRnJvbSA9IG5ldyBSR0JDb2xvcihmcm9tLmdldENvbG9yKCkpO1xuICAgIHZhciBjb2xvclRvID0gbmV3IFJHQkNvbG9yKHRvLmdldENvbG9yKCkpO1xuXG4gICAgaWYgKGNvbG9yRnJvbS5vayAmJiBjb2xvclRvLm9rKSB7XG4gICAgICAvLyB0d2VlbiBjb2xvciBsaW5lYXJseVxuICAgICAgdmFyIHIgPSBjb2xvckZyb20uciArIChjb2xvclRvLnIgLSBjb2xvckZyb20ucikgKiBwcm9ncmVzcztcbiAgICAgIHZhciBnID0gY29sb3JGcm9tLmcgKyAoY29sb3JUby5nIC0gY29sb3JGcm9tLmcpICogcHJvZ3Jlc3M7XG4gICAgICB2YXIgYiA9IGNvbG9yRnJvbS5iICsgKGNvbG9yVG8uYiAtIGNvbG9yRnJvbS5iKSAqIHByb2dyZXNzOyAvLyA/IGFscGhhXG5cbiAgICAgIHJldHVybiBcInJnYihcIi5jb25jYXQoTWF0aC5mbG9vcihyKSwgXCIsIFwiKS5jb25jYXQoTWF0aC5mbG9vcihnKSwgXCIsIFwiKS5jb25jYXQoTWF0aC5mbG9vcihiKSwgXCIpXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnZnJvbScpLmdldENvbG9yKCk7XG4gIH1cblxufVxuXG5jbGFzcyBBbmltYXRlVHJhbnNmb3JtRWxlbWVudCBleHRlbmRzIEFuaW1hdGVFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnR5cGUgPSAnYW5pbWF0ZVRyYW5zZm9ybSc7XG4gIH1cblxuICBjYWxjVmFsdWUoKSB7XG4gICAgdmFyIHtcbiAgICAgIHByb2dyZXNzLFxuICAgICAgZnJvbSxcbiAgICAgIHRvXG4gICAgfSA9IHRoaXMuZ2V0UHJvZ3Jlc3MoKTsgLy8gdHdlZW4gdmFsdWUgbGluZWFybHlcblxuICAgIHZhciB0cmFuc2Zvcm1Gcm9tID0gdG9OdW1iZXJzKGZyb20uZ2V0U3RyaW5nKCkpO1xuICAgIHZhciB0cmFuc2Zvcm1UbyA9IHRvTnVtYmVycyh0by5nZXRTdHJpbmcoKSk7XG4gICAgdmFyIG5ld1ZhbHVlID0gdHJhbnNmb3JtRnJvbS5tYXAoKGZyb20sIGkpID0+IHtcbiAgICAgIHZhciB0byA9IHRyYW5zZm9ybVRvW2ldO1xuICAgICAgcmV0dXJuIGZyb20gKyAodG8gLSBmcm9tKSAqIHByb2dyZXNzO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgICByZXR1cm4gbmV3VmFsdWU7XG4gIH1cblxufVxuXG5jbGFzcyBGb250RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcykge1xuICAgIHN1cGVyKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKTtcbiAgICB0aGlzLnR5cGUgPSAnZm9udCc7XG4gICAgdGhpcy5nbHlwaHMgPSB7fTtcbiAgICB0aGlzLmhvcml6QWR2WCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdob3Jpei1hZHYteCcpLmdldE51bWJlcigpO1xuICAgIHZhciB7XG4gICAgICBkZWZpbml0aW9uc1xuICAgIH0gPSBkb2N1bWVudDtcbiAgICB2YXIge1xuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gdGhpcztcblxuICAgIGZvciAodmFyIGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBzd2l0Y2ggKGNoaWxkLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZm9udC1mYWNlJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmZvbnRGYWNlID0gY2hpbGQ7XG4gICAgICAgICAgICB2YXIgZm9udEZhbWlseVN0eWxlID0gY2hpbGQuZ2V0U3R5bGUoJ2ZvbnQtZmFtaWx5Jyk7XG5cbiAgICAgICAgICAgIGlmIChmb250RmFtaWx5U3R5bGUuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICBkZWZpbml0aW9uc1tmb250RmFtaWx5U3R5bGUuZ2V0U3RyaW5nKCldID0gdGhpcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ21pc3NpbmctZ2x5cGgnOlxuICAgICAgICAgIHRoaXMubWlzc2luZ0dseXBoID0gY2hpbGQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZ2x5cGgnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IGNoaWxkO1xuXG4gICAgICAgICAgICBpZiAoZ2x5cGguYXJhYmljRm9ybSkge1xuICAgICAgICAgICAgICB0aGlzLmlzUlRMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5pc0FyYWJpYyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdseXBoc1tnbHlwaC51bmljb2RlXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdseXBoc1tnbHlwaC51bmljb2RlXSA9IHt9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5nbHlwaHNbZ2x5cGgudW5pY29kZV1bZ2x5cGguYXJhYmljRm9ybV0gPSBnbHlwaDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuZ2x5cGhzW2dseXBoLnVuaWNvZGVdID0gZ2x5cGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7Ly8gTk8gUkVOREVSXG4gIH1cblxufVxuXG5jbGFzcyBGb250RmFjZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5hc2NlbnQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnYXNjZW50JykuZ2V0TnVtYmVyKCk7XG4gICAgdGhpcy5kZXNjZW50ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2Rlc2NlbnQnKS5nZXROdW1iZXIoKTtcbiAgICB0aGlzLnVuaXRzUGVyRW0gPSB0aGlzLmdldEF0dHJpYnV0ZSgndW5pdHMtcGVyLWVtJykuZ2V0TnVtYmVyKCk7XG4gIH1cblxufVxuXG5jbGFzcyBNaXNzaW5nR2x5cGhFbGVtZW50IGV4dGVuZHMgUGF0aEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdtaXNzaW5nLWdseXBoJztcbiAgICB0aGlzLmhvcml6QWR2WCA9IDA7XG4gIH1cblxufVxuXG5jbGFzcyBUUmVmRWxlbWVudCBleHRlbmRzIFRleHRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnR5cGUgPSAndHJlZic7XG4gIH1cblxuICBnZXRUZXh0KCkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5nZXRIcmVmQXR0cmlidXRlKCkuZ2V0RGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBmaXJzdENoaWxkID0gZWxlbWVudC5jaGlsZHJlblswXTtcblxuICAgICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0Q2hpbGQuZ2V0VGV4dCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG59XG5cbmNsYXNzIEFFbGVtZW50IGV4dGVuZHMgVGV4dEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcykge1xuICAgIHN1cGVyKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKTtcbiAgICB0aGlzLnR5cGUgPSAnYSc7XG4gICAgdmFyIHtcbiAgICAgIGNoaWxkTm9kZXNcbiAgICB9ID0gbm9kZTtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGNoaWxkTm9kZXNbMF07XG4gICAgdmFyIGhhc1RleHQgPSBjaGlsZE5vZGVzLmxlbmd0aCA+IDAgJiYgQXJyYXkuZnJvbShjaGlsZE5vZGVzKS5ldmVyeShub2RlID0+IG5vZGUubm9kZVR5cGUgPT09IDMpO1xuICAgIHRoaXMuaGFzVGV4dCA9IGhhc1RleHQ7XG4gICAgdGhpcy50ZXh0ID0gaGFzVGV4dCA/IHRoaXMuZ2V0VGV4dEZyb21Ob2RlKGZpcnN0Q2hpbGQpIDogJyc7XG4gIH1cblxuICBnZXRUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnRleHQ7XG4gIH1cblxuICByZW5kZXJDaGlsZHJlbihjdHgpIHtcbiAgICBpZiAodGhpcy5oYXNUZXh0KSB7XG4gICAgICAvLyByZW5kZXIgYXMgdGV4dCBlbGVtZW50XG4gICAgICBzdXBlci5yZW5kZXJDaGlsZHJlbihjdHgpO1xuICAgICAgdmFyIHtcbiAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSB0aGlzO1xuICAgICAgdmFyIHtcbiAgICAgICAgbW91c2VcbiAgICAgIH0gPSBkb2N1bWVudC5zY3JlZW47XG4gICAgICB2YXIgZm9udFNpemUgPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICdmb250U2l6ZScsIEZvbnQucGFyc2UoZG9jdW1lbnQuY3R4LmZvbnQpLmZvbnRTaXplKTsgLy8gRG8gbm90IGNhbGMgYm91bmRpbmcgYm94IGlmIG1vdXNlIGlzIG5vdCB3b3JraW5nLlxuXG4gICAgICBpZiAobW91c2UuaXNXb3JraW5nKCkpIHtcbiAgICAgICAgbW91c2UuY2hlY2tCb3VuZGluZ0JveCh0aGlzLCBuZXcgQm91bmRpbmdCb3goeCwgeSAtIGZvbnRTaXplLmdldFBpeGVscygneScpLCB4ICsgdGhpcy5tZWFzdXJlVGV4dChjdHgpLCB5KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHJlbmRlciBhcyB0ZW1wb3JhcnkgZ3JvdXBcbiAgICAgIHZhciBnID0gbmV3IEdFbGVtZW50KHRoaXMuZG9jdW1lbnQsIG51bGwpO1xuICAgICAgZy5jaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICBnLnBhcmVudCA9IHRoaXM7XG4gICAgICBnLnJlbmRlcihjdHgpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgdmFyIHtcbiAgICAgIHdpbmRvd1xuICAgIH0gPSB0aGlzLmRvY3VtZW50O1xuXG4gICAgaWYgKHdpbmRvdykge1xuICAgICAgd2luZG93Lm9wZW4odGhpcy5nZXRIcmVmQXR0cmlidXRlKCkuZ2V0U3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VNb3ZlKCkge1xuICAgIHZhciBjdHggPSB0aGlzLmRvY3VtZW50LmN0eDtcbiAgICBjdHguY2FudmFzLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIG93bktleXMkMihvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQyKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMkMihPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzJDIoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5jbGFzcyBUZXh0UGF0aEVsZW1lbnQgZXh0ZW5kcyBUZXh0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICd0ZXh0UGF0aCc7XG4gICAgdGhpcy50ZXh0V2lkdGggPSAwO1xuICAgIHRoaXMudGV4dEhlaWdodCA9IDA7XG4gICAgdGhpcy5wYXRoTGVuZ3RoID0gLTE7XG4gICAgdGhpcy5nbHlwaEluZm8gPSBudWxsO1xuICAgIHRoaXMubGV0dGVyU3BhY2luZ0NhY2hlID0gW107XG4gICAgdGhpcy5tZWFzdXJlc0NhY2hlID0gbmV3IE1hcChbWycnLCAwXV0pO1xuICAgIHZhciBwYXRoRWxlbWVudCA9IHRoaXMuZ2V0SHJlZkF0dHJpYnV0ZSgpLmdldERlZmluaXRpb24oKTtcbiAgICB0aGlzLnRleHQgPSB0aGlzLmdldFRleHRGcm9tTm9kZSgpO1xuICAgIHRoaXMuZGF0YUFycmF5ID0gdGhpcy5wYXJzZVBhdGhEYXRhKHBhdGhFbGVtZW50KTtcbiAgfVxuXG4gIGdldFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgfVxuXG4gIHBhdGgoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIGRhdGFBcnJheVxuICAgIH0gPSB0aGlzO1xuXG4gICAgaWYgKGN0eCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIH1cblxuICAgIGRhdGFBcnJheS5mb3JFYWNoKChfcmVmKSA9PiB7XG4gICAgICB2YXIge1xuICAgICAgICB0eXBlLFxuICAgICAgICBwb2ludHNcbiAgICAgIH0gPSBfcmVmO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkxJTkVfVE86XG4gICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhwb2ludHNbMF0sIHBvaW50c1sxXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLk1PVkVfVE86XG4gICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwb2ludHNbMF0sIHBvaW50c1sxXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkNVUlZFX1RPOlxuICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgcG9pbnRzWzRdLCBwb2ludHNbNV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5RVUFEX1RPOlxuICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkFSQzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgW2N4LCBjeSwgcngsIHJ5LCB0aGV0YSwgZFRoZXRhLCBwc2ksIGZzXSA9IHBvaW50cztcbiAgICAgICAgICAgIHZhciByID0gcnggPiByeSA/IHJ4IDogcnk7XG4gICAgICAgICAgICB2YXIgc2NhbGVYID0gcnggPiByeSA/IDEgOiByeCAvIHJ5O1xuICAgICAgICAgICAgdmFyIHNjYWxlWSA9IHJ4ID4gcnkgPyByeSAvIHJ4IDogMTtcblxuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKGN4LCBjeSk7XG4gICAgICAgICAgICAgIGN0eC5yb3RhdGUocHNpKTtcbiAgICAgICAgICAgICAgY3R4LnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgICAgICAgY3R4LmFyYygwLCAwLCByLCB0aGV0YSwgdGhldGEgKyBkVGhldGEsIEJvb2xlYW4oMSAtIGZzKSk7XG4gICAgICAgICAgICAgIGN0eC5zY2FsZSgxIC8gc2NhbGVYLCAxIC8gc2NhbGVZKTtcbiAgICAgICAgICAgICAgY3R4LnJvdGF0ZSgtcHNpKTtcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgtY3gsIC1jeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFBhdGhQYXJzZXIuQ0xPU0VfUEFUSDpcbiAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJDaGlsZHJlbihjdHgpIHtcbiAgICB0aGlzLnNldFRleHREYXRhKGN0eCk7XG4gICAgY3R4LnNhdmUoKTtcbiAgICB2YXIgdGV4dERlY29yYXRpb24gPSB0aGlzLnBhcmVudC5nZXRTdHlsZSgndGV4dC1kZWNvcmF0aW9uJykuZ2V0U3RyaW5nKCk7XG4gICAgdmFyIGZvbnRTaXplID0gdGhpcy5nZXRGb250U2l6ZSgpO1xuICAgIHZhciB7XG4gICAgICBnbHlwaEluZm9cbiAgICB9ID0gdGhpcztcbiAgICB2YXIgZmlsbCA9IGN0eC5maWxsU3R5bGU7XG5cbiAgICBpZiAodGV4dERlY29yYXRpb24gPT09ICd1bmRlcmxpbmUnKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgfVxuXG4gICAgZ2x5cGhJbmZvLmZvckVhY2goKGdseXBoLCBpKSA9PiB7XG4gICAgICB2YXIge1xuICAgICAgICBwMCxcbiAgICAgICAgcDEsXG4gICAgICAgIHJvdGF0aW9uLFxuICAgICAgICB0ZXh0OiBwYXJ0aWFsVGV4dFxuICAgICAgfSA9IGdseXBoO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2xhdGUocDAueCwgcDAueSk7XG4gICAgICBjdHgucm90YXRlKHJvdGF0aW9uKTtcblxuICAgICAgaWYgKGN0eC5maWxsU3R5bGUpIHtcbiAgICAgICAgY3R4LmZpbGxUZXh0KHBhcnRpYWxUZXh0LCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN0eC5zdHJva2VTdHlsZSkge1xuICAgICAgICBjdHguc3Ryb2tlVGV4dChwYXJ0aWFsVGV4dCwgMCwgMCk7XG4gICAgICB9XG5cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgIGlmICh0ZXh0RGVjb3JhdGlvbiA9PT0gJ3VuZGVybGluZScpIHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICBjdHgubW92ZVRvKHAwLngsIHAwLnkgKyBmb250U2l6ZSAvIDgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LmxpbmVUbyhwMS54LCBwMS55ICsgZm9udFNpemUgLyA1KTtcbiAgICAgIH0gLy8gLy8gVG8gYXNzaXN0IHdpdGggZGVidWdnaW5nIHZpc3VhbGx5LCB1bmNvbW1lbnQgZm9sbG93aW5nXG4gICAgICAvL1xuICAgICAgLy8gY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgLy8gaWYgKGkgJSAyKVxuICAgICAgLy8gXHRjdHguc3Ryb2tlU3R5bGUgPSAncmVkJztcbiAgICAgIC8vIGVsc2VcbiAgICAgIC8vIFx0Y3R4LnN0cm9rZVN0eWxlID0gJ2dyZWVuJztcbiAgICAgIC8vIGN0eC5tb3ZlVG8ocDAueCwgcDAueSk7XG4gICAgICAvLyBjdHgubGluZVRvKHAxLngsIHAxLnkpO1xuICAgICAgLy8gY3R4LnN0cm9rZSgpO1xuICAgICAgLy8gY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgfSk7XG5cbiAgICBpZiAodGV4dERlY29yYXRpb24gPT09ICd1bmRlcmxpbmUnKSB7XG4gICAgICBjdHgubGluZVdpZHRoID0gZm9udFNpemUgLyAyMDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGZpbGw7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuXG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIGdldExldHRlclNwYWNpbmdBdCgpIHtcbiAgICB2YXIgaWR4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgIHJldHVybiB0aGlzLmxldHRlclNwYWNpbmdDYWNoZVtpZHhdIHx8IDA7XG4gIH1cblxuICBmaW5kU2VnbWVudFRvRml0Q2hhcihjdHgsIGFuY2hvciwgdGV4dEZ1bGxXaWR0aCwgZnVsbFBhdGhXaWR0aCwgc3BhY2VzTnVtYmVyLCBpbnB1dE9mZnNldCwgZHksIGMsIGNoYXJJKSB7XG4gICAgdmFyIG9mZnNldCA9IGlucHV0T2Zmc2V0O1xuICAgIHZhciBnbHlwaFdpZHRoID0gdGhpcy5tZWFzdXJlVGV4dChjdHgsIGMpO1xuXG4gICAgaWYgKGMgPT09ICcgJyAmJiBhbmNob3IgPT09ICdqdXN0aWZ5JyAmJiB0ZXh0RnVsbFdpZHRoIDwgZnVsbFBhdGhXaWR0aCkge1xuICAgICAgZ2x5cGhXaWR0aCArPSAoZnVsbFBhdGhXaWR0aCAtIHRleHRGdWxsV2lkdGgpIC8gc3BhY2VzTnVtYmVyO1xuICAgIH1cblxuICAgIGlmIChjaGFySSA+IC0xKSB7XG4gICAgICBvZmZzZXQgKz0gdGhpcy5nZXRMZXR0ZXJTcGFjaW5nQXQoY2hhckkpO1xuICAgIH1cblxuICAgIHZhciBzcGxpbmVTdGVwID0gdGhpcy50ZXh0SGVpZ2h0IC8gMjA7XG4gICAgdmFyIHAwID0gdGhpcy5nZXRFcXVpZGlzdGFudFBvaW50T25QYXRoKG9mZnNldCwgc3BsaW5lU3RlcCwgMCk7XG4gICAgdmFyIHAxID0gdGhpcy5nZXRFcXVpZGlzdGFudFBvaW50T25QYXRoKG9mZnNldCArIGdseXBoV2lkdGgsIHNwbGluZVN0ZXAsIDApO1xuICAgIHZhciBzZWdtZW50ID0ge1xuICAgICAgcDAsXG4gICAgICBwMVxuICAgIH07XG4gICAgdmFyIHJvdGF0aW9uID0gcDAgJiYgcDEgPyBNYXRoLmF0YW4yKHAxLnkgLSBwMC55LCBwMS54IC0gcDAueCkgOiAwO1xuXG4gICAgaWYgKGR5KSB7XG4gICAgICB2YXIgZHlYID0gTWF0aC5jb3MoTWF0aC5QSSAvIDIgKyByb3RhdGlvbikgKiBkeTtcbiAgICAgIHZhciBkeVkgPSBNYXRoLmNvcygtcm90YXRpb24pICogZHk7XG4gICAgICBzZWdtZW50LnAwID0gX29iamVjdFNwcmVhZCQyKF9vYmplY3RTcHJlYWQkMih7fSwgcDApLCB7fSwge1xuICAgICAgICB4OiBwMC54ICsgZHlYLFxuICAgICAgICB5OiBwMC55ICsgZHlZXG4gICAgICB9KTtcbiAgICAgIHNlZ21lbnQucDEgPSBfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCBwMSksIHt9LCB7XG4gICAgICAgIHg6IHAxLnggKyBkeVgsXG4gICAgICAgIHk6IHAxLnkgKyBkeVlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCArPSBnbHlwaFdpZHRoO1xuICAgIHJldHVybiB7XG4gICAgICBvZmZzZXQsXG4gICAgICBzZWdtZW50LFxuICAgICAgcm90YXRpb25cbiAgICB9O1xuICB9XG5cbiAgbWVhc3VyZVRleHQoY3R4LCB0ZXh0KSB7XG4gICAgdmFyIHtcbiAgICAgIG1lYXN1cmVzQ2FjaGVcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgdGFyZ2V0VGV4dCA9IHRleHQgfHwgdGhpcy5nZXRUZXh0KCk7XG5cbiAgICBpZiAobWVhc3VyZXNDYWNoZS5oYXModGFyZ2V0VGV4dCkpIHtcbiAgICAgIHJldHVybiBtZWFzdXJlc0NhY2hlLmdldCh0YXJnZXRUZXh0KTtcbiAgICB9XG5cbiAgICB2YXIgbWVhc3VyZSA9IHRoaXMubWVhc3VyZVRhcmdldFRleHQoY3R4LCB0YXJnZXRUZXh0KTtcbiAgICBtZWFzdXJlc0NhY2hlLnNldCh0YXJnZXRUZXh0LCBtZWFzdXJlKTtcbiAgICByZXR1cm4gbWVhc3VyZTtcbiAgfSAvLyBUaGlzIG1ldGhvZCBzdXBwb3NlcyB3aGF0IGFsbCBjdXN0b20gZm9udHMgYWxyZWFkeSBsb2FkZWQuXG4gIC8vIElmIHNvbWUgZm9udCB3aWxsIGJlIGxvYWRlZCBhZnRlciB0aGlzIG1ldGhvZCBjYWxsLCA8dGV4dFBhdGg+IHdpbGwgbm90IGJlIHJlbmRlcmVkIGNvcnJlY3RseS5cbiAgLy8gWW91IG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBtYW51YWxseSB0byB1cGRhdGUgZ2x5cGhzIGNhY2hlLlxuXG5cbiAgc2V0VGV4dERhdGEoY3R4KSB7XG4gICAgaWYgKHRoaXMuZ2x5cGhJbmZvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlclRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgICB2YXIgY2hhcnMgPSByZW5kZXJUZXh0LnNwbGl0KCcnKTtcbiAgICB2YXIgc3BhY2VzTnVtYmVyID0gcmVuZGVyVGV4dC5zcGxpdCgnICcpLmxlbmd0aCAtIDE7XG4gICAgdmFyIGR4ID0gdGhpcy5wYXJlbnQuZ2V0QXR0cmlidXRlKCdkeCcpLnNwbGl0KCkubWFwKF8gPT4gXy5nZXRQaXhlbHMoJ3gnKSk7XG4gICAgdmFyIGR5ID0gdGhpcy5wYXJlbnQuZ2V0QXR0cmlidXRlKCdkeScpLmdldFBpeGVscygneScpO1xuICAgIHZhciBhbmNob3IgPSB0aGlzLnBhcmVudC5nZXRTdHlsZSgndGV4dC1hbmNob3InKS5nZXRTdHJpbmcoJ3N0YXJ0Jyk7XG4gICAgdmFyIHRoaXNTcGFjaW5nID0gdGhpcy5nZXRTdHlsZSgnbGV0dGVyLXNwYWNpbmcnKTtcbiAgICB2YXIgcGFyZW50U3BhY2luZyA9IHRoaXMucGFyZW50LmdldFN0eWxlKCdsZXR0ZXItc3BhY2luZycpO1xuICAgIHZhciBsZXR0ZXJTcGFjaW5nID0gMDtcblxuICAgIGlmICghdGhpc1NwYWNpbmcuaGFzVmFsdWUoKSB8fCB0aGlzU3BhY2luZy5nZXRWYWx1ZSgpID09PSAnaW5oZXJpdCcpIHtcbiAgICAgIGxldHRlclNwYWNpbmcgPSBwYXJlbnRTcGFjaW5nLmdldFBpeGVscygpO1xuICAgIH0gZWxzZSBpZiAodGhpc1NwYWNpbmcuaGFzVmFsdWUoKSkge1xuICAgICAgaWYgKHRoaXNTcGFjaW5nLmdldFZhbHVlKCkgIT09ICdpbml0aWFsJyAmJiB0aGlzU3BhY2luZy5nZXRWYWx1ZSgpICE9PSAndW5zZXQnKSB7XG4gICAgICAgIGxldHRlclNwYWNpbmcgPSB0aGlzU3BhY2luZy5nZXRQaXhlbHMoKTtcbiAgICAgIH1cbiAgICB9IC8vIGZpbGwgbGV0dGVyLXNwYWNpbmcgY2FjaGVcblxuXG4gICAgdmFyIGxldHRlclNwYWNpbmdDYWNoZSA9IFtdO1xuICAgIHZhciB0ZXh0TGVuID0gcmVuZGVyVGV4dC5sZW5ndGg7XG4gICAgdGhpcy5sZXR0ZXJTcGFjaW5nQ2FjaGUgPSBsZXR0ZXJTcGFjaW5nQ2FjaGU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHRMZW47IGkrKykge1xuICAgICAgbGV0dGVyU3BhY2luZ0NhY2hlLnB1c2godHlwZW9mIGR4W2ldICE9PSAndW5kZWZpbmVkJyA/IGR4W2ldIDogbGV0dGVyU3BhY2luZyk7XG4gICAgfVxuXG4gICAgdmFyIGR4U3VtID0gbGV0dGVyU3BhY2luZ0NhY2hlLnJlZHVjZSgoYWNjLCBjdXIsIGkpID0+IGkgPT09IDAgPyAwIDogYWNjICsgY3VyIHx8IDAsIDApO1xuICAgIHZhciB0ZXh0V2lkdGggPSB0aGlzLm1lYXN1cmVUZXh0KGN0eCk7XG4gICAgdmFyIHRleHRGdWxsV2lkdGggPSBNYXRoLm1heCh0ZXh0V2lkdGggKyBkeFN1bSwgMCk7XG4gICAgdGhpcy50ZXh0V2lkdGggPSB0ZXh0V2lkdGg7XG4gICAgdGhpcy50ZXh0SGVpZ2h0ID0gdGhpcy5nZXRGb250U2l6ZSgpO1xuICAgIHRoaXMuZ2x5cGhJbmZvID0gW107XG4gICAgdmFyIGZ1bGxQYXRoV2lkdGggPSB0aGlzLmdldFBhdGhMZW5ndGgoKTtcbiAgICB2YXIgc3RhcnRPZmZzZXQgPSB0aGlzLmdldFN0eWxlKCdzdGFydE9mZnNldCcpLmdldE51bWJlcigwKSAqIGZ1bGxQYXRoV2lkdGg7XG4gICAgdmFyIG9mZnNldCA9IDA7XG5cbiAgICBpZiAoYW5jaG9yID09PSAnbWlkZGxlJyB8fCBhbmNob3IgPT09ICdjZW50ZXInKSB7XG4gICAgICBvZmZzZXQgPSAtdGV4dEZ1bGxXaWR0aCAvIDI7XG4gICAgfVxuXG4gICAgaWYgKGFuY2hvciA9PT0gJ2VuZCcgfHwgYW5jaG9yID09PSAncmlnaHQnKSB7XG4gICAgICBvZmZzZXQgPSAtdGV4dEZ1bGxXaWR0aDtcbiAgICB9XG5cbiAgICBvZmZzZXQgKz0gc3RhcnRPZmZzZXQ7XG4gICAgY2hhcnMuZm9yRWFjaCgoY2hhciwgaSkgPT4ge1xuICAgICAgLy8gRmluZCBzdWNoIHNlZ21lbnQgd2hhdCBkaXN0YW5jZSBiZXR3ZWVuIHAwIGFuZCBwMSBpcyBhcHByb3guIHdpZHRoIG9mIGdseXBoXG4gICAgICB2YXIge1xuICAgICAgICBvZmZzZXQ6IG5leHRPZmZzZXQsXG4gICAgICAgIHNlZ21lbnQsXG4gICAgICAgIHJvdGF0aW9uXG4gICAgICB9ID0gdGhpcy5maW5kU2VnbWVudFRvRml0Q2hhcihjdHgsIGFuY2hvciwgdGV4dEZ1bGxXaWR0aCwgZnVsbFBhdGhXaWR0aCwgc3BhY2VzTnVtYmVyLCBvZmZzZXQsIGR5LCBjaGFyLCBpKTtcbiAgICAgIG9mZnNldCA9IG5leHRPZmZzZXQ7XG5cbiAgICAgIGlmICghc2VnbWVudC5wMCB8fCAhc2VnbWVudC5wMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGNvbnN0IHdpZHRoID0gdGhpcy5nZXRMaW5lTGVuZ3RoKFxuICAgICAgLy8gXHRzZWdtZW50LnAwLngsXG4gICAgICAvLyBcdHNlZ21lbnQucDAueSxcbiAgICAgIC8vIFx0c2VnbWVudC5wMS54LFxuICAgICAgLy8gXHRzZWdtZW50LnAxLnlcbiAgICAgIC8vICk7XG4gICAgICAvLyBOb3RlOiBTaW5jZSBnbHlwaHMgYXJlIHJlbmRlcmVkIG9uZSBhdCBhIHRpbWUsIGFueSBrZXJuaW5nIHBhaXIgZGF0YSBidWlsdCBpbnRvIHRoZSBmb250IHdpbGwgbm90IGJlIHVzZWQuXG4gICAgICAvLyBDYW4gZm9yZXNlZSBoYXZpbmcgYSByb3VnaCBwYWlyIHRhYmxlIGJ1aWx0IGluIHRoYXQgdGhlIGRldmVsb3BlciBjYW4gb3ZlcnJpZGUgYXMgbmVlZGVkLlxuICAgICAgLy8gT3IgdXNlIFwiZHhcIiBhdHRyaWJ1dGUgb2YgdGhlIDx0ZXh0PiBub2RlIGFzIGEgbmFpdmUgcmVwbGFjZW1lbnRcbiAgICAgIC8vIGNvbnN0IGtlcm4gPSAwO1xuICAgICAgLy8gcGxhY2Vob2xkZXIgZm9yIGZ1dHVyZSBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gY29uc3QgbWlkcG9pbnQgPSB0aGlzLmdldFBvaW50T25MaW5lKFxuICAgICAgLy8gXHRrZXJuICsgd2lkdGggLyAyLjAsXG4gICAgICAvLyBcdHNlZ21lbnQucDAueCwgc2VnbWVudC5wMC55LCBzZWdtZW50LnAxLngsIHNlZ21lbnQucDEueVxuICAgICAgLy8gKTtcblxuXG4gICAgICB0aGlzLmdseXBoSW5mby5wdXNoKHtcbiAgICAgICAgLy8gdHJhbnNwb3NlWDogbWlkcG9pbnQueCxcbiAgICAgICAgLy8gdHJhbnNwb3NlWTogbWlkcG9pbnQueSxcbiAgICAgICAgdGV4dDogY2hhcnNbaV0sXG4gICAgICAgIHAwOiBzZWdtZW50LnAwLFxuICAgICAgICBwMTogc2VnbWVudC5wMSxcbiAgICAgICAgcm90YXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcGFyc2VQYXRoRGF0YShwYXRoKSB7XG4gICAgdGhpcy5wYXRoTGVuZ3RoID0gLTE7IC8vIHJlc2V0IHBhdGggbGVuZ3RoXG5cbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aENvbW1hbmRzID0gW107XG4gICAgdmFyIHtcbiAgICAgIHBhdGhQYXJzZXJcbiAgICB9ID0gcGF0aDtcbiAgICBwYXRoUGFyc2VyLnJlc2V0KCk7IC8vIGNvbnZlcnQgbCwgSCwgaCwgViwgYW5kIHYgdG8gTFxuXG4gICAgd2hpbGUgKCFwYXRoUGFyc2VyLmlzRW5kKCkpIHtcbiAgICAgIHZhciB7XG4gICAgICAgIGN1cnJlbnRcbiAgICAgIH0gPSBwYXRoUGFyc2VyO1xuICAgICAgdmFyIHN0YXJ0WCA9IGN1cnJlbnQgPyBjdXJyZW50LnggOiAwO1xuICAgICAgdmFyIHN0YXJ0WSA9IGN1cnJlbnQgPyBjdXJyZW50LnkgOiAwO1xuICAgICAgdmFyIGNvbW1hbmQgPSBwYXRoUGFyc2VyLm5leHQoKTtcbiAgICAgIHZhciBuZXh0Q29tbWFuZFR5cGUgPSBjb21tYW5kLnR5cGU7XG4gICAgICB2YXIgcG9pbnRzID0gW107XG5cbiAgICAgIHN3aXRjaCAoY29tbWFuZC50eXBlKSB7XG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5NT1ZFX1RPOlxuICAgICAgICAgIHRoaXMucGF0aE0ocGF0aFBhcnNlciwgcG9pbnRzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhdGhQYXJzZXIuTElORV9UTzpcbiAgICAgICAgICBuZXh0Q29tbWFuZFR5cGUgPSB0aGlzLnBhdGhMKHBhdGhQYXJzZXIsIHBvaW50cyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkhPUklaX0xJTkVfVE86XG4gICAgICAgICAgbmV4dENvbW1hbmRUeXBlID0gdGhpcy5wYXRoSChwYXRoUGFyc2VyLCBwb2ludHMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5WRVJUX0xJTkVfVE86XG4gICAgICAgICAgbmV4dENvbW1hbmRUeXBlID0gdGhpcy5wYXRoVihwYXRoUGFyc2VyLCBwb2ludHMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5DVVJWRV9UTzpcbiAgICAgICAgICB0aGlzLnBhdGhDKHBhdGhQYXJzZXIsIHBvaW50cyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLlNNT09USF9DVVJWRV9UTzpcbiAgICAgICAgICBuZXh0Q29tbWFuZFR5cGUgPSB0aGlzLnBhdGhTKHBhdGhQYXJzZXIsIHBvaW50cyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLlFVQURfVE86XG4gICAgICAgICAgdGhpcy5wYXRoUShwYXRoUGFyc2VyLCBwb2ludHMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5TTU9PVEhfUVVBRF9UTzpcbiAgICAgICAgICBuZXh0Q29tbWFuZFR5cGUgPSB0aGlzLnBhdGhUKHBhdGhQYXJzZXIsIHBvaW50cyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkFSQzpcbiAgICAgICAgICBwb2ludHMgPSB0aGlzLnBhdGhBKHBhdGhQYXJzZXIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5DTE9TRV9QQVRIOlxuICAgICAgICAgIFBhdGhFbGVtZW50LnBhdGhaKHBhdGhQYXJzZXIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tbWFuZC50eXBlICE9PSBQYXRoUGFyc2VyLkNMT1NFX1BBVEgpIHtcbiAgICAgICAgcGF0aENvbW1hbmRzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IG5leHRDb21tYW5kVHlwZSxcbiAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIHg6IHN0YXJ0WCxcbiAgICAgICAgICAgIHk6IHN0YXJ0WVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGF0aExlbmd0aDogdGhpcy5jYWxjTGVuZ3RoKHN0YXJ0WCwgc3RhcnRZLCBuZXh0Q29tbWFuZFR5cGUsIHBvaW50cylcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoQ29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgdHlwZTogUGF0aFBhcnNlci5DTE9TRV9QQVRILFxuICAgICAgICAgIHBvaW50czogW10sXG4gICAgICAgICAgcGF0aExlbmd0aDogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aENvbW1hbmRzO1xuICB9XG5cbiAgcGF0aE0ocGF0aFBhcnNlciwgcG9pbnRzKSB7XG4gICAgdmFyIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhNKHBhdGhQYXJzZXIpLnBvaW50O1xuICAgIHBvaW50cy5wdXNoKHgsIHkpO1xuICB9XG5cbiAgcGF0aEwocGF0aFBhcnNlciwgcG9pbnRzKSB7XG4gICAgdmFyIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhMKHBhdGhQYXJzZXIpLnBvaW50O1xuICAgIHBvaW50cy5wdXNoKHgsIHkpO1xuICAgIHJldHVybiBQYXRoUGFyc2VyLkxJTkVfVE87XG4gIH1cblxuICBwYXRoSChwYXRoUGFyc2VyLCBwb2ludHMpIHtcbiAgICB2YXIge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9ID0gUGF0aEVsZW1lbnQucGF0aEgocGF0aFBhcnNlcikucG9pbnQ7XG4gICAgcG9pbnRzLnB1c2goeCwgeSk7XG4gICAgcmV0dXJuIFBhdGhQYXJzZXIuTElORV9UTztcbiAgfVxuXG4gIHBhdGhWKHBhdGhQYXJzZXIsIHBvaW50cykge1xuICAgIHZhciB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSBQYXRoRWxlbWVudC5wYXRoVihwYXRoUGFyc2VyKS5wb2ludDtcbiAgICBwb2ludHMucHVzaCh4LCB5KTtcbiAgICByZXR1cm4gUGF0aFBhcnNlci5MSU5FX1RPO1xuICB9XG5cbiAgcGF0aEMocGF0aFBhcnNlciwgcG9pbnRzKSB7XG4gICAgdmFyIHtcbiAgICAgIHBvaW50LFxuICAgICAgY29udHJvbFBvaW50LFxuICAgICAgY3VycmVudFBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhDKHBhdGhQYXJzZXIpO1xuICAgIHBvaW50cy5wdXNoKHBvaW50LngsIHBvaW50LnksIGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcbiAgfVxuXG4gIHBhdGhTKHBhdGhQYXJzZXIsIHBvaW50cykge1xuICAgIHZhciB7XG4gICAgICBwb2ludCxcbiAgICAgIGNvbnRyb2xQb2ludCxcbiAgICAgIGN1cnJlbnRQb2ludFxuICAgIH0gPSBQYXRoRWxlbWVudC5wYXRoUyhwYXRoUGFyc2VyKTtcbiAgICBwb2ludHMucHVzaChwb2ludC54LCBwb2ludC55LCBjb250cm9sUG9pbnQueCwgY29udHJvbFBvaW50LnksIGN1cnJlbnRQb2ludC54LCBjdXJyZW50UG9pbnQueSk7XG4gICAgcmV0dXJuIFBhdGhQYXJzZXIuQ1VSVkVfVE87XG4gIH1cblxuICBwYXRoUShwYXRoUGFyc2VyLCBwb2ludHMpIHtcbiAgICB2YXIge1xuICAgICAgY29udHJvbFBvaW50LFxuICAgICAgY3VycmVudFBvaW50XG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhRKHBhdGhQYXJzZXIpO1xuICAgIHBvaW50cy5wdXNoKGNvbnRyb2xQb2ludC54LCBjb250cm9sUG9pbnQueSwgY3VycmVudFBvaW50LngsIGN1cnJlbnRQb2ludC55KTtcbiAgfVxuXG4gIHBhdGhUKHBhdGhQYXJzZXIsIHBvaW50cykge1xuICAgIHZhciB7XG4gICAgICBjb250cm9sUG9pbnQsXG4gICAgICBjdXJyZW50UG9pbnRcbiAgICB9ID0gUGF0aEVsZW1lbnQucGF0aFQocGF0aFBhcnNlcik7XG4gICAgcG9pbnRzLnB1c2goY29udHJvbFBvaW50LngsIGNvbnRyb2xQb2ludC55LCBjdXJyZW50UG9pbnQueCwgY3VycmVudFBvaW50LnkpO1xuICAgIHJldHVybiBQYXRoUGFyc2VyLlFVQURfVE87XG4gIH1cblxuICBwYXRoQShwYXRoUGFyc2VyKSB7XG4gICAgdmFyIHtcbiAgICAgIHJYLFxuICAgICAgclksXG4gICAgICBzd2VlcEZsYWcsXG4gICAgICB4QXhpc1JvdGF0aW9uLFxuICAgICAgY2VudHAsXG4gICAgICBhMSxcbiAgICAgIGFkXG4gICAgfSA9IFBhdGhFbGVtZW50LnBhdGhBKHBhdGhQYXJzZXIpO1xuXG4gICAgaWYgKHN3ZWVwRmxhZyA9PT0gMCAmJiBhZCA+IDApIHtcbiAgICAgIGFkIC09IDIgKiBNYXRoLlBJO1xuICAgIH1cblxuICAgIGlmIChzd2VlcEZsYWcgPT09IDEgJiYgYWQgPCAwKSB7XG4gICAgICBhZCArPSAyICogTWF0aC5QSTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2NlbnRwLngsIGNlbnRwLnksIHJYLCByWSwgYTEsIGFkLCB4QXhpc1JvdGF0aW9uLCBzd2VlcEZsYWddO1xuICB9XG5cbiAgY2FsY0xlbmd0aCh4LCB5LCBjb21tYW5kVHlwZSwgcG9pbnRzKSB7XG4gICAgdmFyIGxlbiA9IDA7XG4gICAgdmFyIHAxID0gbnVsbDtcbiAgICB2YXIgcDIgPSBudWxsO1xuICAgIHZhciB0ID0gMDtcblxuICAgIHN3aXRjaCAoY29tbWFuZFR5cGUpIHtcbiAgICAgIGNhc2UgUGF0aFBhcnNlci5MSU5FX1RPOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5lTGVuZ3RoKHgsIHksIHBvaW50c1swXSwgcG9pbnRzWzFdKTtcblxuICAgICAgY2FzZSBQYXRoUGFyc2VyLkNVUlZFX1RPOlxuICAgICAgICAvLyBBcHByb3hpbWF0ZXMgYnkgYnJlYWtpbmcgY3VydmUgaW50byAxMDAgbGluZSBzZWdtZW50c1xuICAgICAgICBsZW4gPSAwLjA7XG4gICAgICAgIHAxID0gdGhpcy5nZXRQb2ludE9uQ3ViaWNCZXppZXIoMCwgeCwgeSwgcG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCBwb2ludHNbNF0sIHBvaW50c1s1XSk7XG5cbiAgICAgICAgZm9yICh0ID0gMC4wMTsgdCA8PSAxOyB0ICs9IDAuMDEpIHtcbiAgICAgICAgICBwMiA9IHRoaXMuZ2V0UG9pbnRPbkN1YmljQmV6aWVyKHQsIHgsIHksIHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgcG9pbnRzWzRdLCBwb2ludHNbNV0pO1xuICAgICAgICAgIGxlbiArPSB0aGlzLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG4gICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsZW47XG5cbiAgICAgIGNhc2UgUGF0aFBhcnNlci5RVUFEX1RPOlxuICAgICAgICAvLyBBcHByb3hpbWF0ZXMgYnkgYnJlYWtpbmcgY3VydmUgaW50byAxMDAgbGluZSBzZWdtZW50c1xuICAgICAgICBsZW4gPSAwLjA7XG4gICAgICAgIHAxID0gdGhpcy5nZXRQb2ludE9uUXVhZHJhdGljQmV6aWVyKDAsIHgsIHksIHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSk7XG5cbiAgICAgICAgZm9yICh0ID0gMC4wMTsgdCA8PSAxOyB0ICs9IDAuMDEpIHtcbiAgICAgICAgICBwMiA9IHRoaXMuZ2V0UG9pbnRPblF1YWRyYXRpY0Jlemllcih0LCB4LCB5LCBwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10pO1xuICAgICAgICAgIGxlbiArPSB0aGlzLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG4gICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsZW47XG5cbiAgICAgIGNhc2UgUGF0aFBhcnNlci5BUkM6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBBcHByb3hpbWF0ZXMgYnkgYnJlYWtpbmcgY3VydmUgaW50byBsaW5lIHNlZ21lbnRzXG4gICAgICAgICAgbGVuID0gMC4wO1xuICAgICAgICAgIHZhciBzdGFydCA9IHBvaW50c1s0XTsgLy8gNCA9IHRoZXRhXG5cbiAgICAgICAgICB2YXIgZFRoZXRhID0gcG9pbnRzWzVdOyAvLyA1ID0gZFRoZXRhXG5cbiAgICAgICAgICB2YXIgZW5kID0gcG9pbnRzWzRdICsgZFRoZXRhO1xuICAgICAgICAgIHZhciBpbmMgPSBNYXRoLlBJIC8gMTgwLjA7IC8vIDEgZGVncmVlIHJlc29sdXRpb25cblxuICAgICAgICAgIGlmIChNYXRoLmFicyhzdGFydCAtIGVuZCkgPCBpbmMpIHtcbiAgICAgICAgICAgIGluYyA9IE1hdGguYWJzKHN0YXJ0IC0gZW5kKTtcbiAgICAgICAgICB9IC8vIE5vdGU6IGZvciBwdXJwb3NlIG9mIGNhbGN1bGF0aW5nIGFyYyBsZW5ndGgsIG5vdCBnb2luZyB0byB3b3JyeSBhYm91dCByb3RhdGluZyBYLWF4aXMgYnkgYW5nbGUgcHNpXG5cblxuICAgICAgICAgIHAxID0gdGhpcy5nZXRQb2ludE9uRWxsaXB0aWNhbEFyYyhwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10sIHN0YXJ0LCAwKTtcblxuICAgICAgICAgIGlmIChkVGhldGEgPCAwKSB7XG4gICAgICAgICAgICAvLyBjbG9ja3dpc2VcbiAgICAgICAgICAgIGZvciAodCA9IHN0YXJ0IC0gaW5jOyB0ID4gZW5kOyB0IC09IGluYykge1xuICAgICAgICAgICAgICBwMiA9IHRoaXMuZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCB0LCAwKTtcbiAgICAgICAgICAgICAgbGVuICs9IHRoaXMuZ2V0TGluZUxlbmd0aChwMS54LCBwMS55LCBwMi54LCBwMi55KTtcbiAgICAgICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY291bnRlci1jbG9ja3dpc2VcbiAgICAgICAgICAgIGZvciAodCA9IHN0YXJ0ICsgaW5jOyB0IDwgZW5kOyB0ICs9IGluYykge1xuICAgICAgICAgICAgICBwMiA9IHRoaXMuZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCB0LCAwKTtcbiAgICAgICAgICAgICAgbGVuICs9IHRoaXMuZ2V0TGluZUxlbmd0aChwMS54LCBwMS55LCBwMi54LCBwMi55KTtcbiAgICAgICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwMiA9IHRoaXMuZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCBlbmQsIDApO1xuICAgICAgICAgIGxlbiArPSB0aGlzLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG4gICAgICAgICAgcmV0dXJuIGxlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgZ2V0UG9pbnRPbkxpbmUoZGlzdCwgcDF4LCBwMXksIHAyeCwgcDJ5KSB7XG4gICAgdmFyIGZyb21YID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBwMXg7XG4gICAgdmFyIGZyb21ZID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiBwMXk7XG4gICAgdmFyIG0gPSAocDJ5IC0gcDF5KSAvIChwMnggLSBwMXggKyBQU0VVRE9fWkVSTyk7XG4gICAgdmFyIHJ1biA9IE1hdGguc3FydChkaXN0ICogZGlzdCAvICgxICsgbSAqIG0pKTtcblxuICAgIGlmIChwMnggPCBwMXgpIHtcbiAgICAgIHJ1biAqPSAtMTtcbiAgICB9XG5cbiAgICB2YXIgcmlzZSA9IG0gKiBydW47XG4gICAgdmFyIHB0ID0gbnVsbDtcblxuICAgIGlmIChwMnggPT09IHAxeCkge1xuICAgICAgLy8gdmVydGljYWwgbGluZVxuICAgICAgcHQgPSB7XG4gICAgICAgIHg6IGZyb21YLFxuICAgICAgICB5OiBmcm9tWSArIHJpc2VcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICgoZnJvbVkgLSBwMXkpIC8gKGZyb21YIC0gcDF4ICsgUFNFVURPX1pFUk8pID09PSBtKSB7XG4gICAgICBwdCA9IHtcbiAgICAgICAgeDogZnJvbVggKyBydW4sXG4gICAgICAgIHk6IGZyb21ZICsgcmlzZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGl4ID0gMDtcbiAgICAgIHZhciBpeSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5nZXRMaW5lTGVuZ3RoKHAxeCwgcDF5LCBwMngsIHAyeSk7XG5cbiAgICAgIGlmIChsZW4gPCBQU0VVRE9fWkVSTykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHUgPSAoZnJvbVggLSBwMXgpICogKHAyeCAtIHAxeCkgKyAoZnJvbVkgLSBwMXkpICogKHAyeSAtIHAxeSk7XG4gICAgICB1IC89IGxlbiAqIGxlbjtcbiAgICAgIGl4ID0gcDF4ICsgdSAqIChwMnggLSBwMXgpO1xuICAgICAgaXkgPSBwMXkgKyB1ICogKHAyeSAtIHAxeSk7XG4gICAgICB2YXIgcFJpc2UgPSB0aGlzLmdldExpbmVMZW5ndGgoZnJvbVgsIGZyb21ZLCBpeCwgaXkpO1xuICAgICAgdmFyIHBSdW4gPSBNYXRoLnNxcnQoZGlzdCAqIGRpc3QgLSBwUmlzZSAqIHBSaXNlKTtcbiAgICAgIHJ1biA9IE1hdGguc3FydChwUnVuICogcFJ1biAvICgxICsgbSAqIG0pKTtcblxuICAgICAgaWYgKHAyeCA8IHAxeCkge1xuICAgICAgICBydW4gKj0gLTE7XG4gICAgICB9XG5cbiAgICAgIHJpc2UgPSBtICogcnVuO1xuICAgICAgcHQgPSB7XG4gICAgICAgIHg6IGl4ICsgcnVuLFxuICAgICAgICB5OiBpeSArIHJpc2VcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0O1xuICB9XG5cbiAgZ2V0UG9pbnRPblBhdGgoZGlzdGFuY2UpIHtcbiAgICB2YXIgZnVsbExlbiA9IHRoaXMuZ2V0UGF0aExlbmd0aCgpO1xuICAgIHZhciBjdW11bGF0aXZlUGF0aExlbmd0aCA9IDA7XG4gICAgdmFyIHAgPSBudWxsO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgLTAuMDAwMDUgfHwgZGlzdGFuY2UgLSAwLjAwMDA1ID4gZnVsbExlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHtcbiAgICAgIGRhdGFBcnJheVxuICAgIH0gPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgY29tbWFuZCBvZiBkYXRhQXJyYXkpIHtcbiAgICAgIGlmIChjb21tYW5kICYmIChjb21tYW5kLnBhdGhMZW5ndGggPCAwLjAwMDA1IHx8IGN1bXVsYXRpdmVQYXRoTGVuZ3RoICsgY29tbWFuZC5wYXRoTGVuZ3RoICsgMC4wMDAwNSA8IGRpc3RhbmNlKSkge1xuICAgICAgICBjdW11bGF0aXZlUGF0aExlbmd0aCArPSBjb21tYW5kLnBhdGhMZW5ndGg7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSBkaXN0YW5jZSAtIGN1bXVsYXRpdmVQYXRoTGVuZ3RoO1xuICAgICAgdmFyIGN1cnJlbnRUID0gMDtcblxuICAgICAgc3dpdGNoIChjb21tYW5kLnR5cGUpIHtcbiAgICAgICAgY2FzZSBQYXRoUGFyc2VyLkxJTkVfVE86XG4gICAgICAgICAgcCA9IHRoaXMuZ2V0UG9pbnRPbkxpbmUoZGVsdGEsIGNvbW1hbmQuc3RhcnQueCwgY29tbWFuZC5zdGFydC55LCBjb21tYW5kLnBvaW50c1swXSwgY29tbWFuZC5wb2ludHNbMV0sIGNvbW1hbmQuc3RhcnQueCwgY29tbWFuZC5zdGFydC55KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhdGhQYXJzZXIuQVJDOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGNvbW1hbmQucG9pbnRzWzRdOyAvLyA0ID0gdGhldGFcblxuICAgICAgICAgICAgdmFyIGRUaGV0YSA9IGNvbW1hbmQucG9pbnRzWzVdOyAvLyA1ID0gZFRoZXRhXG5cbiAgICAgICAgICAgIHZhciBlbmQgPSBjb21tYW5kLnBvaW50c1s0XSArIGRUaGV0YTtcbiAgICAgICAgICAgIGN1cnJlbnRUID0gc3RhcnQgKyBkZWx0YSAvIGNvbW1hbmQucGF0aExlbmd0aCAqIGRUaGV0YTtcblxuICAgICAgICAgICAgaWYgKGRUaGV0YSA8IDAgJiYgY3VycmVudFQgPCBlbmQgfHwgZFRoZXRhID49IDAgJiYgY3VycmVudFQgPiBlbmQpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHAgPSB0aGlzLmdldFBvaW50T25FbGxpcHRpY2FsQXJjKGNvbW1hbmQucG9pbnRzWzBdLCBjb21tYW5kLnBvaW50c1sxXSwgY29tbWFuZC5wb2ludHNbMl0sIGNvbW1hbmQucG9pbnRzWzNdLCBjdXJyZW50VCwgY29tbWFuZC5wb2ludHNbNl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5DVVJWRV9UTzpcbiAgICAgICAgICBjdXJyZW50VCA9IGRlbHRhIC8gY29tbWFuZC5wYXRoTGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnRUID4gMSkge1xuICAgICAgICAgICAgY3VycmVudFQgPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHAgPSB0aGlzLmdldFBvaW50T25DdWJpY0JlemllcihjdXJyZW50VCwgY29tbWFuZC5zdGFydC54LCBjb21tYW5kLnN0YXJ0LnksIGNvbW1hbmQucG9pbnRzWzBdLCBjb21tYW5kLnBvaW50c1sxXSwgY29tbWFuZC5wb2ludHNbMl0sIGNvbW1hbmQucG9pbnRzWzNdLCBjb21tYW5kLnBvaW50c1s0XSwgY29tbWFuZC5wb2ludHNbNV0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0aFBhcnNlci5RVUFEX1RPOlxuICAgICAgICAgIGN1cnJlbnRUID0gZGVsdGEgLyBjb21tYW5kLnBhdGhMZW5ndGg7XG5cbiAgICAgICAgICBpZiAoY3VycmVudFQgPiAxKSB7XG4gICAgICAgICAgICBjdXJyZW50VCA9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcCA9IHRoaXMuZ2V0UG9pbnRPblF1YWRyYXRpY0JlemllcihjdXJyZW50VCwgY29tbWFuZC5zdGFydC54LCBjb21tYW5kLnN0YXJ0LnksIGNvbW1hbmQucG9pbnRzWzBdLCBjb21tYW5kLnBvaW50c1sxXSwgY29tbWFuZC5wb2ludHNbMl0sIGNvbW1hbmQucG9pbnRzWzNdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHApIHtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0TGluZUxlbmd0aCh4MSwgeTEsIHgyLCB5Mikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgyIC0geDEpICogKHgyIC0geDEpICsgKHkyIC0geTEpICogKHkyIC0geTEpKTtcbiAgfVxuXG4gIGdldFBhdGhMZW5ndGgoKSB7XG4gICAgaWYgKHRoaXMucGF0aExlbmd0aCA9PT0gLTEpIHtcbiAgICAgIHRoaXMucGF0aExlbmd0aCA9IHRoaXMuZGF0YUFycmF5LnJlZHVjZSgobGVuZ3RoLCBjb21tYW5kKSA9PiBjb21tYW5kLnBhdGhMZW5ndGggPiAwID8gbGVuZ3RoICsgY29tbWFuZC5wYXRoTGVuZ3RoIDogbGVuZ3RoLCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXRoTGVuZ3RoO1xuICB9XG5cbiAgZ2V0UG9pbnRPbkN1YmljQmV6aWVyKHBjdCwgcDF4LCBwMXksIHAyeCwgcDJ5LCBwM3gsIHAzeSwgcDR4LCBwNHkpIHtcbiAgICB2YXIgeCA9IHA0eCAqIENCMShwY3QpICsgcDN4ICogQ0IyKHBjdCkgKyBwMnggKiBDQjMocGN0KSArIHAxeCAqIENCNChwY3QpO1xuICAgIHZhciB5ID0gcDR5ICogQ0IxKHBjdCkgKyBwM3kgKiBDQjIocGN0KSArIHAyeSAqIENCMyhwY3QpICsgcDF5ICogQ0I0KHBjdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfTtcbiAgfVxuXG4gIGdldFBvaW50T25RdWFkcmF0aWNCZXppZXIocGN0LCBwMXgsIHAxeSwgcDJ4LCBwMnksIHAzeCwgcDN5KSB7XG4gICAgdmFyIHggPSBwM3ggKiBRQjEocGN0KSArIHAyeCAqIFFCMihwY3QpICsgcDF4ICogUUIzKHBjdCk7XG4gICAgdmFyIHkgPSBwM3kgKiBRQjEocGN0KSArIHAyeSAqIFFCMihwY3QpICsgcDF5ICogUUIzKHBjdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfTtcbiAgfVxuXG4gIGdldFBvaW50T25FbGxpcHRpY2FsQXJjKGN4LCBjeSwgcngsIHJ5LCB0aGV0YSwgcHNpKSB7XG4gICAgdmFyIGNvc1BzaSA9IE1hdGguY29zKHBzaSk7XG4gICAgdmFyIHNpblBzaSA9IE1hdGguc2luKHBzaSk7XG4gICAgdmFyIHB0ID0ge1xuICAgICAgeDogcnggKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgICB5OiByeSAqIE1hdGguc2luKHRoZXRhKVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGN4ICsgKHB0LnggKiBjb3NQc2kgLSBwdC55ICogc2luUHNpKSxcbiAgICAgIHk6IGN5ICsgKHB0LnggKiBzaW5Qc2kgKyBwdC55ICogY29zUHNpKVxuICAgIH07XG4gIH0gLy8gVE9ETyBuZWVkIHNvbWUgb3B0aW1pc2F0aW9ucy4gcG9zc2libHkgYnVpbGQgY2FjaGUgb25seSBmb3IgY3VydmVkIHNlZ21lbnRzP1xuXG5cbiAgYnVpbGRFcXVpZGlzdGFudENhY2hlKGlucHV0U3RlcCwgaW5wdXRQcmVjaXNpb24pIHtcbiAgICB2YXIgZnVsbExlbiA9IHRoaXMuZ2V0UGF0aExlbmd0aCgpO1xuICAgIHZhciBwcmVjaXNpb24gPSBpbnB1dFByZWNpc2lvbiB8fCAwLjI1OyAvLyBhY2N1cmFjeSB2cyBwZXJmb3JtYW5jZVxuXG4gICAgdmFyIHN0ZXAgPSBpbnB1dFN0ZXAgfHwgZnVsbExlbiAvIDEwMDtcblxuICAgIGlmICghdGhpcy5lcXVpZGlzdGFudENhY2hlIHx8IHRoaXMuZXF1aWRpc3RhbnRDYWNoZS5zdGVwICE9PSBzdGVwIHx8IHRoaXMuZXF1aWRpc3RhbnRDYWNoZS5wcmVjaXNpb24gIT09IHByZWNpc2lvbikge1xuICAgICAgLy8gUHJlcGFyZSBjYWNoZVxuICAgICAgdGhpcy5lcXVpZGlzdGFudENhY2hlID0ge1xuICAgICAgICBzdGVwLFxuICAgICAgICBwcmVjaXNpb24sXG4gICAgICAgIHBvaW50czogW11cbiAgICAgIH07IC8vIENhbGN1bGF0ZSBwb2ludHNcblxuICAgICAgdmFyIHMgPSAwO1xuXG4gICAgICBmb3IgKHZhciBsID0gMDsgbCA8PSBmdWxsTGVuOyBsICs9IHByZWNpc2lvbikge1xuICAgICAgICB2YXIgcDAgPSB0aGlzLmdldFBvaW50T25QYXRoKGwpO1xuICAgICAgICB2YXIgcDEgPSB0aGlzLmdldFBvaW50T25QYXRoKGwgKyBwcmVjaXNpb24pO1xuXG4gICAgICAgIGlmICghcDAgfHwgIXAxKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzICs9IHRoaXMuZ2V0TGluZUxlbmd0aChwMC54LCBwMC55LCBwMS54LCBwMS55KTtcblxuICAgICAgICBpZiAocyA+PSBzdGVwKSB7XG4gICAgICAgICAgdGhpcy5lcXVpZGlzdGFudENhY2hlLnBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgIHg6IHAwLngsXG4gICAgICAgICAgICB5OiBwMC55LFxuICAgICAgICAgICAgZGlzdGFuY2U6IGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzIC09IHN0ZXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRFcXVpZGlzdGFudFBvaW50T25QYXRoKHRhcmdldERpc3RhbmNlLCBzdGVwLCBwcmVjaXNpb24pIHtcbiAgICB0aGlzLmJ1aWxkRXF1aWRpc3RhbnRDYWNoZShzdGVwLCBwcmVjaXNpb24pO1xuXG4gICAgaWYgKHRhcmdldERpc3RhbmNlIDwgMCB8fCB0YXJnZXREaXN0YW5jZSAtIHRoaXMuZ2V0UGF0aExlbmd0aCgpID4gMC4wMDAwNSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGlkeCA9IE1hdGgucm91bmQodGFyZ2V0RGlzdGFuY2UgLyB0aGlzLmdldFBhdGhMZW5ndGgoKSAqICh0aGlzLmVxdWlkaXN0YW50Q2FjaGUucG9pbnRzLmxlbmd0aCAtIDEpKTtcbiAgICByZXR1cm4gdGhpcy5lcXVpZGlzdGFudENhY2hlLnBvaW50c1tpZHhdIHx8IG51bGw7XG4gIH1cblxufVxuXG52YXIgZGF0YVVyaVJlZ2V4ID0gL15cXHMqZGF0YTooKFteLyw7XStcXC9bXi8sO10rKSg/OjsoW14sOz1dKz1bXiw7PV0rKSk/KT8oPzo7KGJhc2U2NCkpPywoLiopJC9pO1xuY2xhc3MgSW1hZ2VFbGVtZW50IGV4dGVuZHMgUmVuZGVyZWRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ2ltYWdlJztcbiAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xuICAgIHZhciBocmVmID0gdGhpcy5nZXRIcmVmQXR0cmlidXRlKCkuZ2V0U3RyaW5nKCk7XG5cbiAgICBpZiAoIWhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXNTdmcgPSBocmVmLmVuZHNXaXRoKCcuc3ZnJykgfHwgL15cXHMqZGF0YTppbWFnZVxcL3N2Z1xcK3htbC9pLnRlc3QoaHJlZik7XG4gICAgZG9jdW1lbnQuaW1hZ2VzLnB1c2godGhpcyk7XG5cbiAgICBpZiAoIWlzU3ZnKSB7XG4gICAgICB2b2lkIHRoaXMubG9hZEltYWdlKGhyZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2b2lkIHRoaXMubG9hZFN2ZyhocmVmKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzU3ZnID0gaXNTdmc7XG4gIH1cblxuICBsb2FkSW1hZ2UoaHJlZikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBpbWFnZSA9IHlpZWxkIF90aGlzLmRvY3VtZW50LmNyZWF0ZUltYWdlKGhyZWYpO1xuICAgICAgICBfdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSBsb2FkaW5nIGltYWdlIFxcXCJcIi5jb25jYXQoaHJlZiwgXCJcXFwiOlwiKSwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICB9KSgpO1xuICB9XG5cbiAgbG9hZFN2ZyhocmVmKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIHZhciBtYXRjaCA9IGRhdGFVcmlSZWdleC5leGVjKGhyZWYpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaFs1XTtcblxuICAgICAgICBpZiAobWF0Y2hbNF0gPT09ICdiYXNlNjQnKSB7XG4gICAgICAgICAgX3RoaXMyLmltYWdlID0gYXRvYihkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIuaW1hZ2UgPSBkZWNvZGVVUklDb21wb25lbnQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIHJlc3BvbnNlID0geWllbGQgX3RoaXMyLmRvY3VtZW50LmZldGNoKGhyZWYpO1xuICAgICAgICAgIHZhciBzdmcgPSB5aWVsZCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgX3RoaXMyLmltYWdlID0gc3ZnO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbG9hZGluZyBpbWFnZSBcXFwiXCIuY29uY2F0KGhyZWYsIFwiXFxcIjpcIiksIGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMyLmxvYWRlZCA9IHRydWU7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHJlbmRlckNoaWxkcmVuKGN0eCkge1xuICAgIHZhciB7XG4gICAgICBkb2N1bWVudCxcbiAgICAgIGltYWdlLFxuICAgICAgbG9hZGVkXG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHggPSB0aGlzLmdldEF0dHJpYnV0ZSgneCcpLmdldFBpeGVscygneCcpO1xuICAgIHZhciB5ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3knKS5nZXRQaXhlbHMoJ3knKTtcbiAgICB2YXIgd2lkdGggPSB0aGlzLmdldFN0eWxlKCd3aWR0aCcpLmdldFBpeGVscygneCcpO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmdldFN0eWxlKCdoZWlnaHQnKS5nZXRQaXhlbHMoJ3knKTtcblxuICAgIGlmICghbG9hZGVkIHx8ICFpbWFnZSB8fCAhd2lkdGggfHwgIWhlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcblxuICAgIGlmICh0aGlzLmlzU3ZnKSB7XG4gICAgICB2YXIgc3ViRG9jdW1lbnQgPSBkb2N1bWVudC5jYW52Zy5mb3JrU3RyaW5nKGN0eCwgdGhpcy5pbWFnZSwge1xuICAgICAgICBpZ25vcmVNb3VzZTogdHJ1ZSxcbiAgICAgICAgaWdub3JlQW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICBpZ25vcmVEaW1lbnNpb25zOiB0cnVlLFxuICAgICAgICBpZ25vcmVDbGVhcjogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgc2NhbGVXaWR0aDogd2lkdGgsXG4gICAgICAgIHNjYWxlSGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0pO1xuICAgICAgc3ViRG9jdW1lbnQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnBhcmVudCA9IHRoaXM7XG4gICAgICB2b2lkIHN1YkRvY3VtZW50LnJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2ltYWdlID0gdGhpcy5pbWFnZTtcbiAgICAgIGRvY3VtZW50LnNldFZpZXdCb3goe1xuICAgICAgICBjdHgsXG4gICAgICAgIGFzcGVjdFJhdGlvOiB0aGlzLmdldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycpLmdldFN0cmluZygpLFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgZGVzaXJlZFdpZHRoOiBfaW1hZ2Uud2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgZGVzaXJlZEhlaWdodDogX2ltYWdlLmhlaWdodFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmxvYWRlZCkge1xuICAgICAgICBpZiAodHlwZW9mIF9pbWFnZS5jb21wbGV0ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgX2ltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgY3R4LmRyYXdJbWFnZShfaW1hZ2UsIDAsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIGdldEJvdW5kaW5nQm94KCkge1xuICAgIHZhciB4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3gnKS5nZXRQaXhlbHMoJ3gnKTtcbiAgICB2YXIgeSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd5JykuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgdmFyIHdpZHRoID0gdGhpcy5nZXRTdHlsZSgnd2lkdGgnKS5nZXRQaXhlbHMoJ3gnKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5nZXRTdHlsZSgnaGVpZ2h0JykuZ2V0UGl4ZWxzKCd5Jyk7XG4gICAgcmV0dXJuIG5ldyBCb3VuZGluZ0JveCh4LCB5LCB4ICsgd2lkdGgsIHkgKyBoZWlnaHQpO1xuICB9XG5cbn1cblxuY2xhc3MgU3ltYm9sRWxlbWVudCBleHRlbmRzIFJlbmRlcmVkRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ3N5bWJvbCc7XG4gIH1cblxuICByZW5kZXIoXykgey8vIE5PIFJFTkRFUlxuICB9XG5cbn1cblxuY2xhc3MgU1ZHRm9udExvYWRlciB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50KSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgZG9jdW1lbnQuZm9udHMucHVzaCh0aGlzKTtcbiAgfVxuXG4gIGxvYWQoZm9udEZhbWlseSwgdXJsKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHtcbiAgICAgICAgICBkb2N1bWVudFxuICAgICAgICB9ID0gX3RoaXM7XG4gICAgICAgIHZhciBzdmdEb2N1bWVudCA9IHlpZWxkIGRvY3VtZW50LmNhbnZnLnBhcnNlci5sb2FkKHVybCk7XG4gICAgICAgIHZhciBmb250cyA9IHN2Z0RvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmb250Jyk7XG4gICAgICAgIEFycmF5LmZyb20oZm9udHMpLmZvckVhY2goZm9udE5vZGUgPT4ge1xuICAgICAgICAgIHZhciBmb250ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChmb250Tm9kZSk7XG4gICAgICAgICAgZG9jdW1lbnQuZGVmaW5pdGlvbnNbZm9udEZhbWlseV0gPSBmb250O1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbG9hZGluZyBmb250IFxcXCJcIi5jb25jYXQodXJsLCBcIlxcXCI6XCIpLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgIH0pKCk7XG4gIH1cblxufVxuXG5jbGFzcyBTdHlsZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB2YXIgY3NzID0gY29tcHJlc3NTcGFjZXMoQXJyYXkuZnJvbShub2RlLmNoaWxkTm9kZXMpIC8vIE5FRUQgVEVTVFxuICAgIC5tYXAoXyA9PiBfLnRleHRDb250ZW50KS5qb2luKCcnKS5yZXBsYWNlKC8oXFwvXFwqKFteKl18W1xcclxcbl18KFxcKisoW14qL118W1xcclxcbl0pKSkqXFwqK1xcLyl8KF5bXFxzXSpcXC9cXC8uKikvZ20sICcnKSAvLyByZW1vdmUgY29tbWVudHNcbiAgICAucmVwbGFjZSgvQGltcG9ydC4qOy9nLCAnJykgLy8gcmVtb3ZlIGltcG9ydHNcbiAgICApO1xuICAgIHZhciBjc3NEZWZzID0gY3NzLnNwbGl0KCd9Jyk7XG4gICAgY3NzRGVmcy5mb3JFYWNoKF8gPT4ge1xuICAgICAgdmFyIGRlZiA9IF8udHJpbSgpO1xuXG4gICAgICBpZiAoIWRlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjc3NQYXJ0cyA9IGRlZi5zcGxpdCgneycpO1xuICAgICAgdmFyIGNzc0NsYXNzZXMgPSBjc3NQYXJ0c1swXS5zcGxpdCgnLCcpO1xuICAgICAgdmFyIGNzc1Byb3BzID0gY3NzUGFydHNbMV0uc3BsaXQoJzsnKTtcbiAgICAgIGNzc0NsYXNzZXMuZm9yRWFjaChfID0+IHtcbiAgICAgICAgdmFyIGNzc0NsYXNzID0gXy50cmltKCk7XG5cbiAgICAgICAgaWYgKCFjc3NDbGFzcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wcyA9IGRvY3VtZW50LnN0eWxlc1tjc3NDbGFzc10gfHwge307XG4gICAgICAgIGNzc1Byb3BzLmZvckVhY2goY3NzUHJvcCA9PiB7XG4gICAgICAgICAgdmFyIHByb3AgPSBjc3NQcm9wLmluZGV4T2YoJzonKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IGNzc1Byb3Auc3Vic3RyKDAsIHByb3ApLnRyaW0oKTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjc3NQcm9wLnN1YnN0cihwcm9wICsgMSwgY3NzUHJvcC5sZW5ndGggLSBwcm9wKS50cmltKCk7XG5cbiAgICAgICAgICBpZiAobmFtZSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgcHJvcHNbbmFtZV0gPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5zdHlsZXNbY3NzQ2xhc3NdID0gcHJvcHM7XG4gICAgICAgIGRvY3VtZW50LnN0eWxlc1NwZWNpZmljaXR5W2Nzc0NsYXNzXSA9IGdldFNlbGVjdG9yU3BlY2lmaWNpdHkoY3NzQ2xhc3MpO1xuXG4gICAgICAgIGlmIChjc3NDbGFzcyA9PT0gJ0Bmb250LWZhY2UnKSB7XG4gICAgICAgICAgLy8gICYmICFub2RlRW52XG4gICAgICAgICAgdmFyIGZvbnRGYW1pbHkgPSBwcm9wc1snZm9udC1mYW1pbHknXS5nZXRTdHJpbmcoKS5yZXBsYWNlKC9cInwnL2csICcnKTtcbiAgICAgICAgICB2YXIgc3JjcyA9IHByb3BzLnNyYy5nZXRTdHJpbmcoKS5zcGxpdCgnLCcpO1xuICAgICAgICAgIHNyY3MuZm9yRWFjaChzcmMgPT4ge1xuICAgICAgICAgICAgaWYgKHNyYy5pbmRleE9mKCdmb3JtYXQoXCJzdmdcIiknKSA+IDApIHtcbiAgICAgICAgICAgICAgdmFyIHVybCA9IHBhcnNlRXh0ZXJuYWxVcmwoc3JjKTtcblxuICAgICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICAgdm9pZCBuZXcgU1ZHRm9udExvYWRlcihkb2N1bWVudCkubG9hZChmb250RmFtaWx5LCB1cmwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cblN0eWxlRWxlbWVudC5wYXJzZUV4dGVybmFsVXJsID0gcGFyc2VFeHRlcm5hbFVybDtcblxuY2xhc3MgVXNlRWxlbWVudCBleHRlbmRzIFJlbmRlcmVkRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy50eXBlID0gJ3VzZSc7XG4gIH1cblxuICBzZXRDb250ZXh0KGN0eCkge1xuICAgIHN1cGVyLnNldENvbnRleHQoY3R4KTtcbiAgICB2YXIgeEF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZSgneCcpO1xuICAgIHZhciB5QXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCd5Jyk7XG5cbiAgICBpZiAoeEF0dHIuaGFzVmFsdWUoKSkge1xuICAgICAgY3R4LnRyYW5zbGF0ZSh4QXR0ci5nZXRQaXhlbHMoJ3gnKSwgMCk7XG4gICAgfVxuXG4gICAgaWYgKHlBdHRyLmhhc1ZhbHVlKCkpIHtcbiAgICAgIGN0eC50cmFuc2xhdGUoMCwgeUF0dHIuZ2V0UGl4ZWxzKCd5JykpO1xuICAgIH1cbiAgfVxuXG4gIHBhdGgoY3R4KSB7XG4gICAgdmFyIHtcbiAgICAgIGVsZW1lbnRcbiAgICB9ID0gdGhpcztcblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LnBhdGgoY3R4KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJDaGlsZHJlbihjdHgpIHtcbiAgICB2YXIge1xuICAgICAgZG9jdW1lbnQsXG4gICAgICBlbGVtZW50XG4gICAgfSA9IHRoaXM7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdmFyIHRlbXBTdmcgPSBlbGVtZW50O1xuXG4gICAgICBpZiAoZWxlbWVudC50eXBlID09PSAnc3ltYm9sJykge1xuICAgICAgICAvLyByZW5kZXIgbWUgdXNpbmcgYSB0ZW1wb3Jhcnkgc3ZnIGVsZW1lbnQgaW4gc3ltYm9sIGNhc2VzIChodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvc3RydWN0Lmh0bWwjVXNlRWxlbWVudClcbiAgICAgICAgdGVtcFN2ZyA9IG5ldyBTVkdFbGVtZW50KGRvY3VtZW50LCBudWxsKTtcbiAgICAgICAgdGVtcFN2Zy5hdHRyaWJ1dGVzLnZpZXdCb3ggPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICd2aWV3Qm94JywgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKS5nZXRTdHJpbmcoKSk7XG4gICAgICAgIHRlbXBTdmcuYXR0cmlidXRlcy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAncHJlc2VydmVBc3BlY3RSYXRpbycsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJykuZ2V0U3RyaW5nKCkpO1xuICAgICAgICB0ZW1wU3ZnLmF0dHJpYnV0ZXMub3ZlcmZsb3cgPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICdvdmVyZmxvdycsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdvdmVyZmxvdycpLmdldFN0cmluZygpKTtcbiAgICAgICAgdGVtcFN2Zy5jaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47IC8vIGVsZW1lbnQgaXMgc3RpbGwgdGhlIHBhcmVudCBvZiB0aGUgY2hpbGRyZW5cblxuICAgICAgICBlbGVtZW50LnN0eWxlcy5vcGFjaXR5ID0gbmV3IFByb3BlcnR5KGRvY3VtZW50LCAnb3BhY2l0eScsIHRoaXMuY2FsY3VsYXRlT3BhY2l0eSgpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRlbXBTdmcudHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdmFyIHdpZHRoU3R5bGUgPSB0aGlzLmdldFN0eWxlKCd3aWR0aCcsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgdmFyIGhlaWdodFN0eWxlID0gdGhpcy5nZXRTdHlsZSgnaGVpZ2h0JywgZmFsc2UsIHRydWUpOyAvLyBpZiBzeW1ib2wgb3Igc3ZnLCBpbmhlcml0IHdpZHRoL2hlaWdodCBmcm9tIG1lXG5cbiAgICAgICAgaWYgKHdpZHRoU3R5bGUuaGFzVmFsdWUoKSkge1xuICAgICAgICAgIHRlbXBTdmcuYXR0cmlidXRlcy53aWR0aCA9IG5ldyBQcm9wZXJ0eShkb2N1bWVudCwgJ3dpZHRoJywgd2lkdGhTdHlsZS5nZXRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGVpZ2h0U3R5bGUuaGFzVmFsdWUoKSkge1xuICAgICAgICAgIHRlbXBTdmcuYXR0cmlidXRlcy5oZWlnaHQgPSBuZXcgUHJvcGVydHkoZG9jdW1lbnQsICdoZWlnaHQnLCBoZWlnaHRTdHlsZS5nZXRTdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG9sZFBhcmVudCA9IHRlbXBTdmcucGFyZW50O1xuICAgICAgdGVtcFN2Zy5wYXJlbnQgPSB0aGlzO1xuICAgICAgdGVtcFN2Zy5yZW5kZXIoY3R4KTtcbiAgICAgIHRlbXBTdmcucGFyZW50ID0gb2xkUGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIGdldEJvdW5kaW5nQm94KGN0eCkge1xuICAgIHZhciB7XG4gICAgICBlbGVtZW50XG4gICAgfSA9IHRoaXM7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0Qm91bmRpbmdCb3goY3R4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGVsZW1lbnRUcmFuc2Zvcm0oKSB7XG4gICAgdmFyIHtcbiAgICAgIGRvY3VtZW50LFxuICAgICAgZWxlbWVudFxuICAgIH0gPSB0aGlzO1xuICAgIHJldHVybiBUcmFuc2Zvcm0uZnJvbUVsZW1lbnQoZG9jdW1lbnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLmNhY2hlZEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuY2FjaGVkRWxlbWVudCA9IHRoaXMuZ2V0SHJlZkF0dHJpYnV0ZSgpLmdldERlZmluaXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jYWNoZWRFbGVtZW50O1xuICB9XG5cbn1cblxuZnVuY3Rpb24gaW1HZXQoaW1nLCB4LCB5LCB3aWR0aCwgX2hlaWdodCwgcmdiYSkge1xuICByZXR1cm4gaW1nW3kgKiB3aWR0aCAqIDQgKyB4ICogNCArIHJnYmFdO1xufVxuXG5mdW5jdGlvbiBpbVNldChpbWcsIHgsIHksIHdpZHRoLCBfaGVpZ2h0LCByZ2JhLCB2YWwpIHtcbiAgaW1nW3kgKiB3aWR0aCAqIDQgKyB4ICogNCArIHJnYmFdID0gdmFsO1xufVxuXG5mdW5jdGlvbiBtKG1hdHJpeCwgaSwgdikge1xuICB2YXIgbWkgPSBtYXRyaXhbaV07XG4gIHJldHVybiBtaSAqIHY7XG59XG5cbmZ1bmN0aW9uIGMoYSwgbTEsIG0yLCBtMykge1xuICByZXR1cm4gbTEgKyBNYXRoLmNvcyhhKSAqIG0yICsgTWF0aC5zaW4oYSkgKiBtMztcbn1cblxuY2xhc3MgRmVDb2xvck1hdHJpeEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ2ZlQ29sb3JNYXRyaXgnO1xuICAgIHZhciBtYXRyaXggPSB0b051bWJlcnModGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlcycpLmdldFN0cmluZygpKTtcblxuICAgIHN3aXRjaCAodGhpcy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKS5nZXRTdHJpbmcoJ21hdHJpeCcpKSB7XG4gICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvZmlsdGVycy5odG1sI2ZlQ29sb3JNYXRyaXhFbGVtZW50XG4gICAgICBjYXNlICdzYXR1cmF0ZSc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgcyA9IG1hdHJpeFswXTtcbiAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBhcnJheS1lbGVtZW50LW5ld2xpbmUgKi9cblxuICAgICAgICAgIG1hdHJpeCA9IFswLjIxMyArIDAuNzg3ICogcywgMC43MTUgLSAwLjcxNSAqIHMsIDAuMDcyIC0gMC4wNzIgKiBzLCAwLCAwLCAwLjIxMyAtIDAuMjEzICogcywgMC43MTUgKyAwLjI4NSAqIHMsIDAuMDcyIC0gMC4wNzIgKiBzLCAwLCAwLCAwLjIxMyAtIDAuMjEzICogcywgMC43MTUgLSAwLjcxNSAqIHMsIDAuMDcyICsgMC45MjggKiBzLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAxXTtcbiAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGFycmF5LWVsZW1lbnQtbmV3bGluZSAqL1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnaHVlUm90YXRlJzpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBhID0gbWF0cml4WzBdICogTWF0aC5QSSAvIDE4MC4wO1xuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGFycmF5LWVsZW1lbnQtbmV3bGluZSAqL1xuXG4gICAgICAgICAgbWF0cml4ID0gW2MoYSwgMC4yMTMsIDAuNzg3LCAtMC4yMTMpLCBjKGEsIDAuNzE1LCAtMC43MTUsIC0wLjcxNSksIGMoYSwgMC4wNzIsIC0wLjA3MiwgMC45MjgpLCAwLCAwLCBjKGEsIDAuMjEzLCAtMC4yMTMsIDAuMTQzKSwgYyhhLCAwLjcxNSwgMC4yODUsIDAuMTQwKSwgYyhhLCAwLjA3MiwgLTAuMDcyLCAtMC4yODMpLCAwLCAwLCBjKGEsIDAuMjEzLCAtMC4yMTMsIC0wLjc4NyksIGMoYSwgMC43MTUsIC0wLjcxNSwgMC43MTUpLCBjKGEsIDAuMDcyLCAwLjkyOCwgMC4wNzIpLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAxXTtcbiAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGFycmF5LWVsZW1lbnQtbmV3bGluZSAqL1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnbHVtaW5hbmNlVG9BbHBoYSc6XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGFycmF5LWVsZW1lbnQtbmV3bGluZSAqL1xuICAgICAgICBtYXRyaXggPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMC4yMTI1LCAwLjcxNTQsIDAuMDcyMSwgMCwgMCwgMCwgMCwgMCwgMCwgMV07XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgYXJyYXktZWxlbWVudC1uZXdsaW5lICovXG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgdGhpcy5pbmNsdWRlT3BhY2l0eSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdpbmNsdWRlT3BhY2l0eScpLmhhc1ZhbHVlKCk7XG4gIH1cblxuICBhcHBseShjdHgsIF94LCBfeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIC8vIGFzc3VtaW5nIHg9PTAgJiYgeT09MCBmb3Igbm93XG4gICAgdmFyIHtcbiAgICAgIGluY2x1ZGVPcGFjaXR5LFxuICAgICAgbWF0cml4XG4gICAgfSA9IHRoaXM7XG4gICAgdmFyIHNyY0RhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIHZhciByID0gaW1HZXQoc3JjRGF0YS5kYXRhLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAwKTtcbiAgICAgICAgdmFyIGcgPSBpbUdldChzcmNEYXRhLmRhdGEsIHgsIHksIHdpZHRoLCBoZWlnaHQsIDEpO1xuICAgICAgICB2YXIgYiA9IGltR2V0KHNyY0RhdGEuZGF0YSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgMik7XG4gICAgICAgIHZhciBhID0gaW1HZXQoc3JjRGF0YS5kYXRhLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAzKTtcbiAgICAgICAgdmFyIG5yID0gbShtYXRyaXgsIDAsIHIpICsgbShtYXRyaXgsIDEsIGcpICsgbShtYXRyaXgsIDIsIGIpICsgbShtYXRyaXgsIDMsIGEpICsgbShtYXRyaXgsIDQsIDEpO1xuICAgICAgICB2YXIgbmcgPSBtKG1hdHJpeCwgNSwgcikgKyBtKG1hdHJpeCwgNiwgZykgKyBtKG1hdHJpeCwgNywgYikgKyBtKG1hdHJpeCwgOCwgYSkgKyBtKG1hdHJpeCwgOSwgMSk7XG4gICAgICAgIHZhciBuYiA9IG0obWF0cml4LCAxMCwgcikgKyBtKG1hdHJpeCwgMTEsIGcpICsgbShtYXRyaXgsIDEyLCBiKSArIG0obWF0cml4LCAxMywgYSkgKyBtKG1hdHJpeCwgMTQsIDEpO1xuICAgICAgICB2YXIgbmEgPSBtKG1hdHJpeCwgMTUsIHIpICsgbShtYXRyaXgsIDE2LCBnKSArIG0obWF0cml4LCAxNywgYikgKyBtKG1hdHJpeCwgMTgsIGEpICsgbShtYXRyaXgsIDE5LCAxKTtcblxuICAgICAgICBpZiAoaW5jbHVkZU9wYWNpdHkpIHtcbiAgICAgICAgICBuciA9IDA7XG4gICAgICAgICAgbmcgPSAwO1xuICAgICAgICAgIG5iID0gMDtcbiAgICAgICAgICBuYSAqPSBhIC8gMjU1O1xuICAgICAgICB9XG5cbiAgICAgICAgaW1TZXQoc3JjRGF0YS5kYXRhLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAwLCBucik7XG4gICAgICAgIGltU2V0KHNyY0RhdGEuZGF0YSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgMSwgbmcpO1xuICAgICAgICBpbVNldChzcmNEYXRhLmRhdGEsIHgsIHksIHdpZHRoLCBoZWlnaHQsIDIsIG5iKTtcbiAgICAgICAgaW1TZXQoc3JjRGF0YS5kYXRhLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAzLCBuYSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBjdHgucHV0SW1hZ2VEYXRhKHNyY0RhdGEsIDAsIDApO1xuICB9XG5cbn1cblxuY2xhc3MgTWFza0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnR5cGUgPSAnbWFzayc7XG4gIH1cblxuICBhcHBseShjdHgsIGVsZW1lbnQpIHtcbiAgICB2YXIge1xuICAgICAgZG9jdW1lbnRcbiAgICB9ID0gdGhpczsgLy8gcmVuZGVyIGFzIHRlbXAgc3ZnXG5cbiAgICB2YXIgeCA9IHRoaXMuZ2V0QXR0cmlidXRlKCd4JykuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIHkgPSB0aGlzLmdldEF0dHJpYnV0ZSgneScpLmdldFBpeGVscygneScpO1xuICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0U3R5bGUoJ3dpZHRoJykuZ2V0UGl4ZWxzKCd4Jyk7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuZ2V0U3R5bGUoJ2hlaWdodCcpLmdldFBpeGVscygneScpO1xuXG4gICAgaWYgKCF3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgICB2YXIgYm91bmRpbmdCb3ggPSBuZXcgQm91bmRpbmdCb3goKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGJvdW5kaW5nQm94LmFkZEJvdW5kaW5nQm94KGNoaWxkLmdldEJvdW5kaW5nQm94KGN0eCkpO1xuICAgICAgfSk7XG4gICAgICB4ID0gTWF0aC5mbG9vcihib3VuZGluZ0JveC54MSk7XG4gICAgICB5ID0gTWF0aC5mbG9vcihib3VuZGluZ0JveC55MSk7XG4gICAgICB3aWR0aCA9IE1hdGguZmxvb3IoYm91bmRpbmdCb3gud2lkdGgpO1xuICAgICAgaGVpZ2h0ID0gTWF0aC5mbG9vcihib3VuZGluZ0JveC5oZWlnaHQpO1xuICAgIH1cblxuICAgIHZhciBpZ25vcmVkU3R5bGVzID0gdGhpcy5yZW1vdmVTdHlsZXMoZWxlbWVudCwgTWFza0VsZW1lbnQuaWdub3JlU3R5bGVzKTtcbiAgICB2YXIgbWFza0NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUNhbnZhcyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQpO1xuICAgIHZhciBtYXNrQ3R4ID0gbWFza0NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGRvY3VtZW50LnNjcmVlbi5zZXREZWZhdWx0cyhtYXNrQ3R4KTtcbiAgICB0aGlzLnJlbmRlckNoaWxkcmVuKG1hc2tDdHgpOyAvLyBjb252ZXJ0IG1hc2sgdG8gYWxwaGEgd2l0aCBhIGZha2Ugbm9kZVxuICAgIC8vIFRPRE86IHJlZmFjdG9yIG91dCBhcHBseSBmcm9tIGZlQ29sb3JNYXRyaXhcblxuICAgIG5ldyBGZUNvbG9yTWF0cml4RWxlbWVudChkb2N1bWVudCwge1xuICAgICAgbm9kZVR5cGU6IDEsXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIGF0dHJpYnV0ZXM6IFt7XG4gICAgICAgIG5vZGVOYW1lOiAndHlwZScsXG4gICAgICAgIHZhbHVlOiAnbHVtaW5hbmNlVG9BbHBoYSdcbiAgICAgIH0sIHtcbiAgICAgICAgbm9kZU5hbWU6ICdpbmNsdWRlT3BhY2l0eScsXG4gICAgICAgIHZhbHVlOiAndHJ1ZSdcbiAgICAgIH1dXG4gICAgfSkuYXBwbHkobWFza0N0eCwgMCwgMCwgeCArIHdpZHRoLCB5ICsgaGVpZ2h0KTtcbiAgICB2YXIgdG1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlQ2FudmFzKHggKyB3aWR0aCwgeSArIGhlaWdodCk7XG4gICAgdmFyIHRtcEN0eCA9IHRtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGRvY3VtZW50LnNjcmVlbi5zZXREZWZhdWx0cyh0bXBDdHgpO1xuICAgIGVsZW1lbnQucmVuZGVyKHRtcEN0eCk7XG4gICAgdG1wQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1pbic7XG4gICAgdG1wQ3R4LmZpbGxTdHlsZSA9IG1hc2tDdHguY3JlYXRlUGF0dGVybihtYXNrQ2FudmFzLCAnbm8tcmVwZWF0Jyk7XG4gICAgdG1wQ3R4LmZpbGxSZWN0KDAsIDAsIHggKyB3aWR0aCwgeSArIGhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRtcEN0eC5jcmVhdGVQYXR0ZXJuKHRtcENhbnZhcywgJ25vLXJlcGVhdCcpO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCB4ICsgd2lkdGgsIHkgKyBoZWlnaHQpOyAvLyByZWFzc2lnbiBtYXNrXG5cbiAgICB0aGlzLnJlc3RvcmVTdHlsZXMoZWxlbWVudCwgaWdub3JlZFN0eWxlcyk7XG4gIH1cblxuICByZW5kZXIoXykgey8vIE5PIFJFTkRFUlxuICB9XG5cbn1cbk1hc2tFbGVtZW50Lmlnbm9yZVN0eWxlcyA9IFsnbWFzaycsICd0cmFuc2Zvcm0nLCAnY2xpcC1wYXRoJ107XG5cbnZhciBub29wID0gKCkgPT4gey8vIE5PT1Bcbn07XG5cbmNsYXNzIENsaXBQYXRoRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdjbGlwUGF0aCc7XG4gIH1cblxuICBhcHBseShjdHgpIHtcbiAgICB2YXIge1xuICAgICAgZG9jdW1lbnRcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgY29udGV4dFByb3RvID0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihjdHgpO1xuICAgIHZhciB7XG4gICAgICBiZWdpblBhdGgsXG4gICAgICBjbG9zZVBhdGhcbiAgICB9ID0gY3R4O1xuXG4gICAgaWYgKGNvbnRleHRQcm90bykge1xuICAgICAgY29udGV4dFByb3RvLmJlZ2luUGF0aCA9IG5vb3A7XG4gICAgICBjb250ZXh0UHJvdG8uY2xvc2VQYXRoID0gbm9vcDtcbiAgICB9XG5cbiAgICBSZWZsZWN0LmFwcGx5KGJlZ2luUGF0aCwgY3R4LCBbXSk7XG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGQucGF0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNmb3JtID0gdHlwZW9mIGNoaWxkLmVsZW1lbnRUcmFuc2Zvcm0gIT09ICd1bmRlZmluZWQnID8gY2hpbGQuZWxlbWVudFRyYW5zZm9ybSgpIDogbnVsbDsgLy8gaGFuZGxlIDx1c2UgLz5cblxuICAgICAgaWYgKCF0cmFuc2Zvcm0pIHtcbiAgICAgICAgdHJhbnNmb3JtID0gVHJhbnNmb3JtLmZyb21FbGVtZW50KGRvY3VtZW50LCBjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgdHJhbnNmb3JtLmFwcGx5KGN0eCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkLnBhdGgoY3R4KTtcblxuICAgICAgaWYgKGNvbnRleHRQcm90bykge1xuICAgICAgICBjb250ZXh0UHJvdG8uY2xvc2VQYXRoID0gY2xvc2VQYXRoO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIHRyYW5zZm9ybS51bmFwcGx5KGN0eCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgUmVmbGVjdC5hcHBseShjbG9zZVBhdGgsIGN0eCwgW10pO1xuICAgIGN0eC5jbGlwKCk7XG5cbiAgICBpZiAoY29udGV4dFByb3RvKSB7XG4gICAgICBjb250ZXh0UHJvdG8uYmVnaW5QYXRoID0gYmVnaW5QYXRoO1xuICAgICAgY29udGV4dFByb3RvLmNsb3NlUGF0aCA9IGNsb3NlUGF0aDtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoXykgey8vIE5PIFJFTkRFUlxuICB9XG5cbn1cblxuY2xhc3MgRmlsdGVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdmaWx0ZXInO1xuICB9XG5cbiAgYXBwbHkoY3R4LCBlbGVtZW50KSB7XG4gICAgLy8gcmVuZGVyIGFzIHRlbXAgc3ZnXG4gICAgdmFyIHtcbiAgICAgIGRvY3VtZW50LFxuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gdGhpcztcbiAgICB2YXIgYm91bmRpbmdCb3ggPSBlbGVtZW50LmdldEJvdW5kaW5nQm94KGN0eCk7XG5cbiAgICBpZiAoIWJvdW5kaW5nQm94KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHB4ID0gMDtcbiAgICB2YXIgcHkgPSAwO1xuICAgIGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgdmFyIGVmZCA9IGNoaWxkLmV4dHJhRmlsdGVyRGlzdGFuY2UgfHwgMDtcbiAgICAgIHB4ID0gTWF0aC5tYXgocHgsIGVmZCk7XG4gICAgICBweSA9IE1hdGgubWF4KHB5LCBlZmQpO1xuICAgIH0pO1xuICAgIHZhciB3aWR0aCA9IE1hdGguZmxvb3IoYm91bmRpbmdCb3gud2lkdGgpO1xuICAgIHZhciBoZWlnaHQgPSBNYXRoLmZsb29yKGJvdW5kaW5nQm94LmhlaWdodCk7XG4gICAgdmFyIHRtcENhbnZhc1dpZHRoID0gd2lkdGggKyAyICogcHg7XG4gICAgdmFyIHRtcENhbnZhc0hlaWdodCA9IGhlaWdodCArIDIgKiBweTtcblxuICAgIGlmICh0bXBDYW52YXNXaWR0aCA8IDEgfHwgdG1wQ2FudmFzSGVpZ2h0IDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB4ID0gTWF0aC5mbG9vcihib3VuZGluZ0JveC54KTtcbiAgICB2YXIgeSA9IE1hdGguZmxvb3IoYm91bmRpbmdCb3gueSk7XG4gICAgdmFyIGlnbm9yZWRTdHlsZXMgPSB0aGlzLnJlbW92ZVN0eWxlcyhlbGVtZW50LCBGaWx0ZXJFbGVtZW50Lmlnbm9yZVN0eWxlcyk7XG4gICAgdmFyIHRtcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUNhbnZhcyh0bXBDYW52YXNXaWR0aCwgdG1wQ2FudmFzSGVpZ2h0KTtcbiAgICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgZG9jdW1lbnQuc2NyZWVuLnNldERlZmF1bHRzKHRtcEN0eCk7XG4gICAgdG1wQ3R4LnRyYW5zbGF0ZSgteCArIHB4LCAteSArIHB5KTtcbiAgICBlbGVtZW50LnJlbmRlcih0bXBDdHgpOyAvLyBhcHBseSBmaWx0ZXJzXG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGQuYXBwbHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2hpbGQuYXBwbHkodG1wQ3R4LCAwLCAwLCB0bXBDYW52YXNXaWR0aCwgdG1wQ2FudmFzSGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9KTsgLy8gcmVuZGVyIG9uIG1lXG5cbiAgICBjdHguZHJhd0ltYWdlKHRtcENhbnZhcywgMCwgMCwgdG1wQ2FudmFzV2lkdGgsIHRtcENhbnZhc0hlaWdodCwgeCAtIHB4LCB5IC0gcHksIHRtcENhbnZhc1dpZHRoLCB0bXBDYW52YXNIZWlnaHQpO1xuICAgIHRoaXMucmVzdG9yZVN0eWxlcyhlbGVtZW50LCBpZ25vcmVkU3R5bGVzKTtcbiAgfVxuXG4gIHJlbmRlcihfKSB7Ly8gTk8gUkVOREVSXG4gIH1cblxufVxuRmlsdGVyRWxlbWVudC5pZ25vcmVTdHlsZXMgPSBbJ2ZpbHRlcicsICd0cmFuc2Zvcm0nLCAnY2xpcC1wYXRoJ107XG5cbmNsYXNzIEZlRHJvcFNoYWRvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpIHtcbiAgICBzdXBlcihkb2N1bWVudCwgbm9kZSwgY2FwdHVyZVRleHROb2Rlcyk7XG4gICAgdGhpcy50eXBlID0gJ2ZlRHJvcFNoYWRvdyc7XG4gICAgdGhpcy5hZGRTdHlsZXNGcm9tU3R5bGVEZWZpbml0aW9uKCk7XG4gIH1cblxuICBhcHBseShfLCBfeCwgX3ksIF93aWR0aCwgX2hlaWdodCkgey8vIFRPRE86IGltcGxlbWVudFxuICB9XG5cbn1cblxuY2xhc3MgRmVNb3JwaG9sb2d5RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdmZU1vcnBob2xvZ3knO1xuICB9XG5cbiAgYXBwbHkoXywgX3gsIF95LCBfd2lkdGgsIF9oZWlnaHQpIHsvLyBUT0RPOiBpbXBsZW1lbnRcbiAgfVxuXG59XG5cbmNsYXNzIEZlQ29tcG9zaXRlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdmZUNvbXBvc2l0ZSc7XG4gIH1cblxuICBhcHBseShfLCBfeCwgX3ksIF93aWR0aCwgX2hlaWdodCkgey8vIFRPRE86IGltcGxlbWVudFxuICB9XG5cbn1cblxuY2xhc3MgRmVHYXVzc2lhbkJsdXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50LCBub2RlLCBjYXB0dXJlVGV4dE5vZGVzKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQsIG5vZGUsIGNhcHR1cmVUZXh0Tm9kZXMpO1xuICAgIHRoaXMudHlwZSA9ICdmZUdhdXNzaWFuQmx1cic7XG4gICAgdGhpcy5ibHVyUmFkaXVzID0gTWF0aC5mbG9vcih0aGlzLmdldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJykuZ2V0TnVtYmVyKCkpO1xuICAgIHRoaXMuZXh0cmFGaWx0ZXJEaXN0YW5jZSA9IHRoaXMuYmx1clJhZGl1cztcbiAgfVxuXG4gIGFwcGx5KGN0eCwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHZhciB7XG4gICAgICBkb2N1bWVudCxcbiAgICAgIGJsdXJSYWRpdXNcbiAgICB9ID0gdGhpcztcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LndpbmRvdyA/IGRvY3VtZW50LndpbmRvdy5kb2N1bWVudC5ib2R5IDogbnVsbDtcbiAgICB2YXIgY2FudmFzID0gY3R4LmNhbnZhczsgLy8gU3RhY2tCbHVyIHJlcXVpcmVzIGNhbnZhcyBiZSBvbiBkb2N1bWVudFxuXG4gICAgY2FudmFzLmlkID0gZG9jdW1lbnQuZ2V0VW5pcXVlSWQoKTtcblxuICAgIGlmIChib2R5KSB7XG4gICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICB9XG5cbiAgICBjYW52YXNSR0JBKGNhbnZhcywgeCwgeSwgd2lkdGgsIGhlaWdodCwgYmx1clJhZGl1cyk7XG5cbiAgICBpZiAoYm9keSkge1xuICAgICAgYm9keS5yZW1vdmVDaGlsZChjYW52YXMpO1xuICAgIH1cbiAgfVxuXG59XG5cbmNsYXNzIFRpdGxlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICd0aXRsZSc7XG4gIH1cblxufVxuXG5jbGFzcyBEZXNjRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHlwZSA9ICdkZXNjJztcbiAgfVxuXG59XG5cbnZhciBlbGVtZW50cyA9IHtcbiAgJ3N2Zyc6IFNWR0VsZW1lbnQsXG4gICdyZWN0JzogUmVjdEVsZW1lbnQsXG4gICdjaXJjbGUnOiBDaXJjbGVFbGVtZW50LFxuICAnZWxsaXBzZSc6IEVsbGlwc2VFbGVtZW50LFxuICAnbGluZSc6IExpbmVFbGVtZW50LFxuICAncG9seWxpbmUnOiBQb2x5bGluZUVsZW1lbnQsXG4gICdwb2x5Z29uJzogUG9seWdvbkVsZW1lbnQsXG4gICdwYXRoJzogUGF0aEVsZW1lbnQsXG4gICdwYXR0ZXJuJzogUGF0dGVybkVsZW1lbnQsXG4gICdtYXJrZXInOiBNYXJrZXJFbGVtZW50LFxuICAnZGVmcyc6IERlZnNFbGVtZW50LFxuICAnbGluZWFyR3JhZGllbnQnOiBMaW5lYXJHcmFkaWVudEVsZW1lbnQsXG4gICdyYWRpYWxHcmFkaWVudCc6IFJhZGlhbEdyYWRpZW50RWxlbWVudCxcbiAgJ3N0b3AnOiBTdG9wRWxlbWVudCxcbiAgJ2FuaW1hdGUnOiBBbmltYXRlRWxlbWVudCxcbiAgJ2FuaW1hdGVDb2xvcic6IEFuaW1hdGVDb2xvckVsZW1lbnQsXG4gICdhbmltYXRlVHJhbnNmb3JtJzogQW5pbWF0ZVRyYW5zZm9ybUVsZW1lbnQsXG4gICdmb250JzogRm9udEVsZW1lbnQsXG4gICdmb250LWZhY2UnOiBGb250RmFjZUVsZW1lbnQsXG4gICdtaXNzaW5nLWdseXBoJzogTWlzc2luZ0dseXBoRWxlbWVudCxcbiAgJ2dseXBoJzogR2x5cGhFbGVtZW50LFxuICAndGV4dCc6IFRleHRFbGVtZW50LFxuICAndHNwYW4nOiBUU3BhbkVsZW1lbnQsXG4gICd0cmVmJzogVFJlZkVsZW1lbnQsXG4gICdhJzogQUVsZW1lbnQsXG4gICd0ZXh0UGF0aCc6IFRleHRQYXRoRWxlbWVudCxcbiAgJ2ltYWdlJzogSW1hZ2VFbGVtZW50LFxuICAnZyc6IEdFbGVtZW50LFxuICAnc3ltYm9sJzogU3ltYm9sRWxlbWVudCxcbiAgJ3N0eWxlJzogU3R5bGVFbGVtZW50LFxuICAndXNlJzogVXNlRWxlbWVudCxcbiAgJ21hc2snOiBNYXNrRWxlbWVudCxcbiAgJ2NsaXBQYXRoJzogQ2xpcFBhdGhFbGVtZW50LFxuICAnZmlsdGVyJzogRmlsdGVyRWxlbWVudCxcbiAgJ2ZlRHJvcFNoYWRvdyc6IEZlRHJvcFNoYWRvd0VsZW1lbnQsXG4gICdmZU1vcnBob2xvZ3knOiBGZU1vcnBob2xvZ3lFbGVtZW50LFxuICAnZmVDb21wb3NpdGUnOiBGZUNvbXBvc2l0ZUVsZW1lbnQsXG4gICdmZUNvbG9yTWF0cml4JzogRmVDb2xvck1hdHJpeEVsZW1lbnQsXG4gICdmZUdhdXNzaWFuQmx1cic6IEZlR2F1c3NpYW5CbHVyRWxlbWVudCxcbiAgJ3RpdGxlJzogVGl0bGVFbGVtZW50LFxuICAnZGVzYyc6IERlc2NFbGVtZW50XG59O1xuXG5mdW5jdGlvbiBvd25LZXlzJDEob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMSh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDEoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQxKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBjcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCkge1xuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICByZXR1cm4gY2FudmFzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbWFnZShfeCkge1xuICByZXR1cm4gX2NyZWF0ZUltYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVJbWFnZSgpIHtcbiAgX2NyZWF0ZUltYWdlID0gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qIChzcmMpIHtcbiAgICB2YXIgYW5vbnltb3VzQ3Jvc3NPcmlnaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgaWYgKGFub255bW91c0Nyb3NzT3JpZ2luKSB7XG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoaW1hZ2UpO1xuICAgICAgfTtcblxuICAgICAgaW1hZ2Uub25lcnJvciA9IChfZXZlbnQsIF9zb3VyY2UsIF9saW5lbm8sIF9jb2xubywgZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH07XG5cbiAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBfY3JlYXRlSW1hZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuY2xhc3MgRG9jdW1lbnQge1xuICBjb25zdHJ1Y3RvcihjYW52Zykge1xuICAgIHZhciB7XG4gICAgICByb290RW1TaXplID0gMTIsXG4gICAgICBlbVNpemUgPSAxMixcbiAgICAgIGNyZWF0ZUNhbnZhcyA9IERvY3VtZW50LmNyZWF0ZUNhbnZhcyxcbiAgICAgIGNyZWF0ZUltYWdlID0gRG9jdW1lbnQuY3JlYXRlSW1hZ2UsXG4gICAgICBhbm9ueW1vdXNDcm9zc09yaWdpblxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHRoaXMuY2FudmcgPSBjYW52ZztcbiAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gICAgdGhpcy5zdHlsZXMgPSB7fTtcbiAgICB0aGlzLnN0eWxlc1NwZWNpZmljaXR5ID0ge307XG4gICAgdGhpcy5pbWFnZXMgPSBbXTtcbiAgICB0aGlzLmZvbnRzID0gW107XG4gICAgdGhpcy5lbVNpemVTdGFjayA9IFtdO1xuICAgIHRoaXMudW5pcXVlSWQgPSAwO1xuICAgIHRoaXMuc2NyZWVuID0gY2Fudmcuc2NyZWVuO1xuICAgIHRoaXMucm9vdEVtU2l6ZSA9IHJvb3RFbVNpemU7XG4gICAgdGhpcy5lbVNpemUgPSBlbVNpemU7XG4gICAgdGhpcy5jcmVhdGVDYW52YXMgPSBjcmVhdGVDYW52YXM7XG4gICAgdGhpcy5jcmVhdGVJbWFnZSA9IHRoaXMuYmluZENyZWF0ZUltYWdlKGNyZWF0ZUltYWdlLCBhbm9ueW1vdXNDcm9zc09yaWdpbik7XG4gICAgdGhpcy5zY3JlZW4ud2FpdCh0aGlzLmlzSW1hZ2VzTG9hZGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2NyZWVuLndhaXQodGhpcy5pc0ZvbnRzTG9hZGVkLmJpbmQodGhpcykpO1xuICB9XG5cbiAgYmluZENyZWF0ZUltYWdlKGNyZWF0ZUltYWdlLCBhbm9ueW1vdXNDcm9zc09yaWdpbikge1xuICAgIGlmICh0eXBlb2YgYW5vbnltb3VzQ3Jvc3NPcmlnaW4gPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIChzb3VyY2UsIGZvcmNlQW5vbnltb3VzQ3Jvc3NPcmlnaW4pID0+IGNyZWF0ZUltYWdlKHNvdXJjZSwgdHlwZW9mIGZvcmNlQW5vbnltb3VzQ3Jvc3NPcmlnaW4gPT09ICdib29sZWFuJyA/IGZvcmNlQW5vbnltb3VzQ3Jvc3NPcmlnaW4gOiBhbm9ueW1vdXNDcm9zc09yaWdpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUltYWdlO1xuICB9XG5cbiAgZ2V0IHdpbmRvdygpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JlZW4ud2luZG93O1xuICB9XG5cbiAgZ2V0IGZldGNoKCkge1xuICAgIHJldHVybiB0aGlzLnNjcmVlbi5mZXRjaDtcbiAgfVxuXG4gIGdldCBjdHgoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NyZWVuLmN0eDtcbiAgfVxuXG4gIGdldCBlbVNpemUoKSB7XG4gICAgdmFyIHtcbiAgICAgIGVtU2l6ZVN0YWNrXG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuIGVtU2l6ZVN0YWNrW2VtU2l6ZVN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgc2V0IGVtU2l6ZSh2YWx1ZSkge1xuICAgIHZhciB7XG4gICAgICBlbVNpemVTdGFja1xuICAgIH0gPSB0aGlzO1xuICAgIGVtU2l6ZVN0YWNrLnB1c2godmFsdWUpO1xuICB9XG5cbiAgcG9wRW1TaXplKCkge1xuICAgIHZhciB7XG4gICAgICBlbVNpemVTdGFja1xuICAgIH0gPSB0aGlzO1xuICAgIGVtU2l6ZVN0YWNrLnBvcCgpO1xuICB9XG5cbiAgZ2V0VW5pcXVlSWQoKSB7XG4gICAgcmV0dXJuIFwiY2FudmdcIi5jb25jYXQoKyt0aGlzLnVuaXF1ZUlkKTtcbiAgfVxuXG4gIGlzSW1hZ2VzTG9hZGVkKCkge1xuICAgIHJldHVybiB0aGlzLmltYWdlcy5ldmVyeShfID0+IF8ubG9hZGVkKTtcbiAgfVxuXG4gIGlzRm9udHNMb2FkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9udHMuZXZlcnkoXyA9PiBfLmxvYWRlZCk7XG4gIH1cblxuICBjcmVhdGVEb2N1bWVudEVsZW1lbnQoZG9jdW1lbnQpIHtcbiAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgZG9jdW1lbnRFbGVtZW50LnJvb3QgPSB0cnVlO1xuICAgIGRvY3VtZW50RWxlbWVudC5hZGRTdHlsZXNGcm9tU3R5bGVEZWZpbml0aW9uKCk7XG4gICAgdGhpcy5kb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIGRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQobm9kZSkge1xuICAgIHZhciBlbGVtZW50VHlwZSA9IG5vZGUubm9kZU5hbWUucmVwbGFjZSgvXlteOl0rOi8sICcnKTtcbiAgICB2YXIgRWxlbWVudFR5cGUgPSBEb2N1bWVudC5lbGVtZW50VHlwZXNbZWxlbWVudFR5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBFbGVtZW50VHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRWxlbWVudFR5cGUodGhpcywgbm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBVbmtub3duRWxlbWVudCh0aGlzLCBub2RlKTtcbiAgfVxuXG4gIGNyZWF0ZVRleHROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbmV3IFRleHROb2RlKHRoaXMsIG5vZGUpO1xuICB9XG5cbiAgc2V0Vmlld0JveChjb25maWcpIHtcbiAgICB0aGlzLnNjcmVlbi5zZXRWaWV3Qm94KF9vYmplY3RTcHJlYWQkMSh7XG4gICAgICBkb2N1bWVudDogdGhpc1xuICAgIH0sIGNvbmZpZykpO1xuICB9XG5cbn1cbkRvY3VtZW50LmNyZWF0ZUNhbnZhcyA9IGNyZWF0ZUNhbnZhcztcbkRvY3VtZW50LmNyZWF0ZUltYWdlID0gY3JlYXRlSW1hZ2U7XG5Eb2N1bWVudC5lbGVtZW50VHlwZXMgPSBlbGVtZW50cztcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG4vKipcclxuICogU1ZHIHJlbmRlcmVyIG9uIGNhbnZhcy5cclxuICovXG5cbmNsYXNzIENhbnZnIHtcbiAgLyoqXHJcbiAgICogTWFpbiBjb25zdHJ1Y3Rvci5cclxuICAgKiBAcGFyYW0gY3R4IC0gUmVuZGVyaW5nIGNvbnRleHQuXHJcbiAgICogQHBhcmFtIHN2ZyAtIFNWRyBEb2N1bWVudC5cclxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLlxyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjdHgsIHN2Zykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICB0aGlzLnBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG4gICAgdGhpcy5zY3JlZW4gPSBuZXcgU2NyZWVuKGN0eCwgb3B0aW9ucyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgZG9jdW1lbnQgPSBuZXcgRG9jdW1lbnQodGhpcywgb3B0aW9ucyk7XG4gICAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RWxlbWVudChzdmcpO1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICB0aGlzLmRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50RWxlbWVudDtcbiAgfVxuICAvKipcclxuICAgKiBDcmVhdGUgQ2FudmcgaW5zdGFuY2UgZnJvbSBTVkcgc291cmNlIHN0cmluZyBvciBVUkwuXHJcbiAgICogQHBhcmFtIGN0eCAtIFJlbmRlcmluZyBjb250ZXh0LlxyXG4gICAqIEBwYXJhbSBzdmcgLSBTVkcgc291cmNlIHN0cmluZyBvciBVUkwuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucy5cclxuICAgKiBAcmV0dXJucyBDYW52ZyBpbnN0YW5jZS5cclxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tKGN0eCwgc3ZnKSB7XG4gICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IF9hcmd1bWVudHMubGVuZ3RoID4gMiAmJiBfYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzJdIDoge307XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgICAgIHZhciBzdmdEb2N1bWVudCA9IHlpZWxkIHBhcnNlci5wYXJzZShzdmcpO1xuICAgICAgcmV0dXJuIG5ldyBDYW52ZyhjdHgsIHN2Z0RvY3VtZW50LCBvcHRpb25zKTtcbiAgICB9KSgpO1xuICB9XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBDYW52ZyBpbnN0YW5jZSBmcm9tIFNWRyBzb3VyY2Ugc3RyaW5nLlxyXG4gICAqIEBwYXJhbSBjdHggLSBSZW5kZXJpbmcgY29udGV4dC5cclxuICAgKiBAcGFyYW0gc3ZnIC0gU1ZHIHNvdXJjZSBzdHJpbmcuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucy5cclxuICAgKiBAcmV0dXJucyBDYW52ZyBpbnN0YW5jZS5cclxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tU3RyaW5nKGN0eCwgc3ZnKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMpO1xuICAgIHZhciBzdmdEb2N1bWVudCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3ZnKTtcbiAgICByZXR1cm4gbmV3IENhbnZnKGN0eCwgc3ZnRG9jdW1lbnQsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBuZXcgQ2FudmcgaW5zdGFuY2Ugd2l0aCBpbmhlcml0ZWQgb3B0aW9ucy5cclxuICAgKiBAcGFyYW0gY3R4IC0gUmVuZGVyaW5nIGNvbnRleHQuXHJcbiAgICogQHBhcmFtIHN2ZyAtIFNWRyBzb3VyY2Ugc3RyaW5nIG9yIFVSTC5cclxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLlxyXG4gICAqIEByZXR1cm5zIENhbnZnIGluc3RhbmNlLlxyXG4gICAqL1xuXG5cbiAgZm9yayhjdHgsIHN2Zykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICByZXR1cm4gQ2FudmcuZnJvbShjdHgsIHN2ZywgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKSk7XG4gIH1cbiAgLyoqXHJcbiAgICogQ3JlYXRlIG5ldyBDYW52ZyBpbnN0YW5jZSB3aXRoIGluaGVyaXRlZCBvcHRpb25zLlxyXG4gICAqIEBwYXJhbSBjdHggLSBSZW5kZXJpbmcgY29udGV4dC5cclxuICAgKiBAcGFyYW0gc3ZnIC0gU1ZHIHNvdXJjZSBzdHJpbmcuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucy5cclxuICAgKiBAcmV0dXJucyBDYW52ZyBpbnN0YW5jZS5cclxuICAgKi9cblxuXG4gIGZvcmtTdHJpbmcoY3R4LCBzdmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgcmV0dXJuIENhbnZnLmZyb21TdHJpbmcoY3R4LCBzdmcsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5vcHRpb25zKSwgb3B0aW9ucykpO1xuICB9XG4gIC8qKlxyXG4gICAqIERvY3VtZW50IGlzIHJlYWR5IHByb21pc2UuXHJcbiAgICogQHJldHVybnMgUmVhZHkgcHJvbWlzZS5cclxuICAgKi9cblxuXG4gIHJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLnNjcmVlbi5yZWFkeSgpO1xuICB9XG4gIC8qKlxyXG4gICAqIERvY3VtZW50IGlzIHJlYWR5IHZhbHVlLlxyXG4gICAqIEByZXR1cm5zIElzIHJlYWR5IG9yIG5vdC5cclxuICAgKi9cblxuXG4gIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NyZWVuLmlzUmVhZHkoKTtcbiAgfVxuICAvKipcclxuICAgKiBSZW5kZXIgb25seSBmaXJzdCBmcmFtZSwgaWdub3JpbmcgYW5pbWF0aW9ucyBhbmQgbW91c2UuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucy5cclxuICAgKi9cblxuXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgX2FyZ3VtZW50czIgPSBhcmd1bWVudHMsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBfYXJndW1lbnRzMi5sZW5ndGggPiAwICYmIF9hcmd1bWVudHMyWzBdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMlswXSA6IHt9O1xuXG4gICAgICBfdGhpcy5zdGFydChfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgZW5hYmxlUmVkcmF3OiB0cnVlLFxuICAgICAgICBpZ25vcmVBbmltYXRpb246IHRydWUsXG4gICAgICAgIGlnbm9yZU1vdXNlOiB0cnVlXG4gICAgICB9LCBvcHRpb25zKSk7XG5cbiAgICAgIHlpZWxkIF90aGlzLnJlYWR5KCk7XG5cbiAgICAgIF90aGlzLnN0b3AoKTtcbiAgICB9KSgpO1xuICB9XG4gIC8qKlxyXG4gICAqIFN0YXJ0IHJlbmRlcmluZy5cclxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlbmRlciBvcHRpb25zLlxyXG4gICAqL1xuXG5cbiAgc3RhcnQoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciB7XG4gICAgICBkb2N1bWVudEVsZW1lbnQsXG4gICAgICBzY3JlZW4sXG4gICAgICBvcHRpb25zOiBiYXNlT3B0aW9uc1xuICAgIH0gPSB0aGlzO1xuICAgIHNjcmVlbi5zdGFydChkb2N1bWVudEVsZW1lbnQsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgICBlbmFibGVSZWRyYXc6IHRydWVcbiAgICB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpKTtcbiAgfVxuICAvKipcclxuICAgKiBTdG9wIHJlbmRlcmluZy5cclxuICAgKi9cblxuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5zY3JlZW4uc3RvcCgpO1xuICB9XG4gIC8qKlxyXG4gICAqIFJlc2l6ZSBTVkcgdG8gZml0IGluIGdpdmVuIHNpemUuXHJcbiAgICogQHBhcmFtIHdpZHRoXHJcbiAgICogQHBhcmFtIGhlaWdodFxyXG4gICAqIEBwYXJhbSBwcmVzZXJ2ZUFzcGVjdFJhdGlvXHJcbiAgICovXG5cblxuICByZXNpemUod2lkdGgpIHtcbiAgICB2YXIgaGVpZ2h0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB3aWR0aDtcbiAgICB2YXIgcHJlc2VydmVBc3BlY3RSYXRpbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgdGhpcy5kb2N1bWVudEVsZW1lbnQucmVzaXplKHdpZHRoLCBoZWlnaHQsIHByZXNlcnZlQXNwZWN0UmF0aW8pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2Fudmc7XG5leHBvcnQgeyBBRWxlbWVudCwgQW5pbWF0ZUNvbG9yRWxlbWVudCwgQW5pbWF0ZUVsZW1lbnQsIEFuaW1hdGVUcmFuc2Zvcm1FbGVtZW50LCBCb3VuZGluZ0JveCwgQ0IxLCBDQjIsIENCMywgQ0I0LCBDYW52ZywgQ2lyY2xlRWxlbWVudCwgQ2xpcFBhdGhFbGVtZW50LCBEZWZzRWxlbWVudCwgRGVzY0VsZW1lbnQsIERvY3VtZW50LCBFbGVtZW50LCBFbGxpcHNlRWxlbWVudCwgRmVDb2xvck1hdHJpeEVsZW1lbnQsIEZlQ29tcG9zaXRlRWxlbWVudCwgRmVEcm9wU2hhZG93RWxlbWVudCwgRmVHYXVzc2lhbkJsdXJFbGVtZW50LCBGZU1vcnBob2xvZ3lFbGVtZW50LCBGaWx0ZXJFbGVtZW50LCBGb250LCBGb250RWxlbWVudCwgRm9udEZhY2VFbGVtZW50LCBHRWxlbWVudCwgR2x5cGhFbGVtZW50LCBHcmFkaWVudEVsZW1lbnQsIEltYWdlRWxlbWVudCwgTGluZUVsZW1lbnQsIExpbmVhckdyYWRpZW50RWxlbWVudCwgTWFya2VyRWxlbWVudCwgTWFza0VsZW1lbnQsIE1hdHJpeCwgTWlzc2luZ0dseXBoRWxlbWVudCwgTW91c2UsIFBTRVVET19aRVJPLCBQYXJzZXIsIFBhdGhFbGVtZW50LCBQYXRoUGFyc2VyLCBQYXR0ZXJuRWxlbWVudCwgUG9pbnQsIFBvbHlnb25FbGVtZW50LCBQb2x5bGluZUVsZW1lbnQsIFByb3BlcnR5LCBRQjEsIFFCMiwgUUIzLCBSYWRpYWxHcmFkaWVudEVsZW1lbnQsIFJlY3RFbGVtZW50LCBSZW5kZXJlZEVsZW1lbnQsIFJvdGF0ZSwgU1ZHRWxlbWVudCwgU1ZHRm9udExvYWRlciwgU2NhbGUsIFNjcmVlbiwgU2tldywgU2tld1gsIFNrZXdZLCBTdG9wRWxlbWVudCwgU3R5bGVFbGVtZW50LCBTeW1ib2xFbGVtZW50LCBUUmVmRWxlbWVudCwgVFNwYW5FbGVtZW50LCBUZXh0RWxlbWVudCwgVGV4dFBhdGhFbGVtZW50LCBUaXRsZUVsZW1lbnQsIFRyYW5zZm9ybSwgVHJhbnNsYXRlLCBVbmtub3duRWxlbWVudCwgVXNlRWxlbWVudCwgVmlld1BvcnQsIGNvbXByZXNzU3BhY2VzLCBnZXRTZWxlY3RvclNwZWNpZmljaXR5LCBub3JtYWxpemVBdHRyaWJ1dGVOYW1lLCBub3JtYWxpemVDb2xvciwgcGFyc2VFeHRlcm5hbFVybCwgaW5kZXggYXMgcHJlc2V0cywgdG9OdW1iZXJzLCB0cmltTGVmdCwgdHJpbVJpZ2h0LCB2ZWN0b3JNYWduaXR1ZGUsIHZlY3RvcnNBbmdsZSwgdmVjdG9yc1JhdGlvIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1WlhNdWFuTWlMQ0p6YjNWeVkyVnpJanBiWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0ZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096c2lmUT09XG4iXSwibmFtZXMiOlsiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZ3VtZW50IiwiVHlwZUVycm9yIiwiaXNDb25zdHJ1Y3RvciIsIlN0cmluZyIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIkFycmF5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiZiIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwia2V5IiwiY2hhckF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsImxlbmd0aCIsIml0IiwiQ29uc3RydWN0b3IiLCJuYW1lIiwiaXNPYmplY3QiLCJ0b0luZGV4ZWRPYmplY3QiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIk8iLCJpbmNsdWRlcyIsImluZGV4T2YiLCJmYWlscyIsIk1FVEhPRF9OQU1FIiwibWV0aG9kIiwiY2FsbCIsImFDYWxsYWJsZSIsInRvT2JqZWN0IiwiSW5kZXhlZE9iamVjdCIsIklTX1JJR0hUIiwidGhhdCIsImNhbGxiYWNrZm4iLCJhcmd1bWVudHNMZW5ndGgiLCJtZW1vIiwic2VsZiIsImkiLCJsZWZ0IiwicmlnaHQiLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsIm5leHQiLCJkb25lIiwidGhpcyIsImZyb20iLCJlcnJvciIsImV4ZWMiLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIm9iamVjdCIsInRvU3RyaW5nIiwic2xpY2UiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiVE9fU1RSSU5HX1RBRyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwiYXJndW1lbnRzIiwidGFnIiwicmVzdWx0IiwidHJ5R2V0IiwiT2JqZWN0IiwiY2FsbGVlIiwiaGFzIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsInRhcmdldCIsInNvdXJjZSIsImtleXMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwiZXJyb3IyIiwiRiIsImNvbnN0cnVjdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJJdGVyYXRvclByb3RvdHlwZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwiREVTQ1JJUFRPUlMiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCIkIiwiSVNfUFVSRSIsIkZ1bmN0aW9uTmFtZSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwiSXRlcmF0b3JzQ29yZSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJDT05GSUdVUkFCTEUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiS0VZUyIsIlZBTFVFUyIsIkVOVFJJRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJ2YWx1ZXMiLCJwcm90byIsImZvcmNlZCIsImdldCIsImdsb2JhbCIsImRvY3VtZW50IiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwid2luZG93IiwidXNlckFnZW50IiwidGVzdCIsIlBlYmJsZSIsImNsYXNzb2YiLCJwcm9jZXNzIiwiZ2V0QnVpbHRJbiIsIm1hdGNoIiwidmVyc2lvbiIsIkRlbm8iLCJ2ZXJzaW9ucyIsInY4Iiwic3BsaXQiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJzaGFtIiwicmVnZXhwRXhlYyIsIlNQRUNJRVMiLCJSZWdFeHBQcm90b3R5cGUiLCJSZWdFeHAiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInJlIiwiZmxhZ3MiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJuYXRpdmVNZXRob2QiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCIkZXhlYyIsImZuIiwiYSIsImIiLCJjIiwiYXBwbHkiLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uIiwiZ2V0RGVzY3JpcHRvciIsImFGdW5jdGlvbiIsIm5hbWVzcGFjZSIsImdldE1ldGhvZCIsImFuT2JqZWN0IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJ1c2luZ0l0ZXJhdG9yIiwiaXRlcmF0b3JNZXRob2QiLCJWIiwiUCIsImZ1bmMiLCJmbG9vciIsIk1hdGgiLCJyZXBsYWNlIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsIm0iLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwibiIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsImciLCJoYXNPd25Qcm9wZXJ0eSIsImhhc093biIsImNvbnNvbGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInN0b3JlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQiLCJXZWFrTWFwIiwic3RhdGUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJ0eXBlIiwiaXNBcnJheSIsImVtcHR5IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJkYXRhIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImlzUmVnRXhwIiwiVVNFX1NZTUJPTF9BU19VSUQiLCIkU3ltYm9sIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiYmluZCIsImdldEl0ZXJhdG9yIiwiaXRlcmF0b3JDbG9zZSIsIlJlc3VsdCIsInN0b3BwZWQiLCJpdGVyYWJsZSIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJhdG9yIiwiaXRlckZuIiwic3RlcCIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIklOVEVSUlVQVEVEIiwic3RvcCIsImNvbmRpdGlvbiIsImNhbGxGbiIsImtpbmQiLCJpbm5lclJlc3VsdCIsImlubmVyRXJyb3IiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsInRvZ2dsZSIsIm5vZGUiLCJwcm9taXNlIiwidGhlbiIsIm1hY3JvdGFzayIsIklTX0lPUyIsIklTX0lPU19QRUJCTEUiLCJJU19XRUJPU19XRUJLSVQiLCJJU19OT0RFIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJyZXNvbHZlIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsIlY4X1ZFUlNJT04iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2wiLCJTeW1ib2wiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIkMiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIm9iamVjdEtleXMiLCJJRThfRE9NX0RFRklORSIsInRvUHJvcGVydHlLZXkiLCIkZGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsIm5hbWVzIiwicHVzaCIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwieCIsInByb21pc2VDYXBhYmlsaXR5IiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsIlIiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwiZ3JvdXAiLCJyYXciLCJncm91cHMiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCIkUmVnRXhwIiwiQ09OU1RSVUNUT1JfTkFNRSIsIlRBRyIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJhQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJ0b0ludGVnZXIiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInNpemUiLCJjaGFyQ29kZUF0IiwiY29kZUF0Iiwid2hpdGVzcGFjZXMiLCJ3aGl0ZXNwYWNlIiwibHRyaW0iLCJydHJpbSIsInN0YXJ0IiwiZW5kIiwidHJpbSIsImxvY2F0aW9uIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInNldEltbWVkaWF0ZSIsImNsZWFyIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwiaWQiLCJydW5uZXIiLCJsaXN0ZW5lciIsImV2ZW50IiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwiYXJncyIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1heCIsIm1pbiIsImludGVnZXIiLCJjZWlsIiwiaXNOYU4iLCJpc1N5bWJvbCIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJUT19QUklNSVRJVkUiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsInBvc3RmaXgiLCJyYW5kb20iLCJOQVRJVkVfU1lNQk9MIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsIiRpbmRleE9mIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsIm5hdGl2ZUluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiU1RSSUNUX01FVEhPRCIsInNlYXJjaEVsZW1lbnQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiZGVmaW5lSXRlcmF0b3IiLCJBUlJBWV9JVEVSQVRPUiIsInNldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsIkFyZ3VtZW50cyIsIiRyZWR1Y2UiLCJDSFJPTUVfVkVSU0lPTiIsInJlZHVjZSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJyZWRlZmluZUFsbCIsInNldFNwZWNpZXMiLCJhbkluc3RhbmNlIiwiaXRlcmF0ZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm1pY3JvdGFzayIsInByb21pc2VSZXNvbHZlIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsIklTX0JST1dTRVIiLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJOYXRpdmVQcm9taXNlUHJvdG90eXBlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIlNVQkNMQVNTSU5HIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiYWxsIiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIndyYXAiLCJyIiwiY2FwYWJpbGl0eSIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwicCIsInJmIiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwibGVuIiwic2VhcmNoIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwibmF0aXZlTWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJtYXRjaGVyIiwicngiLCJyZXMiLCJmdWxsVW5pY29kZSIsIkEiLCJtYXRjaFN0ciIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJSRVBMQUNFX0tFRVBTXyQwIiwiUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUiLCJfIiwiVU5TQUZFX1NVQlNUSVRVVEUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJlcGxhY2VyIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJqIiwicmVwbGFjZXJBcmdzIiwiY2FsbFJlZ0V4cEV4ZWMiLCJhcnJheVB1c2giLCJNQVhfVUlOVDMyIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJzZXBhcmF0b3IiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwicSIsImUiLCJ6Iiwib3JpZ2luYWxFeGVjIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwiJHRyaW0iLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwiRE9NSXRlcmFibGVzIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsImhhbmRsZVByb3RvdHlwZSIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDT0xMRUNUSU9OX05BTUUiLCJnZXROYW5vU2Vjb25kcyIsImhydGltZSIsImxvYWRUaW1lIiwibW9kdWxlTG9hZFRpbWUiLCJub2RlTG9hZFRpbWUiLCJ1cFRpbWUiLCJwZXJmb3JtYW5jZSIsImhyIiwidXB0aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJyb290IiwidmVuZG9ycyIsInN1ZmZpeCIsInJhZiIsImNhZiIsImNhbGxiYWNrIiwiX25vdyIsImNwIiwiY2FuY2VsbGVkIiwicm91bmQiLCJoYW5kbGUiLCJjYW5jZWwiLCJwb2x5ZmlsbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY29sb3Jfc3RyaW5nIiwiYWxwaGEiLCJzdWJzdHIiLCJzaW1wbGVfY29sb3JzIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkb2RnZXJibHVlIiwiZmVsZHNwYXIiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmV5IiwibGlnaHRncmVlbiIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVibHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsInZpb2xldHJlZCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9kZWZzIiwiZXhhbXBsZSIsImJpdHMiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiLCJwcm9jZXNzb3IiLCJjaGFubmVscyIsInRvUkdCIiwidG9SR0JBIiwidG9IZXgiLCJnZXRIZWxwWE1MIiwiZXhhbXBsZXMiLCJzYyIsInhtbCIsInNldEF0dHJpYnV0ZSIsImxpc3RfaXRlbSIsImxpc3RfY29sb3IiLCJSR0JDb2xvciIsImV4YW1wbGVfZGl2IiwiY3NzVGV4dCIsImxpc3RfaXRlbV92YWx1ZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiYXJnIiwiaW5mbyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZXJyIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwidCIsImNvcyIsInNpbiIsIkVycm9yIiwiUEkiLCJvIiwibEFyY0ZsYWciLCJzd2VlcEZsYWciLCJyWCIsInJZIiwicyIsInUiLCJ5IiwiYWJzIiwiaCIsInhSb3QiLCJwb3ciLCJzcXJ0IiwiVCIsInYiLCJsIiwiY1giLCJjWSIsInBoaTEiLCJhdGFuMiIsInBoaTIiLCJyZWxhdGl2ZSIsIngxIiwieTEiLCJ4MiIsInkyIiwiTmFOIiwiU01PT1RIX0NVUlZFX1RPIiwiQ1VSVkVfVE8iLCJTTU9PVEhfUVVBRF9UTyIsIlFVQURfVE8iLCJNT1ZFX1RPIiwiQ0xPU0VfUEFUSCIsIkhPUklaX0xJTkVfVE8iLCJMSU5FX1RPIiwiVkVSVF9MSU5FX1RPIiwiTiIsImQiLCJFIiwiTSIsIkkiLCJMIiwiUk9VTkQiLCJUT19BQlMiLCJUT19SRUwiLCJOT1JNQUxJWkVfSFZaIiwiQVJDIiwiTk9STUFMSVpFX1NUIiwiUVRfVE9fQyIsIklORk8iLCJTQU5JVElaRSIsIkxJTkVfQ09NTUFORFMiLCJNQVRSSVgiLCJST1RBVEUiLCJUUkFOU0xBVEUiLCJTQ0FMRSIsIlNLRVdfWCIsImF0YW4iLCJTS0VXX1kiLCJYX0FYSVNfU1lNTUVUUlkiLCJZX0FYSVNfU1lNTUVUUlkiLCJBX1RPX0MiLCJIIiwiQU5OT1RBVEVfQVJDUyIsIkNMT05FIiwiQ0FMQ1VMQVRFX0JPVU5EUyIsIm1heFgiLCJtaW5YIiwibWF4WSIsIm1pblkiLCJEUkFXSU5HX0NPTU1BTkRTIiwidyIsIm1hcCIsIlUiLCJ0cmFuc2Zvcm0iLCJ0b0FicyIsInRvUmVsIiwibm9ybWFsaXplSFZaIiwibm9ybWFsaXplU1QiLCJxdFRvQyIsImFUb0MiLCJzYW5pdGl6ZSIsInRyYW5zbGF0ZSIsInNjYWxlIiwicm90YXRlIiwibWF0cml4Iiwic2tld1giLCJza2V3WSIsInhTeW1tZXRyeSIsInlTeW1tZXRyeSIsImFubm90YXRlQXJjcyIsImN1ck51bWJlciIsImN1ckNvbW1hbmRUeXBlIiwiY3VyQ29tbWFuZFJlbGF0aXZlIiwiY2FuUGFyc2VDb21tYW5kT3JDb21tYSIsImN1ck51bWJlckhhc0V4cCIsImN1ck51bWJlckhhc0V4cERpZ2l0cyIsImN1ck51bWJlckhhc0RlY2ltYWwiLCJjdXJBcmdzIiwiZmluaXNoIiwicGFyc2UiLCJTeW50YXhFcnJvciIsIk51bWJlciIsImNvbW1hbmRzIiwiZW5jb2RlIiwiZ2V0Qm91bmRzIiwiX3R5cGVvZiIsIm11bFRhYmxlIiwic2hnVGFibGUiLCJwcm9jZXNzQ2FudmFzUkdCQSIsImNhbnZhcyIsInRvcFgiLCJ0b3BZIiwid2lkdGgiLCJoZWlnaHQiLCJyYWRpdXMiLCJpbWFnZURhdGEiLCJnZXRFbGVtZW50QnlJZCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiZ2V0SW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhRnJvbUNhbnZhcyIsInN0YWNrRW5kIiwicGl4ZWxzIiwiZGl2Iiwid2lkdGhNaW51czEiLCJoZWlnaHRNaW51czEiLCJyYWRpdXNQbHVzMSIsInN1bUZhY3RvciIsInN0YWNrU3RhcnQiLCJCbHVyU3RhY2siLCJzdGFjayIsInN0YWNrSW4iLCJzdGFja091dCIsInl3IiwieWkiLCJtdWxTdW0iLCJzaGdTdW0iLCJwciIsInBnIiwicGIiLCJwYSIsIl9pIiwickluU3VtIiwiZ0luU3VtIiwiYkluU3VtIiwiYUluU3VtIiwick91dFN1bSIsImdPdXRTdW0iLCJiT3V0U3VtIiwiYU91dFN1bSIsInJTdW0iLCJnU3VtIiwiYlN1bSIsImFTdW0iLCJfaTIiLCJyYnMiLCJwYUluaXRpYWwiLCJfYTIiLCJfcCIsIl9zdGFja091dCIsIl9yIiwiX2ciLCJfYiIsIl9hIiwiX3giLCJfcHIiLCJfcGciLCJfcGIiLCJfcGEiLCJfck91dFN1bSIsIl9nT3V0U3VtIiwiX2JPdXRTdW0iLCJfYU91dFN1bSIsIl9yU3VtIiwiX2dTdW0iLCJfYlN1bSIsIl9hU3VtIiwiX2kzIiwieXAiLCJfZ0luU3VtIiwiX2JJblN1bSIsIl9hSW5TdW0iLCJfckluU3VtIiwiX2k0IiwiX3JicyIsIl95IiwiX3AyIiwicHJvY2Vzc0ltYWdlRGF0YVJHQkEiLCJwdXRJbWFnZURhdGEiLCJpbnN0YW5jZSIsIl9jbGFzc0NhbGxDaGVjayIsImZyZWV6ZSIsIm9mZnNjcmVlbiIsIkRPTVBhcnNlciIsIkRPTVBhcnNlckZhbGxiYWNrIiwicHJlc2V0IiwiaWdub3JlQW5pbWF0aW9uIiwiaWdub3JlTW91c2UiLCJjcmVhdGVDYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJjcmVhdGVJbWFnZSIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJibG9iIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJSZWZsZWN0IiwiZGVsZXRlUHJvcGVydHkiLCJfcmVmIiwibG9hZEltYWdlIiwiY29tcHJlc3NTcGFjZXMiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsInRvTnVtYmVycyIsImFsbFVwcGVyY2FzZSIsIm5vcm1hbGl6ZUF0dHJpYnV0ZU5hbWUiLCJwYXJzZUV4dGVybmFsVXJsIiwidXJsTWF0Y2giLCJub3JtYWxpemVDb2xvciIsImNvbG9yIiwicmdiUGFydHMiLCJudW0iLCJpc0Zsb2F0IiwiYXR0cmlidXRlUmVnZXgiLCJpZFJlZ2V4IiwiY2xhc3NSZWdleCIsInBzZXVkb0VsZW1lbnRSZWdleCIsInBzZXVkb0NsYXNzV2l0aEJyYWNrZXRzUmVnZXgiLCJwc2V1ZG9DbGFzc1JlZ2V4IiwiZWxlbWVudFJlZ2V4IiwiZmluZFNlbGVjdG9yTWF0Y2giLCJzZWxlY3RvciIsInJlZ2V4IiwibWF0Y2hlcyIsImdldFNlbGVjdG9yU3BlY2lmaWNpdHkiLCJzcGVjaWZpY2l0eSIsImN1cnJlbnRTZWxlY3RvciIsImRlbHRhIiwiUFNFVURPX1pFUk8iLCJ2ZWN0b3JNYWduaXR1ZGUiLCJ2ZWN0b3JzUmF0aW8iLCJ2ZWN0b3JzQW5nbGUiLCJhY29zIiwiQ0IxIiwiQ0IyIiwiQ0IzIiwiQ0I0IiwiUUIxIiwiUUIyIiwiUUIzIiwiUHJvcGVydHkiLCJpc05vcm1hbGl6ZWRDb2xvciIsInN0YXRpYyIsImdldFN0cmluZyIsImhhc1ZhbHVlIiwiemVyb0lzVmFsdWUiLCJpc1N0cmluZyIsImlzVXJsRGVmaW5pdGlvbiIsImlzUGl4ZWxzIiwiYXNTdHJpbmciLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwiZGVmIiwiZ2V0TnVtYmVyIiwiZ2V0Q29sb3IiLCJnZXREcGkiLCJnZXRSZW0iLCJyb290RW1TaXplIiwiZ2V0RW0iLCJlbVNpemUiLCJnZXRVbml0cyIsImdldFBpeGVscyIsImF4aXNPcklzRm9udFNpemUiLCJwcm9jZXNzUGVyY2VudCIsImF4aXMiLCJpc0ZvbnRTaXplIiwidmlld1BvcnQiLCJzY3JlZW4iLCJjb21wdXRlU2l6ZSIsImdldE1pbGxpc2Vjb25kcyIsImdldFJhZGlhbnMiLCJnZXREZWZpbml0aW9uIiwiZGVmaW5pdGlvbnMiLCJnZXRGaWxsU3R5bGVEZWZpbml0aW9uIiwiZWxlbWVudCIsIm9wYWNpdHkiLCJjcmVhdGVHcmFkaWVudCIsImN0eCIsImNyZWF0ZVBhdHRlcm4iLCJnZXRIcmVmQXR0cmlidXRlIiwicGF0dGVyblRyYW5zZm9ybSIsImdldEF0dHJpYnV0ZSIsImdldFRleHRCYXNlbGluZSIsInRleHRCYXNlbGluZU1hcHBpbmciLCJhZGRPcGFjaXR5IiwiY29tbWFzIiwiVmlld1BvcnQiLCJ2aWV3UG9ydHMiLCJzZXRDdXJyZW50IiwicmVtb3ZlQ3VycmVudCIsInBvcCIsImdldEN1cnJlbnQiLCJQb2ludCIsInBvaW50IiwiZGVmYXVsdFZhbHVlIiwicGF0aCIsInBvaW50cyIsInBhdGhQb2ludHMiLCJhbmdsZVRvIiwiYXBwbHlUcmFuc2Zvcm0iLCJ4cCIsIk1vdXNlIiwid29ya2luZyIsImV2ZW50cyIsImV2ZW50RWxlbWVudHMiLCJvbkNsaWNrIiwib25Nb3VzZU1vdmUiLCJpc1dvcmtpbmciLCJvbmNsaWNrIiwib25tb3VzZW1vdmUiLCJoYXNFdmVudHMiLCJydW5FdmVudHMiLCJjdXJzb3IiLCJmb3JFYWNoIiwiY2hlY2tQYXRoIiwiX3JlZjIiLCJpc1BvaW50SW5QYXRoIiwiY2hlY2tCb3VuZGluZ0JveCIsImJvdW5kaW5nQm94IiwiX3JlZjMiLCJpc1BvaW50SW5Cb3giLCJtYXBYWSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImNsaWVudFgiLCJjbGllbnRZIiwiZXZlbnRUYXJnZXQiLCJkZWZhdWx0V2luZG93IiwiZGVmYXVsdEZldGNoJDEiLCJTY3JlZW4iLCJGUkFNRVJBVEUiLCJNQVhfVklSVFVBTF9QSVhFTFMiLCJDTElFTlRfV0lEVEgiLCJDTElFTlRfSEVJR0hUIiwibW91c2UiLCJhbmltYXRpb25zIiwid2FpdHMiLCJmcmFtZUR1cmF0aW9uIiwiaXNSZWFkeUxvY2siLCJpc0ZpcnN0UmVuZGVyIiwiaW50ZXJ2YWxJZCIsIndhaXQiLCJjaGVja2VyIiwicmVhZHkiLCJyZWFkeVByb21pc2UiLCJpc1JlYWR5IiwiZXZlcnkiLCJyZXNvbHZlUmVhZHkiLCJzZXREZWZhdWx0cyIsInN0cm9rZVN0eWxlIiwibGluZUNhcCIsImxpbmVKb2luIiwibWl0ZXJMaW1pdCIsInNldFZpZXdCb3giLCJhc3BlY3RSYXRpbyIsImRlc2lyZWRXaWR0aCIsImRlc2lyZWRIZWlnaHQiLCJyZWZYIiwicmVmWSIsImNsaXAiLCJjbGlwWCIsImNsaXBZIiwiY2xlYW5Bc3BlY3RSYXRpbyIsImFzcGVjdFJhdGlvQWxpZ24iLCJhc3BlY3RSYXRpb01lZXRPclNsaWNlIiwiYWxpZ24iLCJtZWV0T3JTbGljZSIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlTWluIiwic2NhbGVNYXgiLCJmaW5hbERlc2lyZWRXaWR0aCIsImZpbmFsRGVzaXJlZEhlaWdodCIsInJlZlhQcm9wIiwicmVmWVByb3AiLCJoYXNSZWZzIiwic2NhbGVkQ2xpcFgiLCJzY2FsZWRDbGlwWSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlUGF0aCIsImlzTWVldE1pblkiLCJpc1NsaWNlTWF4WSIsImlzTWVldE1pblgiLCJpc1NsaWNlTWF4WCIsImVuYWJsZVJlZHJhdyIsImlnbm9yZURpbWVuc2lvbnMiLCJpZ25vcmVDbGVhciIsImZvcmNlUmVkcmF3Iiwic2NhbGVXaWR0aCIsInNjYWxlSGVpZ2h0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJyZW5kZXIiLCJ0aWNrIiwic2hvdWxkVXBkYXRlIiwiYW5pbWF0aW9uIiwidXBkYXRlIiwid2lkdGhTdHlsZSIsImdldFN0eWxlIiwiaGVpZ2h0U3R5bGUiLCJjV2lkdGgiLCJjbGllbnRXaWR0aCIsImNIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ2aWV3Qm94IiwieFJhdGlvIiwieVJhdGlvIiwiX3dpZHRoU3R5bGUiLCJfaGVpZ2h0U3R5bGUiLCJ0cmFuc2Zvcm1TdHlsZSIsImNsZWFyUmVjdCIsImRlZmF1bHRGZXRjaCIsIkRlZmF1bHRET01QYXJzZXIiLCJQYXJzZXIiLCJyZXNvdXJjZSIsIl90aGlzIiwicGFyc2VGcm9tU3RyaW5nIiwibG9hZCIsInBhcnNlciIsImNoZWNrRG9jdW1lbnQiLCJwYXJzZXJFcnJvciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGV4dENvbnRlbnQiLCJfdGhpczIiLCJ0ZXh0IiwiVHJhbnNsYXRlIiwidW5hcHBseSIsImFwcGx5VG9Qb2ludCIsIlJvdGF0ZSIsInRyYW5zZm9ybU9yaWdpbiIsImFuZ2xlIiwib3JpZ2luWCIsIm9yaWdpblkiLCJjeCIsImN5IiwibnVtYmVycyIsInR4IiwidHkiLCJyYWQiLCJTY2FsZSIsInNjYWxlU2l6ZSIsInBhcnNlU2NhbGUiLCJNYXRyaXgiLCJkZXQiLCJTa2V3Iiwic2tldyIsInN1cGVyIiwiU2tld1giLCJTa2V3WSIsIlRyYW5zZm9ybSIsInRyYW5zZm9ybXMiLCJwYXJzZVRyYW5zZm9ybXMiLCJwYXJzZVRyYW5zZm9ybSIsIlRyYW5zZm9ybVR5cGUiLCJ0cmFuc2Zvcm1UeXBlcyIsInRyYW5zZm9ybU9yaWdpblhQcm9wZXJ0eSIsInRyYW5zZm9ybU9yaWdpbllQcm9wZXJ0eSIsIkVsZW1lbnQiLCJjYXB0dXJlVGV4dE5vZGVzIiwiYXR0cmlidXRlcyIsInN0eWxlcyIsInN0eWxlc1NwZWNpZmljaXR5IiwiYW5pbWF0aW9uRnJvemVuIiwiYW5pbWF0aW9uRnJvemVuVmFsdWUiLCJjaGlsZHJlbiIsIm5vZGVUeXBlIiwiYXR0cmlidXRlIiwibm9kZU5hbWUiLCJhZGRTdHlsZXNGcm9tU3R5bGVEZWZpbml0aW9uIiwiY2hpbGROb2RlcyIsImNoaWxkTm9kZSIsImFkZENoaWxkIiwidGV4dE5vZGUiLCJnZXRUZXh0IiwiY3JlYXRlSWZOb3RFeGlzdHMiLCJhdHRyIiwiX2F0dHIiLCJza2lwQW5jZXN0b3JzIiwicGFyZW50U3R5bGUiLCJfc3R5bGUiLCJzYXZlIiwibWFzayIsImFwcGx5RWZmZWN0cyIsImZpbHRlciIsInNldENvbnRleHQiLCJyZW5kZXJDaGlsZHJlbiIsImNsZWFyQ29udGV4dCIsInJlc3RvcmUiLCJmcm9tRWxlbWVudCIsImNsaXBQYXRoU3R5bGVQcm9wIiwiY2hpbGQiLCJpZ25vcmVDaGlsZFR5cGVzIiwibWF0Y2hlc1NlbGVjdG9yIiwic3R5bGVDbGFzc2VzIiwic29tZSIsInN0eWxlQ2xhc3MiLCJleGlzdGluZ1NwZWNpZmljaXR5IiwicmVtb3ZlU3R5bGVzIiwiaWdub3JlU3R5bGVzIiwidG9SZXN0b3JlIiwic3R5bGVQcm9wIiwicmVzdG9yZVN0eWxlcyIsIlVua25vd25FbGVtZW50Iiwid3JhcEZvbnRGYW1pbHkiLCJmb250RmFtaWx5IiwidHJpbW1lZCIsInByZXBhcmVGb250U3R5bGUiLCJmb250U3R5bGUiLCJ0YXJnZXRGb250U3R5bGUiLCJwcmVwYXJlRm9udFdlaWdodCIsImZvbnRXZWlnaHQiLCJ0YXJnZXRGb250V2VpZ2h0IiwiRm9udCIsImZvbnRWYXJpYW50IiwiZm9udFNpemUiLCJpbmhlcml0IiwiaW5oZXJpdEZvbnQiLCJwYXJ0cyIsInBhcnQiLCJ2YXJpYW50cyIsIndlaWdodHMiLCJCb3VuZGluZ0JveCIsImFkZFBvaW50IiwiYWRkWCIsImFkZFkiLCJhZGRCb3VuZGluZ0JveCIsInN1bUN1YmljIiwicDAiLCJwMSIsInAyIiwicDMiLCJiZXppZXJDdXJ2ZUFkZCIsImZvclgiLCJiMmFjIiwidDEiLCJ0MiIsImFkZEJlemllckN1cnZlIiwicDB4IiwicDB5IiwicDF4IiwicDF5IiwicDJ4IiwicDJ5IiwicDN4IiwicDN5IiwiYWRkUXVhZHJhdGljQ3VydmUiLCJjcDF4IiwiY3AxeSIsImNwMngiLCJjcDJ5IiwiUGF0aFBhcnNlciIsImNvbnRyb2wiLCJjdXJyZW50IiwiY29tbWFuZCIsInByZXZpb3VzQ29tbWFuZCIsImFuZ2xlcyIsInJlc2V0IiwiaXNFbmQiLCJnZXRQb2ludCIsInhQcm9wIiwieVByb3AiLCJtYWtlQWJzb2x1dGUiLCJnZXRBc0NvbnRyb2xQb2ludCIsImdldEFzQ3VycmVudFBvaW50IiwiZ2V0UmVmbGVjdGVkQ29udHJvbFBvaW50Iiwib3giLCJveSIsImFkZE1hcmtlciIsInByaW9yVG8iLCJhZGRNYXJrZXJBbmdsZSIsImdldE1hcmtlclBvaW50cyIsImdldE1hcmtlckFuZ2xlcyIsIlJlbmRlcmVkRWxlbWVudCIsIm1vZGlmaWVkRW1TaXplU3RhY2siLCJjYWxjdWxhdGVPcGFjaXR5Iiwib3BhY2l0eVN0eWxlIiwiZnJvbU1lYXN1cmUiLCJmaWxsU3R5bGVQcm9wIiwiZmlsbE9wYWNpdHlTdHlsZVByb3AiLCJzdHJva2VTdHlsZVByb3AiLCJzdHJva2VPcGFjaXR5UHJvcCIsImZpbGxTdHlsZSIsIl9maWxsU3R5bGUiLCJfZmlsbFN0eWxlMiIsIl9zdHJva2VTdHlsZSIsIl9zdHJva2VTdHlsZTIiLCJzdHJva2VXaWR0aFN0eWxlUHJvcCIsIm5ld0xpbmVXaWR0aCIsImxpbmVXaWR0aCIsInN0cm9rZUxpbmVjYXBTdHlsZVByb3AiLCJzdHJva2VMaW5lam9pblN0eWxlUHJvcCIsInN0cm9rZU1pdGVybGltaXRQcm9wIiwic3Ryb2tlRGFzaGFycmF5U3R5bGVQcm9wIiwic3Ryb2tlRGFzaG9mZnNldFByb3AiLCJnYXBzIiwic2V0TGluZURhc2giLCJ3ZWJraXRMaW5lRGFzaCIsIm1vekRhc2giLCJvZmZzZXQiLCJsaW5lRGFzaE9mZnNldCIsIndlYmtpdExpbmVEYXNoT2Zmc2V0IiwibW96RGFzaE9mZnNldCIsImZvbnQiLCJmb250U3R5bGVQcm9wIiwiZm9udFN0eWxlU3R5bGVQcm9wIiwiZm9udFZhcmlhbnRTdHlsZVByb3AiLCJmb250V2VpZ2h0U3R5bGVQcm9wIiwiZm9udFNpemVTdHlsZVByb3AiLCJmb250RmFtaWx5U3R5bGVQcm9wIiwiZ2xvYmFsQWxwaGEiLCJwb3BFbVNpemUiLCJQYXRoRWxlbWVudCIsInBhdGhQYXJzZXIiLCJwYXRoTSIsInBhdGhMIiwicGF0aEgiLCJwYXRoViIsInBhdGhDIiwicGF0aFMiLCJwYXRoUSIsInBhdGhUIiwicGF0aEEiLCJwYXRoWiIsImdldEJvdW5kaW5nQm94IiwiZ2V0TWFya2VycyIsIm1hcmtlcnMiLCJmaWxsUnVsZVN0eWxlUHJvcCIsImZpbGwiLCJzZXRUcmFuc2Zvcm0iLCJzdHJva2UiLCJtYXJrZXJzTGFzdEluZGV4IiwibWFya2VyU3RhcnRTdHlsZVByb3AiLCJtYXJrZXJNaWRTdHlsZVByb3AiLCJtYXJrZXJFbmRTdHlsZVByb3AiLCJtYXJrZXIiLCJfbWFya2VyIiwiX3BvaW50IiwiX2FuZ2xlIiwiX21hcmtlcjIiLCJfcG9pbnQyIiwiX2FuZ2xlMiIsImNvbnRyb2xQb2ludCIsImN1cnJlbnRQb2ludCIsImJlemllckN1cnZlVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieEF4aXNSb3RhdGlvbiIsImN1cnJwIiwiY3BwIiwiY2VudHAiLCJhMSIsImFkIiwiZGlyIiwiYWgiLCJoYWxmV2F5Iiwic3giLCJzeSIsImFyYyIsIkJvb2xlYW4iLCJHbHlwaEVsZW1lbnQiLCJob3JpekFkdlgiLCJhcmFiaWNGb3JtIiwiVGV4dEVsZW1lbnQiLCJtZWFzdXJlQ2FjaGUiLCJ0ZXh0QmFzZWxpbmUiLCJpbml0aWFsaXplQ29vcmRpbmF0ZXMiLCJkeEF0dHIiLCJkeUF0dHIiLCJnZXRBbmNob3JEZWx0YSIsImdldFRFbGVtZW50Qm91bmRpbmdCb3giLCJjaGlsZEJvdW5kaW5nQm94IiwiZ2V0Q2hpbGRCb3VuZGluZ0JveCIsImdldEZvbnRTaXplIiwiaW5oZXJpdEZvbnRTaXplIiwibWVhc3VyZVRleHQiLCJnZXRHbHlwaCIsImNoYXIiLCJnbHlwaCIsImlzQXJhYmljIiwicHJldkNoYXIiLCJuZXh0Q2hhciIsImdseXBocyIsIm1heWJlR2x5cGgiLCJtaXNzaW5nR2x5cGgiLCJnZXRUZXh0RnJvbU5vZGUiLCJwYXJlbnROb2RlIiwicmVuZGVyQ2hpbGQiLCJyZW5kZXJURWxlbWVudENoaWxkcmVuIiwicmVuZGVyVGV4dCIsImN1c3RvbUZvbnQiLCJ1bml0c1BlckVtIiwiZm9udEZhY2UiLCJjdHhGb250IiwiaXNSVEwiLCJkeCIsImx3IiwiZmlsbFRleHQiLCJzdHJva2VUZXh0Iiwic3RhcnRJIiwidGV4dEFuY2hvciIsIm1lYXN1cmVUZXh0UmVjdXJzaXZlIiwiYWRqdXN0Q2hpbGRDb29yZGluYXRlcyIsInRleHRQYXJlbnQiLCJ4QXR0ciIsInlBdHRyIiwiX3dpZHRoIiwibWVhc3VyZSIsIm1lYXN1cmVUYXJnZXRUZXh0IiwidGFyZ2V0VGV4dCIsIl9tZWFzdXJlIiwiVFNwYW5FbGVtZW50IiwiVGV4dE5vZGUiLCJTVkdFbGVtZW50IiwiX3RoaXMkbm9kZSRwYXJlbnROb2RlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJmb250U2l6ZVByb3AiLCJyZWZYQXR0ciIsInJlZllBdHRyIiwidmlld0JveEF0dHIiLCJyZXNpemUiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwid2lkdGhBdHRyIiwiaGVpZ2h0QXR0ciIsInN0eWxlQXR0ciIsIm9yaWdpbldpZHRoIiwib3JpZ2luSGVpZ2h0IiwicHJlc2VydmVBc3BlY3RSYXRpb0F0dHIiLCJSZWN0RWxlbWVudCIsInJ4QXR0ciIsInJ5QXR0ciIsInJ5IiwiS0FQUEEiLCJDaXJjbGVFbGVtZW50IiwiRWxsaXBzZUVsZW1lbnQiLCJMaW5lRWxlbWVudCIsImdldFBvaW50cyIsIngwIiwieTAiLCJQb2x5bGluZUVsZW1lbnQiLCJwYXJzZVBhdGgiLCJQb2x5Z29uRWxlbWVudCIsIlBhdHRlcm5FbGVtZW50IiwicGFyZW50T3BhY2l0eVByb3AiLCJwYXR0ZXJuU3ZnIiwicGF0dGVybkNhbnZhcyIsInBhdHRlcm5DdHgiLCJNYXJrZXJFbGVtZW50Iiwib3JpZW50IiwibWFya2VyVW5pdHMiLCJtYXJrZXJTdmciLCJvdmVyZmxvdyIsIkRlZnNFbGVtZW50IiwiR0VsZW1lbnQiLCJHcmFkaWVudEVsZW1lbnQiLCJhdHRyaWJ1dGVzVG9Jbmhlcml0Iiwic3RvcHMiLCJnZXRHcmFkaWVudFVuaXRzIiwic3RvcHNDb250YWluZXIiLCJpbmhlcml0U3RvcENvbnRhaW5lciIsImdyYWRpZW50IiwiZ2V0R3JhZGllbnQiLCJhZGRQYXJlbnRPcGFjaXR5IiwiYWRkQ29sb3JTdG9wIiwicm9vdFZpZXciLCJyZWN0IiwiYXR0cmlidXRlVG9Jbmhlcml0IiwiTGluZWFyR3JhZGllbnRFbGVtZW50IiwiaXNCb3VuZGluZ0JveFVuaXRzIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJSYWRpYWxHcmFkaWVudEVsZW1lbnQiLCJmeCIsImZ5IiwiZnIiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsIlN0b3BFbGVtZW50Iiwic3RvcE9wYWNpdHkiLCJzdG9wQ29sb3IiLCJBbmltYXRlRWxlbWVudCIsImR1cmF0aW9uIiwiaW5pdGlhbFZhbHVlIiwiaW5pdGlhbFVuaXRzIiwicmVtb3ZlZCIsImZyb3plbiIsImJlZ2luIiwibWF4RHVyYXRpb24iLCJ0byIsInZhbHVlc0F0dHIiLCJnZXRQcm9wZXJ0eSIsImF0dHJpYnV0ZVR5cGUiLCJhdHRyaWJ1dGVOYW1lIiwiY2FsY1ZhbHVlIiwicHJvZ3Jlc3MiLCJnZXRQcm9ncmVzcyIsIm5ld1ZhbHVlIiwicHJvcCIsInVwZGF0ZWQiLCJ0eXBlQXR0ciIsImxiIiwidWIiLCJBbmltYXRlQ29sb3JFbGVtZW50IiwiY29sb3JGcm9tIiwiY29sb3JUbyIsIkFuaW1hdGVUcmFuc2Zvcm1FbGVtZW50IiwidHJhbnNmb3JtRnJvbSIsInRyYW5zZm9ybVRvIiwiRm9udEVsZW1lbnQiLCJmb250RmFtaWx5U3R5bGUiLCJGb250RmFjZUVsZW1lbnQiLCJhc2NlbnQiLCJkZXNjZW50IiwiTWlzc2luZ0dseXBoRWxlbWVudCIsIlRSZWZFbGVtZW50IiwiZmlyc3RDaGlsZCIsIkFFbGVtZW50IiwiaGFzVGV4dCIsIm93bktleXMkMiIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZCQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIlRleHRQYXRoRWxlbWVudCIsInRleHRXaWR0aCIsInRleHRIZWlnaHQiLCJwYXRoTGVuZ3RoIiwiZ2x5cGhJbmZvIiwibGV0dGVyU3BhY2luZ0NhY2hlIiwibWVhc3VyZXNDYWNoZSIsIk1hcCIsInBhdGhFbGVtZW50IiwiZGF0YUFycmF5IiwicGFyc2VQYXRoRGF0YSIsInRoZXRhIiwiZFRoZXRhIiwicHNpIiwiZnMiLCJzZXRUZXh0RGF0YSIsInRleHREZWNvcmF0aW9uIiwicm90YXRpb24iLCJwYXJ0aWFsVGV4dCIsImdldExldHRlclNwYWNpbmdBdCIsImlkeCIsImZpbmRTZWdtZW50VG9GaXRDaGFyIiwiYW5jaG9yIiwidGV4dEZ1bGxXaWR0aCIsImZ1bGxQYXRoV2lkdGgiLCJzcGFjZXNOdW1iZXIiLCJpbnB1dE9mZnNldCIsImR5IiwiY2hhckkiLCJnbHlwaFdpZHRoIiwic3BsaW5lU3RlcCIsImdldEVxdWlkaXN0YW50UG9pbnRPblBhdGgiLCJzZWdtZW50IiwiZHlYIiwiZHlZIiwiY2hhcnMiLCJ0aGlzU3BhY2luZyIsInBhcmVudFNwYWNpbmciLCJsZXR0ZXJTcGFjaW5nIiwidGV4dExlbiIsImR4U3VtIiwiYWNjIiwiY3VyIiwiZ2V0UGF0aExlbmd0aCIsInN0YXJ0T2Zmc2V0IiwibmV4dE9mZnNldCIsInBhdGhDb21tYW5kcyIsInN0YXJ0WCIsInN0YXJ0WSIsIm5leHRDb21tYW5kVHlwZSIsImNhbGNMZW5ndGgiLCJjb21tYW5kVHlwZSIsImdldExpbmVMZW5ndGgiLCJnZXRQb2ludE9uQ3ViaWNCZXppZXIiLCJnZXRQb2ludE9uUXVhZHJhdGljQmV6aWVyIiwiaW5jIiwiZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMiLCJnZXRQb2ludE9uTGluZSIsImRpc3QiLCJmcm9tWCIsImZyb21ZIiwicmlzZSIsInB0IiwiaXgiLCJpeSIsInBSaXNlIiwicFJ1biIsImdldFBvaW50T25QYXRoIiwiZGlzdGFuY2UiLCJmdWxsTGVuIiwiY3VtdWxhdGl2ZVBhdGhMZW5ndGgiLCJjdXJyZW50VCIsInBjdCIsInA0eCIsInA0eSIsImNvc1BzaSIsInNpblBzaSIsImJ1aWxkRXF1aWRpc3RhbnRDYWNoZSIsImlucHV0U3RlcCIsImlucHV0UHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiZXF1aWRpc3RhbnRDYWNoZSIsInRhcmdldERpc3RhbmNlIiwiZGF0YVVyaVJlZ2V4IiwiSW1hZ2VFbGVtZW50IiwibG9hZGVkIiwiaHJlZiIsImlzU3ZnIiwiaW1hZ2VzIiwibG9hZFN2ZyIsImltYWdlIiwiYXRvYiIsImRlY29kZVVSSUNvbXBvbmVudCIsInN2ZyIsInN1YkRvY3VtZW50IiwiY2FudmciLCJmb3JrU3RyaW5nIiwiZG9jdW1lbnRFbGVtZW50IiwiX2ltYWdlIiwiY29tcGxldGUiLCJkcmF3SW1hZ2UiLCJTeW1ib2xFbGVtZW50IiwiU1ZHRm9udExvYWRlciIsImZvbnRzIiwiZm9udE5vZGUiLCJTdHlsZUVsZW1lbnQiLCJjc3MiLCJjc3NQYXJ0cyIsImNzc0NsYXNzZXMiLCJjc3NQcm9wcyIsImNzc0NsYXNzIiwicHJvcHMiLCJjc3NQcm9wIiwiVXNlRWxlbWVudCIsInRlbXBTdmciLCJvbGRQYXJlbnQiLCJlbGVtZW50VHJhbnNmb3JtIiwiY2FjaGVkRWxlbWVudCIsImltR2V0IiwiaW1nIiwiX2hlaWdodCIsInJnYmEiLCJpbVNldCIsIm0xIiwibTIiLCJtMyIsIkZlQ29sb3JNYXRyaXhFbGVtZW50IiwiaW5jbHVkZU9wYWNpdHkiLCJzcmNEYXRhIiwibnIiLCJuZyIsIm5iIiwibmEiLCJNYXNrRWxlbWVudCIsImlnbm9yZWRTdHlsZXMiLCJtYXNrQ2FudmFzIiwibWFza0N0eCIsInRtcENhbnZhcyIsInRtcEN0eCIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImZpbGxSZWN0Iiwibm9vcCIsIkNsaXBQYXRoRWxlbWVudCIsImNvbnRleHRQcm90byIsIkZpbHRlckVsZW1lbnQiLCJweCIsInB5IiwiZWZkIiwiZXh0cmFGaWx0ZXJEaXN0YW5jZSIsInRtcENhbnZhc1dpZHRoIiwidG1wQ2FudmFzSGVpZ2h0IiwiRmVEcm9wU2hhZG93RWxlbWVudCIsIkZlTW9ycGhvbG9neUVsZW1lbnQiLCJGZUNvbXBvc2l0ZUVsZW1lbnQiLCJGZUdhdXNzaWFuQmx1ckVsZW1lbnQiLCJibHVyUmFkaXVzIiwiYm9keSIsImdldFVuaXF1ZUlkIiwiVGl0bGVFbGVtZW50IiwiRGVzY0VsZW1lbnQiLCJvd25LZXlzJDEiLCJfY3JlYXRlSW1hZ2UiLCJhbm9ueW1vdXNDcm9zc09yaWdpbiIsImNyb3NzT3JpZ2luIiwib25sb2FkIiwib25lcnJvciIsIl9ldmVudCIsIl9zb3VyY2UiLCJfbGluZW5vIiwiX2NvbG5vIiwiRG9jdW1lbnQiLCJlbVNpemVTdGFjayIsInVuaXF1ZUlkIiwiYmluZENyZWF0ZUltYWdlIiwiaXNJbWFnZXNMb2FkZWQiLCJpc0ZvbnRzTG9hZGVkIiwiZm9yY2VBbm9ueW1vdXNDcm9zc09yaWdpbiIsImNyZWF0ZURvY3VtZW50RWxlbWVudCIsImVsZW1lbnRUeXBlIiwiRWxlbWVudFR5cGUiLCJlbGVtZW50VHlwZXMiLCJjb25maWciLCJfb2JqZWN0U3ByZWFkJDEiLCJfb2JqZWN0U3ByZWFkIiwiQ2FudmciLCJfYXJndW1lbnRzIiwic3ZnRG9jdW1lbnQiLCJmb3JrIiwiZnJvbVN0cmluZyIsIl9hcmd1bWVudHMyIiwiYmFzZU9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9